CREATE OR REPLACE package body STGLIVE.PKG_CLR_REVAMP AS
procedure prc_customer_contract_extract
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     select in_date into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CUSTOMER CONTRACT EXTRACT',
                   'CUSTOMER CONTRACT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cust_contract';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cust_contract';
       v_sql := 'create table tmp_clr_cust_contract as
       SELECT /*+ PARALLEL(auto) */ 
           brn,
           acc,
           val_dt,
           lcy_bal bal,
           dr_tur,
           cr_tur,
           ccy,
           lcy_bal,
           has_tov,
           ic_bal,
           ic_lcy_bal,
           case when ccy<>''NGN'' then bal else 0 end ccy_bal
          from stglive.src_actb_vd_bal where val_dt='''|| v_date ||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
      v_sql := 'create table tmp_clr_cust_contract as
       SELECT /*+ PARALLEL(auto) */ 
           brn,
           acc,
           val_dt,
           lcy_bal bal,
           dr_tur,
           cr_tur,
           ccy,
           lcy_bal,
           has_tov,
           ic_bal,
           ic_lcy_bal,
           case when ccy<>''NGN'' then bal else 0 end ccy_bal
          from stglive.src_actb_vd_bal where val_dt='''|| v_date ||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;


end;
procedure prc_sourcing_cstb_contract
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CSTB CONTRACT EXTRACT',
                   'CSTB CONTRACT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cstb_contract';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cstb_contract';
       v_sql := 'create table tmp_clr_cstb_contract as
       SELECT /*+ PARALLEL(auto) */ 
          contract_ref_no,book_date,serial_no,user_ref_no,latest_version_no,product_code,contract_status,auth_status,
          external_ref_no
       from stglive.src_cstb_contract';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
      v_sql := 'create table tmp_clr_cstb_contract as
       SELECT /*+ PARALLEL(auto) */ 
          contract_ref_no,book_date,serial_no,user_ref_no,latest_version_no,product_code,contract_status,auth_status,
          external_ref_no
       from stglive.src_cstb_contract';
     
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;


end;
procedure prc_src_cltb_acctcomp_balbrkp
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLTB ACCTCOMP BALBRKP',
                   'CLTB ACCTCOMP BALBRKP',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_acctbal_brkupo';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
     if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cltb_acctbal_brkupo';
       v_sql := 'create table tmp_clr_cltb_acctbal_brkupo as
       SELECT /*+ PARALLEL(auto) */ 
          account_number,component,creation_date,balance,status_code
        from stglive.src_cltb_acct_comp_bal_brkup';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
      v_sql := 'create table tmp_clr_cltb_acctbal_brkupo as
       SELECT /*+ PARALLEL(auto) */ 
          account_number,component,creation_date,balance,status_code
       from stglive.src_cltb_acct_comp_bal_brkup';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_acctbal_brkup';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cltb_acctbal_brkup';
       v_sql := 'create table tmp_clr_cltb_acctbal_brkup as
       SELECT /*+ PARALLEL(auto) */ 
        account_number,component,creation_date,balance,status_code from(
        select a.*,rank() over(partition by account_number order by creation_date desc) rnk from tmp_clr_cltb_acctbal_brkupo a 
        where component=''PRINCIPAL'' and status_code = ''NORM''
        )where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
      v_sql := 'create table tmp_clr_cltb_acctbal_brkup as
       SELECT /*+ PARALLEL(auto) */ 
        account_number,component,creation_date,balance,status_code from(
        select a.*,rank() over(partition by account_number order by creation_date desc) rnk from tmp_clr_cltb_acctbal_brkupo a 
        where component=''PRINCIPAL'' and status_code = ''NORM''
        )where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;


end;
procedure prc_sourcing_cltb_acct_mast
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLTB ACCT MAST',
                   'CLTB ACCOUNT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_acct_master';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cltb_acct_master';
       v_sql := 'create table tmp_clr_cltb_acct_master as
       SELECT /*+ PARALLEL(auto) */ 
          account_number,customer_id,user_ref_no,b.product_code,currency,maturity_date,
          value_date,dr_prod_ac,book_date,account_status,user_defined_status,
        amount_disbursed,nvl(field_char_2,field_char_1) field_char_2,alt_acc_no,b.account_head AS asset_gl
       from stglive.src_cltb_account_master a, stglive.src_cltm_product_rth b
       where a.product_code=b.product_code(+)
       and accounting_role = ''LOAN_ACCOUNT''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_cltb_acct_master as
       SELECT /*+ PARALLEL(auto) */ 
          account_number,customer_id,user_ref_no,b.product_code,currency,maturity_date,
          value_date,dr_prod_ac,book_date,account_status,user_defined_status,
        amount_disbursed,nvl(field_char_2,field_char_1) field_char_2,alt_acc_no,b.account_head AS asset_gl
       from stglive.src_cltb_account_master a, stglive.src_cltm_product_rth b
       where a.product_code=b.product_code(+)
       and accounting_role = ''LOAN_ACCOUNT''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;


end;
procedure prc_sourcing_cltb_acct_ude_val
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'ACCT UDE VAL',
                   'ACCT UDE VAL',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_acct_udeval';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cltb_acct_udeval';
       v_sql := 'create table tmp_clr_cltb_acct_udeval as
       SELECT /*+ PARALLEL(auto) */ 
          account_number,effective_date,ude_id,ude_value,rate_code,resolved_value
       from stglive.src_cltb_account_ude_values';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_cltb_acct_udeval as
       SELECT /*+ PARALLEL(auto) */ 
          account_number,effective_date,ude_id,ude_value,rate_code,resolved_value
       from stglive.src_cltb_account_ude_values';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_acct_ude_sorted';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cltb_acct_ude_sorted';
       v_sql := 'create table tmp_clr_cltb_acct_ude_sorted as
    SELECT /*+ PARALLEL(auto) */ 
     account_number,effective_date,ude_id,ude_value,rate_code,rate from(
     select account_number,effective_date,ude_id,ude_value,rate_code,resolved_value rate,rank() over(partition by account_number order by effective_date desc)rnk
     from tmp_clr_cltb_acct_udeval where UDE_ID=''INTEREST_RATE'')
    where rnk=1';
    execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_cltb_acct_ude_sorted as
    SELECT /*+ PARALLEL(auto) */ 
     account_number,effective_date,ude_id,ude_value,rate_code,rate from(
     select account_number,effective_date,ude_id,ude_value,rate_code,resolved_value rate,rank() over(partition by account_number order by effective_date desc)rnk
     from tmp_clr_cltb_acct_udeval where UDE_ID=''INTEREST_RATE'')
    where rnk=1';
    execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;


end;
procedure prc_ldtb_contract_master
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'LDTB CONTRACT MAST',
                   'LDTB CONTRACT MAST',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_ldtb_contract_mast';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_ldtb_contract_mast';
       v_sql := 'create table tmp_clr_ldtb_contract_mast as
       SELECT /*+ PARALLEL(auto) */ 
          a.contract_ref_no,a.version_no,a.remarks,product,amount,currency,tenor,dflt_settle_ac,booking_date,value_date,
        a.module,counterparty,
          maturity_date,nvl(b.field_val_2,b.field_val_1) AS crms_code
      from  stglive.src_ldtb_contract_master a,fcubslive.cstm_contract_userdef_fields@loc_fcubslive b
      where a.contract_ref_no = b.contract_ref_no
        AND a.version_no = b.version_no(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_ldtb_contract_mast as
       SELECT /*+ PARALLEL(auto) */ 
          a.contract_ref_no,a.version_no,a.remarks,product,amount,currency,tenor,dflt_settle_ac,booking_date,value_date, 
       a.module,counterparty,
          maturity_date,nvl(b.field_val_2,b.field_val_1) AS crms_code
      from  stglive.src_ldtb_contract_master a,fcubslive.cstm_contract_userdef_fields@loc_fcubslive b
      where a.contract_ref_no = b.contract_ref_no
        AND a.version_no = b.version_no(+)';
     execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;


end;
procedure prc_cftb_contract_int
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CFTB CONTRACT INTEREST',
                   'CFTB CONTRACT INTEREST',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cftb_contract_int';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cftb_contract_int';
       v_sql := 'create table tmp_clr_cftb_contract_int as
       SELECT /*+ PARALLEL(auto) */ 
          contract_reference_no,event_sequence_no,rate,shown_in_contract_main_screen
        from stglive.src_cftb_contract_interest where shown_in_contract_main_screen=''Y''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cftb_contract_int as
       SELECT /*+ PARALLEL(auto) */ 
          contract_reference_no,event_sequence_no,rate,shown_in_contract_main_screen
        from stglive.src_cftb_contract_interest where shown_in_contract_main_screen=''Y''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

       begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cftbcontr_int_sequence';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cftbcontr_int_sequence';
       v_sql := 'create table tmp_clr_cftbcontr_int_sequence as
       SELECT /*+ PARALLEL(auto) */ 
          contract_reference_no,event_sequence_no,rate,shown_in_contract_main_screen
       from(select contract_reference_no,event_sequence_no,rate,shown_in_contract_main_screen,
      rank() over(partition by CONTRACT_REFERENCE_NO order by event_sequence_no desc) rnk
        from stglive.src_cftb_contract_interest where shown_in_contract_main_screen=''Y'')
       where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cftbcontr_int_sequence as
       SELECT /*+ PARALLEL(auto) */ 
          contract_reference_no,event_sequence_no,rate,shown_in_contract_main_screen
       from(select contract_reference_no,event_sequence_no,rate,shown_in_contract_main_screen,
      rank() over(partition by CONTRACT_REFERENCE_NO order by event_sequence_no desc) rnk
        from stglive.src_cftb_contract_interest where shown_in_contract_main_screen=''Y'')
       where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;


end;
procedure prc_ldtb_contract_bal
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'LDTB CONTRACT BAL',
                   'LDTB CONTRACT BAL',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_ldtb_contract_bal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_ldtb_contract_bal';
       v_sql := 'create table tmp_clr_ldtb_contract_bal as
       SELECT /*+ PARALLEL(auto) */ 
          CONTRACT_REF_NO,PRINCIPAL_OUTSTANDING_BAL,CURRENT_FACE_VALUE
       from stglive.src_ldtb_contract_balance';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_ldtb_contract_bal as
       SELECT /*+ PARALLEL(auto) */ 
          CONTRACT_REF_NO,PRINCIPAL_OUTSTANDING_BAL,CURRENT_FACE_VALUE
       from stglive.src_ldtb_contract_balance';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_sttm_customer
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'STTM CUSTOMER INFO',
                   'STTM CUSTOMER INFO',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_sttm_cust_info';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_sttm_cust_info';
       v_sql := 'create table tmp_clr_sttm_cust_info as
       SELECT /*+ PARALLEL(auto) */ 
        a.customer_no,
     nvl(trim(case when (length(full_name) < 10 or trim(full_name) is null) then first_name ||'' ''|| middle_name ||'' ''|| last_name else full_name 
        end),full_name) customer_name1,
            address_line1,address_line3,address_line2,local_branch,auth_stat,liability_no,
        customer_type,full_name
       from stglive.src_sttm_customer a, stglive.src_sttm_cust_personal b
       where a.customer_no=b.customer_no(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_sttm_cust_info as
       SELECT /*+ PARALLEL(auto) */ 
        a.customer_no,
   nvl(trim(case when (length(full_name) < 10 or trim(full_name) is null) then first_name ||'' ''|| middle_name ||'' ''|| last_name else full_name 
        end),full_name) customer_name1,
            address_line1,address_line3,address_line2,local_branch,auth_stat,liability_no,
        customer_type,full_name
       from stglive.src_sttm_customer a, stglive.src_sttm_cust_personal b
       where a.customer_no=b.customer_no(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_cstm_userdef_field
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'USERDEF FIELD VALUE',
                   'USERDEF FIELD VALUE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cstm_userdef_tin';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cstm_userdef_tin';
       v_sql := 'create table tmp_clr_cstm_userdef_tin as
       SELECT /*+ PARALLEL(auto) */ 
       substr(rec_key, 1, 9) rec_key,field_val_7 tin from cstm_function_userdef_fields@loc_fcubslive 
       where function_id = ''STDCIF''
                         and length(field_val_7) < 28
                         and field_val_7 is not null';
     execute immediate v_sql;
     --stglive.obiee_cust_tin
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cstm_userdef_tin as
       SELECT /*+ PARALLEL(auto) */ 
       substr(rec_key, 1, 9) rec_key,field_val_7 tin from cstm_function_userdef_fields@loc_fcubslive 
       where function_id = ''STDCIF''
                         and length(field_val_7) < 28
                         and field_val_7 is not null';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cstm_userdef_tin_';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cstm_userdef_tin_';
       v_sql := 'create table tmp_clr_cstm_userdef_tin_ as
       SELECT /*+ PARALLEL(auto) */ 
       rec_key,nvl(a.TIN,b.tin) tin from tmp_clr_cstm_userdef_tin a,
        stglive.obiee_cust_tin b
       where rec_key=cust_id(+)';
     execute immediate v_sql;
     --stglive.obiee_cust_tin
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cstm_userdef_tin_ as
       SELECT /*+ PARALLEL(auto) */ 
       rec_key,nvl(a.tin,b.tin) tin from tmp_clr_cstm_userdef_tin a,
        stglive.obiee_cust_tin b
       where rec_key=cust_id(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_cstm_product_accrole
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'PRODUCT ACCROLE',
                   'PRODUCT ACCROLE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cstm_prod_accrole';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cstm_prod_accrole';
       v_sql := 'create table tmp_clr_cstm_prod_accrole as
       SELECT /*+ PARALLEL(auto) */ 
       accounting_role,product_code,role_type,status,account_head from stglive.src_cstm_product_accrole';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cstm_prod_accrole as
       SELECT /*+ PARALLEL(auto) */ 
       accounting_role,product_code,role_type,status,account_head from stglive.src_cstm_product_accrole';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_lctb_contract_master
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'LCTB CONTRACT MASTA',
                   'LCTB CONTRACT MASTA',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_lctb_contract_master';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_lctb_contract_master';
       v_sql := 'create table tmp_clr_lctb_contract_master as
       SELECT /*+ PARALLEL(auto) */ 
     contract_ref_no,cust_ref_no,remarks,cust_name,product_code,contract_amt,contract_ccy,expiry_date,effective_date,
     cif_id,issue_date,event_seq_no
     from stglive.src_lctb_contract_master';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_lctb_contract_master as
    SELECT /*+ PARALLEL(auto) */ 
     contract_ref_no,cust_ref_no,remarks,cust_name,product_code,contract_amt,contract_ccy,expiry_date,effective_date,
     cif_id,issue_date,event_seq_no
     from stglive.src_lctb_contract_master';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_lctb_contract_masta_';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_lctb_contract_masta_';
    v_sql := 'create table tmp_clr_lctb_contract_masta_ as
     SELECT /*+ PARALLEL(auto) */ 
     contract_ref_no,cust_ref_no,remarks,cust_name,product_code,contract_amt,contract_ccy,expiry_date,effective_date,
     cif_id,issue_date,event_seq_no from(
        select 
    contract_ref_no,cust_ref_no,remarks,cust_name,product_code,contract_amt,contract_ccy,expiry_date,effective_date,
     cif_id,issue_date,event_seq_no,rank() over(partition by contract_ref_no order by event_seq_no desc) rnk
     from tmp_clr_lctb_contract_master)
     where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_lctb_contract_masta_ as
     SELECT /*+ PARALLEL(auto) */ 
     contract_ref_no,cust_ref_no,remarks,cust_name,product_code,contract_amt,contract_ccy,expiry_date,effective_date,
     cif_id,issue_date,event_seq_no from(
        select 
    contract_ref_no,cust_ref_no,remarks,cust_name,product_code,contract_amt,contract_ccy,expiry_date,effective_date,
     cif_id,issue_date,event_seq_no,rank() over(partition by contract_ref_no order by event_seq_no desc) rnk
     from tmp_clr_lctb_contract_master)
     where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_contract_grtamount
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CONTRACT GRANT AMOUNT',
                   'CONTRACT GRANT AMOUNT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_lctb_contract_grant';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_lctb_contract_grant';
     v_sql := 'create table tmp_clr_lctb_contract_grant as
       SELECT /*+ PARALLEL(auto) */ 
     contract_ref_no, version_no,max_grntee_amt max_contract_amt
     from lctb_cntrct_mxgrntamt_cust@loc_fcubslive';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_lctb_contract_grant as
     SELECT /*+ PARALLEL(auto) */ 
     contract_ref_no, version_no,max_grntee_amt max_contract_amt
     from lctb_cntrct_mxgrntamt_cust@loc_fcubslive';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_lctb_contract_grant_';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_lctb_contract_grant_';
       v_sql := 'create table tmp_clr_lctb_contract_grant_ as
     select /*+ parallel(auto) */ 
    contract_ref_no,version_no,max_contract_amt from(
      select contract_ref_no,version_no,max_contract_amt, 
      rank() over(partition by contract_ref_no order by version_no desc) rnk
      from tmp_clr_lctb_contract_grant)
    where rnk=1';
    execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_lctb_contract_grant_ as
     select /*+ parallel(auto) */ 
    contract_ref_no,version_no,max_contract_amt from(
      select contract_ref_no,version_no,max_contract_amt, 
      rank() over(partition by contract_ref_no order by version_no desc) rnk
      from tmp_clr_lctb_contract_grant)
    where rnk=1';
    execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_clr_ti_extract
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR TI EXTRACT',
                   'CLR TI EXTRACT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_ti_extract';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_ti_extract';
     v_sql := 'create table tmp_clr_ti_extract as
       SELECT /*+ PARALLEL(auto) */ 
     b.master_ref ref_no,
                b.pricustmnm cust_id,
                a.fince_ref user_ref_no,
                a.ccy_finced contrt_ccy,
                a.amt_finced / 100 amount,
                b.amt_o_s / 100 amount_outstanding,
                a.startdate booking_date,
                a.finperunit period,
                a.actualrate rate,
                a.maturity maturity_date,
                a.fully_paid fully_paid,
                a.intp_amt / 100 int_todate,
                c.reference form_m_ref,
                '' '' as asset_gl,
                '' '' as settlement_account
           FROM tizone1.fncemaster@ti_linklive a,
                tizone1.partydtls@ti_linklive c,
                master@ti_linklive b,
                tizone1.initfince@ti_linklive t,
                tizone1.currentint@ti_linklive j
          WHERE a.debitparty = c.key97
                AND a.key97 = b.key97
                AND t.int_key = j.key97
                AND a.finceevkey = t.key97
                AND a.startdate <= '''||v_date||'''
                AND b.active = ''Y''
                AND a.fully_paid = ''N''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_ti_extract as
       SELECT /*+ PARALLEL(auto) */ 
     b.master_ref ref_no,
                b.pricustmnm cust_id,
                a.fince_ref user_ref_no,
                a.ccy_finced contrt_ccy,
                a.amt_finced / 100 amount,
                b.amt_o_s / 100 amount_outstanding,
                a.startdate booking_date,
                a.finperunit period,
                a.actualrate rate,
                a.maturity maturity_date,
                a.fully_paid fully_paid,
                a.intp_amt / 100 int_todate,
                c.reference form_m_ref,
                '' '' as asset_gl,
                '' '' as settlement_account
           FROM tizone1.fncemaster@ti_linklive a,
                tizone1.partydtls@ti_linklive c,
                master@ti_linklive b,
                tizone1.initfince@ti_linklive t,
                tizone1.currentint@ti_linklive j
          WHERE a.debitparty = c.key97
                AND a.key97 = b.key97
                AND t.int_key = j.key97
                AND a.finceevkey = t.key97
                AND a.startdate <= '''||v_date||'''
                AND b.active = ''Y''
                AND a.fully_paid = ''N''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_elvwpool_link_od
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select in_date into v_date from clr_date_control;

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'ELVW POOL OD',
                   'ELVW POOL OD',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_elvw_poollink_od';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_elvw_poollink_od';
     v_sql := 'create table tmp_clr_elvw_poollink_od as
       SELECT /*+ PARALLEL(auto) */ 
     liab_no,rate_of_interest,linked_amount,eff_start_date,eff_end_date,pool_id
    from stglive.elvw_pool_coll_link_odint_new';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_elvw_poollink_od as
       SELECT /*+ PARALLEL(auto) */ 
     liab_no,rate_of_interest,linked_amount,eff_start_date,eff_end_date,pool_id
    from stglive.elvw_pool_coll_link_odint_new';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_elvw_pool4_od1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_elvw_pool4_od1';
    v_sql := 'create table tmp_clr_elvw_pool4_od1 as
    SELECT /*+ PARALLEL(auto) */ 
    liab_no,max(rate_of_interest) max_interest
    from tmp_clr_elvw_poollink_od where eff_end_date > '''||v_date||''' --(select max (today) from  stglive.src_sttm_dates)
    group by liab_no';
   execute immediate v_sql;
   v_rows_processed := SQL%ROWCOUNT;
   else
    v_sql := 'create table tmp_clr_elvw_pool4_od1 as
    SELECT /*+ PARALLEL(auto) */ 
    liab_no,max(rate_of_interest) max_interest
    from tmp_clr_elvw_poollink_od where eff_end_date > '''||v_date||''' --(select max(today) from  stglive.src_sttm_dates)
    group by liab_no';
    execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_od_fac_pool_others
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2(10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'OD FAC POOL OTHERS',
                   'OD FAC POOL OTHERS',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_od_pool_facothers';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_od_pool_facothers';
     v_sql := 'create table tmp_clr_od_pool_facothers as
       SELECT /*+ PARALLEL(auto) */ 
       distinct
           liab_no,
           linked_ref_no line_code,
           c.cust_ac_no,
           linked_ccy line_currency,
           e.liab_id id,
           collateral_contribution,
           dsp_eff_line_amount,
           linked_amount,
           eff_start_date line_start_date,
           eff_end_date line_expiry_date
        from  stglive.elvw_pool_coll_link_odint_new e,
           stglive.src_sttm_cust_account_linkages c,
                 stglive.src_getm_facility g,
                 stglive.src_getb_pool_link d
     where     g.line_code || g.line_serial = c.linked_ref_no
           and c.linkage_type = ''F''
           and e.liab_id = g.liab_id
           and d.pool_id = e.pool_id
           and d.facility_id = g.id
           and eff_start_date <= (select max(today) from stglive.src_sttm_dates)
           and eff_end_date > (select max(today) from stglive.src_sttm_dates)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_od_pool_facothers as
       SELECT /*+ PARALLEL(auto) */ 
       distinct
           liab_no,
           linked_ref_no line_code,
           c.cust_ac_no,
           linked_ccy line_currency,
           e.liab_id id,
           collateral_contribution,
           dsp_eff_line_amount,
           linked_amount,
           eff_start_date line_start_date,
           eff_end_date line_expiry_date
      from  stglive.elvw_pool_coll_link_odint_new e,
           stglive.src_sttm_cust_account_linkages c,
                 stglive.src_getm_facility g,
                 stglive.src_getb_pool_link d
     where  g.line_code || g.line_serial = c.linked_ref_no
         and c.linkage_type = ''F''
         and e.liab_id = g.liab_id
         and d.pool_id = e.pool_id
         and d.facility_id = g.id
         and eff_start_date <= (select max(today) from stglive.src_sttm_dates)
         and eff_end_date > (select max(today) from stglive.src_sttm_dates)';
     
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_clr_sttm_cust_account
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR STTM ACCT',
                   'CLR STTM ACCT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_sttm_cust_acct_od';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_sttm_cust_acct_od';
    v_sql := 'create table tmp_clr_sttm_cust_acct_od as
       SELECT /*+ PARALLEL(auto) */ 
     cust_no cust_id,
           cust_ac_no cod_acct_no,
           acy_curr_balance od_amount,
           ccy cod_ccy,
           account_class cod_prod,
           dr_gl cod_gl_ast_bal,
           acy_curr_balance,
           auth_stat,
           record_stat,
           account_type,
           ac_open_date
      from stglive.src_sttm_cust_account';
      execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_sttm_cust_acct_od as
       SELECT /*+ PARALLEL(auto) */ 
     cust_no cust_id,
           cust_ac_no cod_acct_no,
           acy_curr_balance od_amount,
           ccy cod_ccy,
           account_class cod_prod,
           dr_gl cod_gl_ast_bal,
           acy_curr_balance,
           auth_stat,
           record_stat,
           account_type,
           ac_open_date
      from stglive.src_sttm_cust_account';
      execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_clr_uncorfirm_lc
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR UNCONFIRM LC',
                   'CLR UNCONFIRM LC',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_unconfirm_lc';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_unconfirm_lc';
    v_sql := 'create table tmp_clr_unconfirm_lc as
       SELECT /*+ PARALLEL(auto) */ 
               DISTINCT
                TRIM (f.master_ref) AS lc_ref,
                f.canprnref approved_mf_no,
                TRIM (f.pricustmnm) AS cust_id,
                tizone1.get_ba_ref@ti_linklive (canprnref, o.licallamt) ba_no,
                f.priname_l1 AS applicant,
                f.nprcustmnm AS applicant_bank,
                tizone1.get_app_addr@ti_linklive (f.pcp_pty)
                   applicant_address,
                tizone1.get_bene_cpc@ti_linklive (o.ben_pty) beneficiary,
                f.master_ref,
                tizone1.get_benaddr_cl@ti_linklive (o.ben_pty)
                   beneficiary_address,
                f.status,
                (f.amount / 100) amount,  --(f.amt_o_s / 100) outstanding_bal,
                TRIM (f.totliabamt / 100) AS total_liability_amt,
                f.ccy AS currency,
                DECODE (f.prdclass,
                        ''T'', ''TRADE FINANCE'',
                        ''C'', ''CLEAN PAYMENT'',
                        ''F'', ''SUPPLY CHAIN FINANCE'')
                   product_type,
                f.ctrct_date AS booking_date,
                o.ship_date,
                TRIM(f.expiry_loc) AS port_of_loading,
                o.discharge port_of_discharge,
                o.incoterms,
                o.goodscode,
                o.pct_plus,
                o.pct_minus,
                f.expiry_dat AS maturity_date
           FROM master@ti_linklive f,
                baseevent@ti_linklive d,
                stephist@ti_linklive j,
                stephist@ti_linklive h,
                lcmaster@ti_linklive o
          WHERE  
               pri_ref LIKE ''FLO%''
                AND active = ''Y''
                AND refno_mbe = ''MBACCESS''
                AND d.key97 = j.event_key
                AND d.key97 = h.event_key
                AND f.key97 = o.key97(+)
                AND TRIM (j.TYPE) = ''i''
                AND h.TYPE = ''a1''
                AND j.status = ''c''
                AND j.status = h.status
                AND TRIM (j.for_team) = ''ACCESS-01''
                AND TRIM (j.for_team) = TRIM (h.for_team)
                AND d.master_key = f.key97
                AND ctrct_date <=trunc(sysdate)
                AND expiry_dat >=trunc(sysdate)';
                --AND ctrct_date <= '''|| v_date ||'''
                --AND expiry_dat >= '''|| v_date ||'''';
      execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_unconfirm_lc as
       SELECT /*+ PARALLEL(auto) */ 
              DISTINCT
                TRIM (f.master_ref) AS lc_ref,
                f.canprnref approved_mf_no,
                TRIM (f.pricustmnm) AS cust_id,
                tizone1.get_ba_ref@ti_linklive (canprnref, o.licallamt) ba_no,
                f.priname_l1 AS applicant,
                f.nprcustmnm AS applicant_bank,
                tizone1.get_app_addr@ti_linklive (f.pcp_pty)
                   applicant_address,
                tizone1.get_bene_cpc@ti_linklive (o.ben_pty) beneficiary,
                f.master_ref,
                tizone1.get_benaddr_cl@ti_linklive (o.ben_pty)
                   beneficiary_address,
                f.status,
                (f.amount / 100) amount,  --(f.amt_o_s / 100) outstanding_bal,
                TRIM (f.totliabamt / 100) AS total_liability_amt,
                f.ccy AS currency,
                DECODE (f.prdclass,
                        ''T'', ''TRADE FINANCE'',
                        ''C'', ''CLEAN PAYMENT'',
                        ''F'', ''SUPPLY CHAIN FINANCE'')
                   product_type,
                f.ctrct_date AS booking_date,
                o.ship_date,
                TRIM (f.expiry_loc) AS port_of_loading,
                o.discharge port_of_discharge,
                o.incoterms,
                o.goodscode,
                o.pct_plus,
                o.pct_minus,
                f.expiry_dat AS maturity_date
           FROM master@ti_linklive f,
                baseevent@ti_linklive d,
                stephist@ti_linklive j,
                stephist@ti_linklive h,
                lcmaster@ti_linklive o
          WHERE  
               pri_ref LIKE ''FLO%''
                AND active = ''Y''
                AND refno_mbe = ''MBACCESS''
                AND d.key97 = j.event_key
                AND d.key97 = h.event_key
                AND f.key97 = o.key97(+)
                AND TRIM (j.TYPE) = ''i''
                AND h.TYPE = ''a1''
                AND j.status = ''c''
                AND j.status = h.status
                AND TRIM (j.for_team) = ''ACCESS-01''
                AND TRIM (j.for_team) = TRIM (h.for_team)
                AND d.master_key = f.key97
                AND ctrct_date <=trunc(sysdate)
                AND expiry_dat >=trunc(sysdate)';
                --AND ctrct_date <= '''|| v_date ||'''
                --AND expiry_dat >= '''|| v_date ||'''';
      execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_stg_L2_fcc_ldtb1
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-3;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select in_date into v_date from clr_date_control;

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR LDTB FCC',
                   'CLR LDTB FCC',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_ldtb_contract_version';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_ldtb_contract_version';
     v_sql := 'create table tmp_clr_ldtb_contract_version as
       SELECT /*+ PARALLEL(auto) */ 
       a.*,user_ref_no,contract_status,auth_status from tmp_clr_ldtb_contract_mast a, tmp_clr_cstb_contract b 
        where a.contract_ref_no = b.contract_ref_no
        and a.version_no = b.latest_version_no
        and module = ''MM''
        and product in(''USLL'',''UNLL'',''COLC'',''IOLC'',''USPP'',''USTC'')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_ldtb_contract_version as
       SELECT /*+ PARALLEL(auto) */ 
       a.*,user_ref_no,contract_status,auth_status from tmp_clr_ldtb_contract_mast a, tmp_clr_cstb_contract b 
        where a.contract_ref_no = b.contract_ref_no
        and a.version_no = b.latest_version_no
        and module = ''MM''
        and product in(''USLL'',''UNLL'',''COLC'',''IOLC'',''USPP'',''USTC'')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_ldtb_into_fcc';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
     execute immediate 'drop table tmp_clr_ldtb_into_fcc';
     v_sql := 'create table tmp_clr_ldtb_into_fcc as
       SELECT /*+ PARALLEL(auto) */ 
       a.contract_ref_no ref_no,
                a.user_ref_no,
                a.remarks,
                b.customer_name1,
                a.product product_code,
                a.amount,
                c.principal_outstanding_bal,
                d.rate,
                a.currency,
                a.tenor,
                b.customer_no cust_id,
                a.dflt_settle_ac,
                a.booking_date,
                a.value_date,
                a.maturity_date,
                a.contract_status,
                '' '' instrument_type,
                e.account_head AS asset_gl,
               crms_code
      from tmp_clr_ldtb_contract_version a, tmp_clr_sttm_cust_info b,
      tmp_clr_ldtb_contract_bal c, tmp_clr_cftbcontr_int_sequence d,tmp_clr_cstm_prod_accrole e
          where a.contract_ref_no = c.contract_ref_no(+)
          AND a.contract_ref_no = d.contract_reference_no(+)
          AND a.counterparty = b.customer_no(+)
          AND a.product = e.product_code(+)
        and e.ACCOUNTING_ROLE=''ASSETGL''
        and a.CONTRACT_STATUS=''A''
        and a.AUTH_STATUS=''A''
        and a.booking_date<='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
   else
      v_sql := 'create table tmp_clr_ldtb_into_fcc as
       SELECT /*+ PARALLEL(auto) */ 
       a.contract_ref_no ref_no,
                a.user_ref_no,
                a.remarks,
                b.customer_name1,
                a.product product_code,
                a.amount,
                c.principal_outstanding_bal,
                d.rate,
                a.currency,
                a.tenor,
                b.customer_no cust_id,
                a.dflt_settle_ac,
                a.booking_date,
                a.value_date,
                a.maturity_date,
                a.contract_status,
                '' '' instrument_type,
                e.account_head AS asset_gl,
               crms_code
      from tmp_clr_ldtb_contract_version a, tmp_clr_sttm_cust_info b,
      tmp_clr_ldtb_contract_bal c, tmp_clr_cftbcontr_int_sequence d,tmp_clr_cstm_prod_accrole e
          where a.contract_ref_no = c.contract_ref_no(+)
          AND a.contract_ref_no = d.contract_reference_no(+)
          AND a.counterparty = b.customer_no(+)
          AND a.product = e.product_code(+)
        and e.ACCOUNTING_ROLE=''ASSETGL''
        and a.CONTRACT_STATUS=''A''
        and a.AUTH_STATUS=''A''
        and a.booking_date<='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_stg_L2_fcc_lctb1
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      p_rate              number := null;
      
      
begin

    select in_date into v_date from clr_date_control;

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR LCTB FCC',
                   'CLR LCTB FCC',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_lctb_into_fcc1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --tmp_clr_lctb_into_fcc
       if(tab_cnt)>=1 Then
     execute immediate 'drop table tmp_clr_lctb_into_fcc1';
     v_sql := 'create table tmp_clr_lctb_into_fcc1 as
       SELECT /*+ PARALLEL(4) */
          a.contract_ref_no ref_no,
          a.cust_ref_no,
          a.remarks,
          a.cust_name,
          a.product_code product_code,
          z.max_contract_amt amount,
          a.contract_amt principal_outstanding_bal,
          '||333333||' rate,
          a.contract_ccy,
          a.expiry_date - a.effective_date tenor,
          a.cif_id cust_id,
          '' '' dflt_settle_ac,
          b.book_date,
          a.effective_date value_date,
          a.expiry_date maturity_date,
          b.contract_status,
          '' '' instrument_type,
          d.account_head AS asset_gl
      from tmp_clr_lctb_contract_masta_ a,tmp_clr_cstb_contract b,tmp_clr_lctb_contract_grant_ z,
      tmp_clr_cstm_prod_accrole d
      WHERE a.contract_ref_no = b.contract_ref_no
       AND a.contract_ref_no = z.contract_ref_no(+)
       AND a.product_code = d.product_code(+)
       AND b.contract_status = ''A''
       and d.accounting_role = ''LC_OCU''
       AND a.issue_date <= '''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
   else
      v_sql := 'create table tmp_clr_lctb_into_fcc1 as
       SELECT /*+ PARALLEL(4) */
          a.contract_ref_no ref_no,
          a.cust_ref_no,
          a.remarks,
          a.cust_name,
          a.product_code product_code,
          z.max_contract_amt amount,
          a.contract_amt principal_outstanding_bal,
          '||333333||' rate,
          a.contract_ccy,
          a.expiry_date - a.effective_date tenor,
          a.cif_id cust_id,
          '' '' dflt_settle_ac,
          b.book_date,
          a.effective_date value_date,
          a.expiry_date maturity_date,
          b.contract_status,
          '' '' instrument_type,
          d.account_head AS asset_gl
      from tmp_clr_lctb_contract_masta_ a,tmp_clr_cstb_contract b,tmp_clr_lctb_contract_grant_ z,
      tmp_clr_cstm_prod_accrole d
      WHERE a.contract_ref_no = b.contract_ref_no
       AND a.contract_ref_no = z.contract_ref_no(+)
       AND a.product_code = d.product_code(+)
       AND b.contract_status = ''A''
       and d.accounting_role = ''LC_OCU''
       AND a.issue_date <= '''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_lctb_into_fcc';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --tmp_clr_lctb_into_fcc
       if(tab_cnt)>=1 Then
     execute immediate 'drop table tmp_clr_lctb_into_fcc';
     v_sql := 'create table tmp_clr_lctb_into_fcc as
     select /*+ parallel(4) */
     ref_no, cust_ref_no, remarks, cust_name, product_code, amount, principal_outstanding_bal, rate,
     contract_ccy, tenor, cust_id,dflt_settle_ac, book_date, value_date, maturity_date, contract_status,
     instrument_type, asset_gl
        from(
        select 
        ref_no, cust_ref_no, remarks, cust_name, product_code, amount, principal_outstanding_bal, trim(rate) rate, contract_ccy, tenor,
        cust_id,nvl(trim(dflt_settle_ac),account_number) dflt_settle_ac, book_date, value_date, maturity_date,
        contract_status, instrument_type, asset_gl,row_number() over(partition by ref_no order by book_date,
        value_date,maturity_date) rnk
        from tmp_clr_lctb_into_fcc1 a, tmp_clr_acct_snapshot b ---odsrev.drv_account_snapshot_details  b
        where cust_id=customer_number(+)
        and  contract_ccy=account_currency(+))
     where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_lctb_into_fcc as
     select /*+ parallel(4) */
     ref_no, cust_ref_no, remarks, cust_name, product_code, amount, principal_outstanding_bal, rate,
     contract_ccy, tenor, cust_id,dflt_settle_ac, book_date, value_date, maturity_date, contract_status,
     instrument_type, asset_gl
        from(
        select 
        ref_no, cust_ref_no, remarks, cust_name, product_code, amount, principal_outstanding_bal, trim(rate) rate, contract_ccy, tenor,
        cust_id,nvl(trim(dflt_settle_ac),account_number) dflt_settle_ac, book_date, value_date, maturity_date,
        contract_status, instrument_type, asset_gl,row_number() over(partition by ref_no order by book_date,
        value_date,maturity_date) rnk
        from tmp_clr_lctb_into_fcc1 a, tmp_clr_acct_snapshot b ---odsrev.drv_account_snapshot_details  b
        where cust_id=customer_number(+)
        and  contract_ccy=account_currency(+))
     where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_stg_L2_fcc_cltb1
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     select in_date into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR CLTB FCC',
                   'CLR CLTB FCC',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_contract_';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cltb_contract_';
     v_sql := 'create table tmp_clr_cltb_contract_ as
       SELECT /*+ PARALLEL(4) */
               a.account_number ref_no,
                a.user_ref_no,
                '' '' remarks,
                b.customer_name1,
                a.product_code product_code,
                a.amount_disbursed,
                c.balance,
                d.rate,
                a.currency,
                a.maturity_date - a.value_date tenor,
                b.customer_no cust_id,
                a.dr_prod_ac,
                a.book_date,
                a.value_date,
                a.maturity_date,
                a.account_status,
                '' '' instrument_type,
                a.asset_gl,
                field_char_2 AS crms_code,
                alt_acc_no old_reference
            from tmp_clr_cltb_acct_master a, tmp_clr_sttm_cust_info b,
            tmp_clr_cltb_acctbal_brkup c,tmp_clr_cltb_acct_ude_sorted d
            where a.account_number = c.account_number(+)
         AND a.account_number = d.account_number(+)
         AND a.customer_id = b.customer_no(+)
         and a.account_status = ''A''
         AND book_date <='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cltb_contract_ as
       SELECT /*+ PARALLEL(4) */
               a.account_number ref_no,
                a.user_ref_no,
                '' '' remarks,
                b.customer_name1,
                a.product_code product_code,
                a.amount_disbursed,
                c.balance,
                d.rate,
                a.currency,
                a.maturity_date - a.value_date tenor,
                b.customer_no cust_id,
                a.dr_prod_ac,
                a.book_date,
                a.value_date,
                a.maturity_date,
                a.account_status,
                '' '' instrument_type,
                a.asset_gl,
                field_char_2 AS crms_code,
                alt_acc_no old_reference
            from tmp_clr_cltb_acct_master a, tmp_clr_sttm_cust_info b,
            tmp_clr_cltb_acctbal_brkup c,tmp_clr_cltb_acct_ude_sorted d
            where a.account_number = c.account_number(+)
         AND a.account_number = d.account_number(+)
         AND a.customer_id = b.customer_no(+)
         and a.account_status = ''A''
         AND book_date <='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_elvwpool_linkage_od2
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     select in_date into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'ELVW ELVWPOOL OD2',
                   'ELVW ELVWPOOL OD2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_elvwlink_od2';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
     end;
      
     if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_elvwlink_od2';
       v_sql := 'create table tmp_clr_elvwlink_od2 as
       SELECT /*+ PARALLEL(auto) */ 
        distinct liab_no,
           linked_ref_no line_code,
           c.cust_ac_no,
           linked_ccy line_currency,
           e.liab_id id,
           collateral_contribution,
           dsp_eff_line_amount,
           linked_amount,
           eff_start_date line_start_date,
           eff_end_date line_expiry_date
      from  stglive.elvw_pool_coll_link_odint_new e,
           stglive.src_sttm_cust_account_linkages c,
                 stglive.src_getm_facility g,
                 stglive.src_getb_pool_link d
     where g.line_code || g.line_serial = c.linked_ref_no
           and c.linkage_type = ''F''
           and (e.liab_no = c.customer_no or
                e.liab_no in (select f.liab_id from stglive.src_getm_liab_cust f
                where f.customer_no=c.customer_no))
           and e.liab_id = g.liab_id
           and d.pool_id = e.pool_id
           and d.facility_id = g.id
           and eff_start_date <='''||v_date||'''
           and eff_end_date >='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_elvwlink_od2 as
       SELECT /*+ PARALLEL(auto) */ 
         distinct liab_no,
           linked_ref_no line_code,
           c.cust_ac_no,
           linked_ccy line_currency,
           e.liab_id id,
           collateral_contribution,
           dsp_eff_line_amount,
           linked_amount,
           eff_start_date line_start_date,
           eff_end_date line_expiry_date
      from  stglive.elvw_pool_coll_link_odint_new e,
           stglive.src_sttm_cust_account_linkages c,
                 stglive.src_getm_facility g,
                 stglive.src_getb_pool_link d
     where g.line_code || g.line_serial = c.linked_ref_no
           and c.linkage_type = ''F''
           and (e.liab_no = c.customer_no or
                e.liab_no in (select f.liab_id from stglive.src_getm_liab_cust f
                where f.customer_no=c.customer_no))
           and e.liab_id = g.liab_id
           and d.pool_id = e.pool_id
           and d.facility_id = g.id
           and eff_start_date <='''||v_date||'''
           and eff_end_date >='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_stg_L2_od_consolidate
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      vv_sql             VARCHAR2 (20000);
      
begin

     select in_date into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'OD CONSOLIDATION L2',
                   'OD CONSOLIDATION L2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_tmp_od';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_tmp_od';
       v_sql := 'create table tmp_clr_tmp_od as
       SELECT /*+ PARALLEL(auto) */ 
       a.liab_no,
        line_code,
        cust_ac_no,
        line_currency,
        id,
        collateral_contribution,
        dsp_eff_line_amount,
        linked_amount,
        max_interest,
        line_start_date,
        line_expiry_date
    --from tmp_clr_elvwlink_od2 a, tmp_clr_elvw_pool4_od1 b
    from tmp_clr_od_pool_facothers a, tmp_clr_elvw_pool4_od1 b
     where a.liab_no = b.liab_no(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_tmp_od as
       SELECT /*+ PARALLEL(auto) */ 
       a.liab_no,
        line_code,
        cust_ac_no,
        line_currency,
        id,
        collateral_contribution,
        dsp_eff_line_amount,
        linked_amount,
        max_interest,
        line_start_date,
        line_expiry_date
      --from tmp_clr_elvwlink_od2 a, tmp_clr_elvw_pool4_od1 b
      from tmp_clr_od_pool_facothers a, tmp_clr_elvw_pool4_od1 b
     where a.liab_no = b.liab_no(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
    execute immediate 'truncate table tmp_od_dedup_cust_acct';
    
    vv_sql:='select liab_no, line_code, cust_ac_no, line_currency, id, collateral_contribution, dsp_eff_line_amount, linked_amount, 
           max_interest, line_start_date, line_expiry_date
     from (          
        select liab_no, line_code, cust_ac_no, line_currency, id, collateral_contribution, dsp_eff_line_amount, linked_amount, 
               max_interest, line_start_date, line_expiry_date,
               row_number() over (partition by cust_ac_no order by line_expiry_date desc, line_start_date desc) rnk
          from tmp_clr_tmp_od)
     where rnk = 1';
    execute immediate 'insert into tmp_od_dedup_cust_acct(liab_no, line_code, cust_ac_no, line_currency, id, collateral_contribution,
    dsp_eff_line_amount, linked_amount, max_interest, line_start_date, line_expiry_date)'||vv_sql;
    commit;
    
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_tmp_od_negtvebal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_tmp_od_negtvebal';--tmp_clr_sttm_cust_acct_od
       v_sql := 'create table tmp_clr_tmp_od_negtvebal as
       SELECT /*+ PARALLEL(auto) */ 
       cust_id,
       cod_acct_no,
       od_amount,
       cod_ccy,
       cod_prod,
       cod_gl_ast_bal
      from tmp_clr_sttm_cust_acct_od
       where auth_stat = ''A''
                      and record_stat = ''O''
                      and cod_prod not in
                             (''080005'',
                              ''070006'',
                              ''070008'',
                              ''090001'',
                              ''050029'',
                              ''090002'',
                              ''090004'')
                      and account_type not in (''Y'', ''N'')
                      and length(cod_acct_no) = 10
                      and acy_curr_balance < 0';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_tmp_od_negtvebal as
       SELECT /*+ PARALLEL(auto) */ 
       cust_id,
       cod_acct_no,
       od_amount,
       cod_ccy,
       cod_prod,
       cod_gl_ast_bal
      from tmp_clr_sttm_cust_acct_od
       where auth_stat = ''A''
                      and record_stat = ''O''
                      and cod_prod not in
                             (''080005'',
                              ''070006'',
                              ''070008'',
                              ''090001'',
                              ''050029'',
                              ''090002'',
                              ''090004'')
                      and account_type not in (''Y'', ''N'')
                      and length(cod_acct_no) = 10
                      and acy_curr_balance < 0';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     execute immediate 'truncate table tmp_combine_negbal_wtod';
    
    vv_sql:='select distinct a.cust_id,
                    a.cod_acct_no,
                    nvl(od_amount, 0) od_amount,
                    nvl (b.line_start_date, '''||v_date||''') booking_date,
                    b.max_interest rate,
                    nvl (collateral_contribution, 0) od_limt,
                    nvl (b.line_expiry_date, '''||v_date||''') maturity_date,
                    a.cod_ccy,
                    a.cod_prod,
                    a.cod_gl_ast_bal,
                    a.cod_acct_no settlement_account
      from tmp_clr_tmp_od_negtvebal a, tmp_od_dedup_cust_acct b
     where a.cod_acct_no = b.cust_ac_no(+)';
    execute immediate 'insert into tmp_combine_negbal_wtod(cust_id, cod_acct_no, od_amount, booking_date, rate,
       od_limt, maturity_date, cod_ccy, cod_prod, cod_gl_ast_bal, settlement_account)'||vv_sql;
    commit;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_tmp_od_postvebal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_tmp_od_postvebal';--tmp_clr_sttm_cust_acct_od
       v_sql := 'create table tmp_clr_tmp_od_postvebal as
       SELECT /*+ PARALLEL(auto) */ 
       cust_id,
       cod_acct_no,
       od_amount,
       cod_ccy,
       cod_prod,
       cod_gl_ast_bal
      from tmp_clr_sttm_cust_acct_od
       where auth_stat = ''A''
                      --and record_stat = ''O''
                      and cod_prod not in
                             (''080005'',
                              ''070006'',
                              ''070008'',
                              ''090001'',
                              ''050029'',
                              ''090002'',
                              ''090004'')
                      and account_type not in (''Y'', ''N'')
                      and length(cod_acct_no) = 10
                      and acy_curr_balance >= 0';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_tmp_od_postvebal as
       SELECT /*+ PARALLEL(auto) */ 
       cust_id,
       cod_acct_no,
       od_amount,
       cod_ccy,
       cod_prod,
       cod_gl_ast_bal
      from tmp_clr_sttm_cust_acct_od
       where auth_stat = ''A''
                      --and record_stat = ''O''
                      and cod_prod not in
                             (''080005'',
                              ''070006'',
                              ''070008'',
                              ''090001'',
                              ''050029'',
                              ''090002'',
                              ''090004'')
                      and account_type not in (''Y'', ''N'')
                      and length(cod_acct_no) = 10
                      and acy_curr_balance >= 0';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     execute immediate 'truncate table tmp_combine_postvebal_wtod';
    
    vv_sql:='select distinct a.cust_id,
                    a.cod_acct_no,
                    0 od_amount,
                    nvl (b.line_start_date, '''||v_date||''') booking_date,
                    b.max_interest rate,
                    nvl (collateral_contribution, 0) od_limt,
                    nvl (b.line_expiry_date, '''||v_date||''') maturity_date,
                    a.cod_ccy,
                    a.cod_prod,
                    a.cod_gl_ast_bal,
                    a.cod_acct_no settlement_account
      from tmp_clr_tmp_od_postvebal a, tmp_od_dedup_cust_acct b
     where a.cod_acct_no = b.cust_ac_no';
    execute immediate 'insert into tmp_combine_postvebal_wtod(cust_id, cod_acct_no, od_amount, booking_date, rate,
       od_limt, maturity_date, cod_ccy, cod_prod, cod_gl_ast_bal, settlement_account)'||vv_sql;
    commit;
    
   begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_combine_clr_allod';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_combine_clr_allod';--tmp_clr_sttm_cust_acct_od
       v_sql := 'create table tmp_combine_clr_allod as
    SELECT /*+ PARALLEL(auto) */ 
      cust_id, cod_acct_no, od_amount, booking_date, rate, od_limt, maturity_date, cod_ccy currency,cod_prod product_code,
      cod_gl_ast_bal asset_gl, settlement_account
      from tmp_combine_negbal_wtod
      union all
    SELECT /*+ PARALLEL(auto) */ 
      cust_id, cod_acct_no, od_amount, booking_date, rate, od_limt, maturity_date, cod_ccy currency,cod_prod product_code,
      cod_gl_ast_bal asset_gl, settlement_account
      from tmp_combine_postvebal_wtod';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_combine_clr_allod as
    SELECT /*+ PARALLEL(auto) */ 
      cust_id, cod_acct_no, od_amount, booking_date, rate, od_limt, maturity_date, cod_ccy currency,cod_prod product_code,
      cod_gl_ast_bal asset_gl, settlement_account
      from tmp_combine_negbal_wtod
      union all
    SELECT /*+ PARALLEL(auto) */ 
      cust_id, cod_acct_no, od_amount, booking_date, rate, od_limt, maturity_date, cod_ccy currency,cod_prod product_code,
      cod_gl_ast_bal asset_gl, settlement_account
      from tmp_combine_postvebal_wtod';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_stg_L2_pdl
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR PDL CONTRACT',
                   'CLR PDL CONTRACT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_pdl_loan';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_pdl_loan';
       v_sql := 'create table tmp_clr_pdl_loan as
       SELECT /*+ PARALLEL(auto) */ 
        cust_id,cod_acct_no,acy_curr_balance pdl_amount,cod_ccy,ac_open_date dat_acct_open,cod_prod,
     cod_gl_ast_bal,cod_acct_no cust_ac_no from tmp_clr_sttm_cust_acct_od where 
     cod_prod = ''080005''
         AND acy_curr_balance < 0
        AND auth_stat = ''A''
        AND record_stat = ''O''
        and account_type NOT IN (''Y'', ''N'')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_pdl_loan as
       SELECT /*+ PARALLEL(auto) */ 
        cust_id,cod_acct_no,acy_curr_balance pdl_amount,cod_ccy,ac_open_date dat_acct_open,cod_prod,
     cod_gl_ast_bal,cod_acct_no cust_ac_no from tmp_clr_sttm_cust_acct_od where 
     cod_prod = ''080005''
         AND acy_curr_balance < 0
        AND auth_stat = ''A''
        AND record_stat = ''O''
        and account_type NOT IN (''Y'', ''N'')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_stg_L2_consolidate_fcc
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR CONSOLIDATED FCC',
                   'CLR CONSOLIDATED FCC',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_fcc_combine';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_fcc_combine';
       v_sql := 'create table tmp_clr_fcc_combine as
       SELECT /*+ PARALLEL(auto) */ 
       ref_no,
                               user_ref_no,
                               remarks,
                               customer_name1,
                               product_code,
                               amount,
                               principal_outstanding_bal,
                               rate,
                               currency,
                               tenor,
                               cust_id,
                               dflt_settle_ac,
                               booking_date,
                               value_date,
                               maturity_date,
                               contract_status,
                               instrument_type,
                               asset_gl,
                               crms_code,
                               old_reference
                   from(
                   select
            ref_no, user_ref_no, remarks, customer_name1, product_code,
            amount_disbursed amount, balance PRINCIPAL_OUTSTANDING_BAL, to_number(RATE) RATE, currency, tenor, cust_id, dr_prod_ac DFLT_SETTLE_AC, book_date booking_date, value_date, maturity_date,
            account_status CONTRACT_STATUS, instrument_type, asset_gl, crms_code, old_reference       
            from tmp_clr_cltb_contract_
                 union all
            select
         REF_NO, CUST_REF_NO, REMARKS, CUST_NAME, PRODUCT_CODE, AMOUNT, PRINCIPAL_OUTSTANDING_BAL, to_number(RATE) RATE, CONTRACT_CCY,
         TENOR, CUST_ID, DFLT_SETTLE_AC, BOOK_DATE booking_date, VALUE_DATE, MATURITY_DATE, CONTRACT_STATUS, INSTRUMENT_TYPE, ASSET_GL,'' '' crms_code,'' '' old_reference
            from tmp_clr_lctb_into_fcc
                union all
            select
         REF_NO, USER_REF_NO, REMARKS, CUSTOMER_NAME1, PRODUCT_CODE, AMOUNT, PRINCIPAL_OUTSTANDING_BAL, to_number(RATE) RATE, CURRENCY, TENOR,
         CUST_ID, DFLT_SETTLE_AC, BOOKING_DATE, VALUE_DATE, MATURITY_DATE, CONTRACT_STATUS, INSTRUMENT_TYPE, ASSET_GL, CRMS_CODE,'' '' old_reference
            from tmp_clr_ldtb_into_fcc)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_fcc_combine as
       SELECT /*+ PARALLEL(auto) */ 
       ref_no,
                               user_ref_no,
                               remarks,
                               customer_name1,
                               product_code,
                               amount,
                               principal_outstanding_bal,
                               rate,
                               currency,
                               tenor,
                               cust_id,
                               dflt_settle_ac,
                               booking_date,
                               value_date,
                               maturity_date,
                               contract_status,
                               instrument_type,
                               asset_gl,
                               crms_code,
                               old_reference
                   from(
                   select
            ref_no, user_ref_no, remarks, customer_name1, product_code,
            amount_disbursed amount, balance PRINCIPAL_OUTSTANDING_BAL, to_number(RATE) RATE, currency, tenor, cust_id, dr_prod_ac DFLT_SETTLE_AC, book_date booking_date, value_date, maturity_date,
            account_status CONTRACT_STATUS, instrument_type, asset_gl, crms_code, old_reference       
            from tmp_clr_cltb_contract_
                 union all
            select
         REF_NO, CUST_REF_NO, REMARKS, CUST_NAME, PRODUCT_CODE, AMOUNT, PRINCIPAL_OUTSTANDING_BAL,to_number(RATE) RATE, CONTRACT_CCY,
         TENOR, CUST_ID, DFLT_SETTLE_AC, BOOK_DATE booking_date, VALUE_DATE, MATURITY_DATE, CONTRACT_STATUS, INSTRUMENT_TYPE, ASSET_GL,'' '' crms_code,'' '' old_reference
            from tmp_clr_lctb_into_fcc
           union all
            select
         REF_NO, USER_REF_NO, REMARKS, CUSTOMER_NAME1, PRODUCT_CODE, AMOUNT, PRINCIPAL_OUTSTANDING_BAL, to_number(RATE) RATE, CURRENCY, TENOR,
         CUST_ID, DFLT_SETTLE_AC, BOOKING_DATE, VALUE_DATE, MATURITY_DATE, CONTRACT_STATUS, INSTRUMENT_TYPE, ASSET_GL, CRMS_CODE,'' '' old_reference
            from tmp_clr_ldtb_into_fcc)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_stg_combine_balance
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'COMBINE CLR BALANCE',
                   'COMBINE CLR BALANCE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      
       ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (004,
                   'COMBINE CLR BALANCE break 1',
                   'COMBINE CLR BALANCE break 1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_combine_balance';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_combine_balance';
    v_sql := 'create table tmp_clr_combine_balance as
   SELECT /*+ PARALLEL(auto) */
    cust_id, ref_no, product_code, currency, booking_date, loan_amount, principal_outstanding_bal, rate, tenor,
    maturity_date, value_date, contract_status, source, limit, settlement_account, asset_gl, crms_code
   from(select cust_id,ref_no,product_code,currency,booking_date,amount loan_amount,principal_outstanding_bal,rate,tenor,maturity_date,
   nvl(value_date,booking_date) value_date,contract_status,''FCUBS'' source,amount limit,dflt_settle_ac settlement_account,asset_gl,crms_code
    from tmp_clr_fcc_combine where principal_outstanding_bal>0
   union all
    select cust_id,cod_acct_no ref_no,product_code,currency,booking_date,od_limt loan_amount,od_amount principal_outstanding_bal,
    rate,to_number(trim('' '')) tenor,maturity_date,booking_date value_date,''A'' contract_status,''OD'' source,od_limt limit,cod_acct_no settlement_account,
    asset_gl,'' '' crms_code from tmp_combine_clr_allod
   union all
   select to_char (cust_id) cust_id,trim (cod_acct_no) ref_no,cod_prod product_code,cod_ccy currency,dat_acct_open booking_date,pdl_amount loan_amount,pdl_amount principal_outstanding_bal,
   0 rate,to_number(trim('' '')) tenor,null maturity_date,dat_acct_open booking_date,''A'' contract_status,''PDL'' source,0 limit,trim (cod_acct_no) settlement_account,
   cod_gl_ast_bal asset_gl,'' '' crms_code from tmp_clr_pdl_loan
   union all
  select trim(cust_id) cust_id,lc_ref ref_no,''CULC'' product_code,currency,booking_date,amount loan_amount,to_number(total_liability_amt) principal_outstanding_bal,0 rate,to_number(trim('' '')) tenor,
   maturity_date,booking_date value_date,''A'' contract_status,''TI'' source,0 limit,'' '' settlement_account,'' '' asset_gl,'' '' crms_code 
  from tmp_clr_unconfirm_lc where total_liability_amt >0)';
  execute immediate v_sql;
  v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_combine_balance as
    SELECT /*+ PARALLEL(auto) */
     cust_id, ref_no, product_code, currency, booking_date, loan_amount, principal_outstanding_bal, rate, tenor,
    maturity_date, value_date, contract_status, source, limit, settlement_account, asset_gl, crms_code
   from(select cust_id,ref_no,product_code,currency,booking_date,amount loan_amount,principal_outstanding_bal,rate,tenor,maturity_date,
      nvl(value_date, booking_date) value_date,contract_status,''FCUBS'' source,amount limit,dflt_settle_ac settlement_account,asset_gl,crms_code
   from tmp_clr_fcc_combine where principal_outstanding_bal>0
   union all
    select cust_id,cod_acct_no ref_no,product_code,currency,booking_date,od_limt loan_amount,od_amount principal_outstanding_bal,
    rate,to_number(trim('' '')) tenor,maturity_date,booking_date value_date,''A'' contract_status,''OD'' source,od_limt limit,cod_acct_no settlement_account,
    asset_gl,'' '' crms_code from tmp_combine_clr_allod
   union all
   select to_char (cust_id) cust_id,trim (cod_acct_no) ref_no,cod_prod product_code,cod_ccy currency,dat_acct_open booking_date,pdl_amount loan_amount,pdl_amount principal_outstanding_bal,
   0 rate,to_number(trim('' '')) tenor,null maturity_date,dat_acct_open booking_date,''A'' contract_status,''PDL'' source,0 limit,trim (cod_acct_no) settlement_account,
   cod_gl_ast_bal asset_gl,'' '' crms_code from tmp_clr_pdl_loan
   union all
  select trim(cust_id) cust_id,lc_ref ref_no,''CULC'' product_code,currency,booking_date,amount loan_amount,to_number(total_liability_amt) principal_outstanding_bal,0 rate,to_number(trim('' '')) tenor,
   maturity_date,booking_date value_date,''A'' contract_status,''TI'' source,0 limit,'' '' settlement_account,'' '' asset_gl,'' '' crms_code 
  from tmp_clr_unconfirm_lc where total_liability_amt >0)';
  execute immediate v_sql;
  v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     
    ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (005,
                   'COMBINE CLR BALANCE break 2',
                   'COMBINE CLR BALANCE break 2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
     
     
   begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_combine_balancee';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_combine_balancee';
    v_sql := 'create table tmp_clr_combine_balancee as
    SELECT /*+ PARALLEL(auto) */
    trim(lpad(a.cust_id,9,0))cust_id,a.ref_no,a.product_code,
        currency,a.booking_date,abs(loan_amount) loan_amount_tcy,abs (a.principal_outstanding_bal) principal_outstanding_bal_tcy,
        mid_rate * abs(a.loan_amount) loan_amount_lcy,mid_rate * abs (a.principal_outstanding_bal) principal_outstanding_bal_lcy,
        a.rate,a.tenor,a.maturity_date,a.value_date,a.contract_status,trunc(sysdate) process_date,local_branch branch_code,
        d.last_credit_date,d.last_credit_amount,a.limit,a.source,a.settlement_account,asset_gl,cbn_sector, cbn_sub_sector, obligor_risk_rating, ngaap_classification,
        dir_name1 nam_director1,dir_name2 nam_director2,dir_name3 nam_director3,dir_name4 nam_director4,nvl(a.crms_code,g.crms_code) crms_code,
        h.mis_code
         from tmp_clr_combine_balance a,tmp_clr_ccy_rate b,tmp_clr_cust_dirname_sort c,tmp_clr_last_trxndate d, tmp_clr_sttm_cust_info e,stglive.usr_clr_obie_extra f
         ,stglive.obiee_total g, tmp_clr_acct_snapshot h ---odsrev.drv_account_snapshot_details h
  where a.ref_no=f.ref_no(+)
    and a.ref_no=g.ref_no(+)
 and a.currency=b.ccy1(+)
 and lpad(a.cust_id, 9, 0)=c.customer_no(+)
 and lpad(a.cust_id, 9, 0)=e.customer_no(+)
 and trim(a.settlement_account)=d.account_number(+)
and trim(a.settlement_account)=h.account_number(+)';
  execute immediate v_sql;
  v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_combine_balancee as
    SELECT /*+ PARALLEL(auto) */
    trim(lpad(a.cust_id,9,0))cust_id,a.ref_no,a.product_code,
        currency,a.booking_date,abs(loan_amount) loan_amount_tcy,abs (a.principal_outstanding_bal) principal_outstanding_bal_tcy,
        mid_rate * abs(a.loan_amount) loan_amount_lcy,mid_rate * abs (a.principal_outstanding_bal) principal_outstanding_bal_lcy,
        a.rate,a.tenor,a.maturity_date,a.value_date,a.contract_status,trunc(sysdate) process_date,local_branch branch_code,
        d.last_credit_date,d.last_credit_amount,a.limit,a.source,a.settlement_account,asset_gl,cbn_sector, cbn_sub_sector, obligor_risk_rating, ngaap_classification,
        dir_name1 nam_director1,dir_name2 nam_director2,dir_name3 nam_director3,dir_name4 nam_director4,nvl(a.crms_code,g.crms_code) crms_code,
        h.mis_code
         from tmp_clr_combine_balance a,tmp_clr_ccy_rate b,tmp_clr_cust_dirname_sort c,tmp_clr_last_trxndate d, tmp_clr_sttm_cust_info e,stglive.usr_clr_obie_extra f
         ,stglive.obiee_total g, tmp_clr_acct_snapshot h ---odsrev.drv_account_snapshot_details h
  where a.ref_no=f.ref_no(+)
    and a.ref_no=g.ref_no(+)
 and a.currency=b.ccy1(+)
 and lpad(a.cust_id, 9, 0)=c.customer_no(+)
 and lpad(a.cust_id, 9, 0)=e.customer_no(+)
 and trim(a.settlement_account)=d.account_number(+)
and trim(a.settlement_account)=h.account_number(+)';
  execute immediate v_sql;
  v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     
     ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (006,
                   'COMBINE CLR BALANCE break 3',
                   'COMBINE CLR BALANCE break 3',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
     
   
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_combine_balanceee';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
    if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_combine_balanceee';
    v_sql := 'create table tmp_clr_combine_balanceee as
    SELECT /*+ PARALLEL(auto) */
    a.cust_id,a.ref_no,a.product_code, a.currency,a.booking_date,a.loan_amount_tcy,a.principal_outstanding_bal_tcy,
    loan_amount_lcy, principal_outstanding_bal_lcy, nvl(rate,0) rate,trim(tenor) tenor, maturity_date, value_date,
    contract_status, process_date, a.branch_code, last_credit_date, last_credit_amount, limit,
    a.source, settlement_account, asset_gl, nvl(a.cbn_sector,e.cbn_sector) cbn_sector, nvl(a.cbn_sub_sector,e.cbn_sub_sector) cbn_sub_sector,
    nvl(a.obligor_risk_rating,e.obligor_risk_rating) obligor_risk_rating, nvl(a.ngaap_classification,e.ngaap_classification) ngaap_classification,
    nam_director1, nam_director2, nam_director3, nam_director4, crms_code,
    a.mis_code account_officer_code,team_code,accountofficer_name,
    a.mis_code mis_code_settlement,
    team_name,branch_name,
        group_code,
             group_name,
             region_code,
             region_name,
             division_code,
             division_name,
             fcubs_region,fcubs_risk,fcubs_sector,fcubs_sub_sector,
    case when a.currency=''NGN'' then ''LCY'' else ''FCY'' end dashboard_currency
 from tmp_clr_combine_balancee a,odsrev.mis_details c,tmp_clr_sector_descr d,stglive.usrclr3 e
   where a.cust_id=d.CUSTOMER_NO(+)
   and   a.cust_id=LPAD(e.cust_id(+),9,0)
   and a.mis_code=c.mis_code(+)
   and a.ref_no not in (''099APRV121430002'',''099APRV131710004'')';
  execute immediate v_sql;
  v_rows_processed := SQL%ROWCOUNT;
     else
   v_sql := 'create table tmp_clr_combine_balanceee as
    SELECT /*+ PARALLEL(auto) */
    a.cust_id,a.ref_no,a.product_code, a.currency,a.booking_date,a.loan_amount_tcy,a.principal_outstanding_bal_tcy,
    loan_amount_lcy, principal_outstanding_bal_lcy, nvl(rate,0) rate,trim(tenor) tenor, maturity_date, value_date,
    contract_status, process_date, a.branch_code, last_credit_date, last_credit_amount, limit,
    a.source, settlement_account, asset_gl, nvl(a.cbn_sector,e.cbn_sector) cbn_sector, nvl(a.cbn_sub_sector,e.cbn_sub_sector) cbn_sub_sector,
    nvl(a.obligor_risk_rating,e.obligor_risk_rating) obligor_risk_rating, nvl(a.ngaap_classification,e.ngaap_classification) ngaap_classification,
    nam_director1, nam_director2, nam_director3, nam_director4, crms_code,
    a.mis_code account_officer_code,team_code,accountofficer_name,
    a.mis_code mis_code_settlement,
    team_name,branch_name,
        group_code,
             group_name,
             region_code,
             region_name,
             division_code,
             division_name,
             fcubs_region,fcubs_risk,fcubs_sector,fcubs_sub_sector,
    case when a.currency=''NGN'' then ''LCY'' else ''FCY'' end dashboard_currency
 from tmp_clr_combine_balancee a,odsrev.mis_details c,tmp_clr_sector_descr d,stglive.usrclr3 e
   where a.cust_id=d.CUSTOMER_NO(+)
   and   a.cust_id=LPAD(e.cust_id(+),9,0)
   and a.mis_code=c.mis_code(+)
   and a.ref_no not in (''099APRV121430002'',''099APRV131710004'')';
  execute immediate v_sql;
  v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
PROCEDURE prc_1week_group
   AS
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := TRUNC (SYSDATE);
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      vmin_date          date;
      vmax_date          date;
      v_edge             date;
      vv_sql            varchar2(20000);
   BEGIN
      SELECT SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
      
      INSERT INTO optimiz_clr_LOG (process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   '1WEEK DAYS GROUP',
                   '1WEEK DAYS GROUP',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      vmin_date := trunc(sysdate)-8;
      vmax_date := trunc(sysdate)-1;
      
    execute immediate 'truncate table tmp_1week_collections';
        
    while vmin_date <= vmax_date
      loop
      --v_edge :=trunc(vmin_date+29);
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_1week_group';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
     if(tab_cnt)>=1 Then
        execute immediate 'drop table tmp_1week_group';
        v_sql := 'create table tmp_1week_group as
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge from(
        select a.settlement_account account_number, sum(total_daily_credit) total_daily_credit,sum(fcy_daily_credit) fcy_daily_credit,
        sum(lcy_daily_credit) lcy_daily_credit,sum(penal_charge) penal_charge
        from tmp_clr_combine_balanceee a, odsrev.daily_tranx_volume_ads partition (P' || to_char(vmin_date,'yyyymmdd') ||') b
        where trim(a.settlement_account) = trim(b.account_number)
        group by a.settlement_account
        union all
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge from tmp_1week_collections)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     else 
        v_sql := 'create table tmp_1week_group as
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge from(
        select a.settlement_account account_number, sum(total_daily_credit) total_daily_credit,sum(fcy_daily_credit) fcy_daily_credit,
        sum(lcy_daily_credit) lcy_daily_credit,sum(penal_charge) penal_charge
        from tmp_clr_combine_balanceee a, odsrev.daily_tranx_volume_ads partition (P' || to_char(vmin_date,'yyyymmdd') ||') b
        where trim(a.settlement_account) = trim(b.account_number)
        group by a.settlement_account
        union all
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge from tmp_1week_collections)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     execute immediate 'truncate table tmp_1week_collections';
     
     vv_sql:='select account_number, sum(total_daily_credit) total_daily_credit,
     sum(fcy_daily_credit) fcy_daily_credit,sum(lcy_daily_credit) lcy_daily_credit,sum(penal_charge) penal_charge
     from tmp_1week_group group by account_number';
     
     execute immediate 'insert into tmp_1week_collections(account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge)'|| vv_sql;
     commit;
     vmin_date := vmin_date + 1;
   end loop;
    
     UPDATE optimiz_clr_LOG
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
      EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
   END;
PROCEDURE prc_30days_group
   AS
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := TRUNC (SYSDATE);
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      vmin_date          date;
      vmax_date          date;
      v_edge             date;
      vv_sql            varchar2(20000);
   BEGIN
      SELECT SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
      v_date := trunc(sysdate);
      INSERT INTO optimiz_clr_LOG (process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   '30 DAYS GROUP',
                   '30 DAYS GROUP',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      vmin_date := trunc(sysdate)-31;
      vmax_date := trunc(sysdate)-1;
      
    execute immediate 'truncate table tmp_1mth_collections';
        
   while vmin_date <= vmax_date
   loop
   v_edge :=trunc(vmin_date + 4);
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_30days_group';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
     end;
      
     if(tab_cnt)>=1 Then
        execute immediate 'drop table tmp_30days_group';
       v_sql := 'create table tmp_30days_group as
       select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from(
        select settlement_account account_number, total_daily_credit,fcy_daily_credit,
        lcy_daily_credit,penal_charge,debitliq_interest_debit debit_interest
        from tmp_clr_combine_balanceee a, odsrev.daily_tranx_volume_ads b where b.reference_date between '''||vmin_date||''' and '''||v_edge||'''
        and trim(a.settlement_account) = trim(b.account_number)
       union all
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from tmp_1mth_collections)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     else 
       v_sql := 'create table tmp_30days_group as
       select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from(
        select settlement_account account_number, total_daily_credit,fcy_daily_credit,
        lcy_daily_credit,penal_charge,debitliq_interest_debit debit_interest
        from tmp_clr_combine_balanceee a, odsrev.daily_tranx_volume_ads b where b.reference_date between '''||vmin_date||''' and '''||v_edge||'''
        and trim(a.settlement_account) = trim(b.account_number)
       union all
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from tmp_1mth_collections)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     execute immediate 'truncate table tmp_1mth_collections';
     
    vv_sql:='select account_number, sum(total_daily_credit) total_daily_credit,
     sum(fcy_daily_credit) fcy_daily_credit,sum(lcy_daily_credit) lcy_daily_credit,sum(penal_charge) penal_charge,
     sum(debit_interest) debit_interest
     from tmp_30days_group group by account_number';
     
     execute immediate 'insert into tmp_1mth_collections(account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest)'|| vv_sql;
     commit;
    vmin_date := v_edge + 1;
  end loop;
    
    UPDATE optimiz_clr_LOG
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
      EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
   END;
   PROCEDURE prc_60days_group
   AS
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := TRUNC (SYSDATE);
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      vmin_date          date;
      vmax_date          date;
      v_edge             date;
      vv_sql            varchar2(20000);
   BEGIN
      SELECT SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
      v_date := trunc(sysdate);
      INSERT INTO optimiz_clr_LOG (process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   '60 DAYS GROUP',
                   '60 DAYS GROUP',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      vmin_date := trunc(sysdate)-62;
      vmax_date := trunc(sysdate)-32;
      
  execute immediate 'truncate table tmp_2mth_collections';
        
  while vmin_date <= vmax_date
   loop
    v_edge :=trunc(vmin_date + 4);
     begin
        select count(*) into tab_cnt from sys.all_tables where  owner = 'STGLIVE' and lower(table_name)='tmp_60days_group';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
     end;
      
     if(tab_cnt)>=1 Then
        execute immediate 'drop table tmp_60days_group';
       v_sql := 'create table tmp_60days_group as
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from(
        select settlement_account account_number, total_daily_credit,fcy_daily_credit,
        lcy_daily_credit,penal_charge,debitliq_interest_debit debit_interest
        from tmp_clr_combine_balanceee a, odsrev.daily_tranx_volume_ads b where b.reference_date between '''||vmin_date||''' and '''||v_edge||'''
        and trim(a.settlement_account) = trim(b.account_number)
       union all
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from tmp_2mth_collections)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     else 
         v_sql := 'create table tmp_60days_group as
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from(
        select settlement_account account_number, total_daily_credit,fcy_daily_credit,
        lcy_daily_credit,penal_charge,debitliq_interest_debit debit_interest
        from tmp_clr_combine_balanceee a, odsrev.daily_tranx_volume_ads b where b.reference_date between '''||vmin_date||''' and '''||v_edge||'''
        and trim(a.settlement_account) = trim(b.account_number)
       union all
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from tmp_2mth_collections)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     execute immediate 'truncate table tmp_2mth_collections';
     
     vv_sql:='select account_number, sum(total_daily_credit) total_daily_credit,
     sum(fcy_daily_credit) fcy_daily_credit,sum(lcy_daily_credit) lcy_daily_credit,sum(penal_charge) penal_charge,
     sum(debit_interest) debit_interest
     from tmp_60days_group group by account_number';
     
     execute immediate 'insert into tmp_2mth_collections(account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest)'|| vv_sql;
     commit;
     vmin_date := v_edge + 1;
     
   end loop;
    
     
    UPDATE optimiz_clr_LOG
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
      EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
   END;
   PROCEDURE prc_90days_group
   AS
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := TRUNC (SYSDATE);
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      vmin_date          date;
      vmax_date          date;
      v_edge             date;
      vv_sql            varchar2(20000);
   BEGIN
      SELECT SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
      v_date := trunc(sysdate);
      INSERT INTO optimiz_clr_LOG (process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   '90days_group',
                   '90days_group',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      vmin_date := trunc(sysdate)-91;
      vmax_date := trunc(sysdate)-61;
      
    execute immediate 'truncate table tmp_3mth_collections';
        
    while vmin_date <= vmax_date
      loop
      v_edge :=trunc(vmin_date + 4);
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_90days_group';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
        execute immediate 'drop table tmp_90days_group';
        v_sql := 'create table tmp_90days_group as
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from(
       select settlement_account account_number, total_daily_credit,fcy_daily_credit,
        lcy_daily_credit,penal_charge,debitliq_interest_debit debit_interest
        from tmp_clr_combine_balanceee a, odsrev.daily_tranx_volume_ads b where b.reference_date between '''||vmin_date||''' and '''||v_edge||'''
        and trim(a.settlement_account) = trim(b.account_number)
       union all
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from tmp_3mth_collections)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
       else 
        v_sql := 'create table tmp_90days_group as
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from(
       select settlement_account account_number, total_daily_credit,fcy_daily_credit,
        lcy_daily_credit,penal_charge,debitliq_interest_debit debit_interest
        from tmp_clr_combine_balanceee a, odsrev.daily_tranx_volume_ads b where b.reference_date between '''||vmin_date||''' and '''||v_edge||'''
        and trim(a.settlement_account) = trim(b.account_number)
       union all
        select account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest from tmp_3mth_collections)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
       end if;
     
         execute immediate 'truncate table tmp_3mth_collections';
         
         vv_sql:='select account_number, sum(total_daily_credit) total_daily_credit,
         sum(fcy_daily_credit) fcy_daily_credit,sum(lcy_daily_credit) lcy_daily_credit,sum(penal_charge) penal_charge,
         sum(debit_interest) debit_interest
         from tmp_90days_group group by account_number';
         
         execute immediate 'insert into tmp_3mth_collections(account_number,total_daily_credit,fcy_daily_credit,lcy_daily_credit,penal_charge,debit_interest)'|| vv_sql;
         commit;
       vmin_date := v_edge + 1;
    end loop;
    
     
      UPDATE optimiz_clr_LOG
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
      EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
   END;
   PROCEDURE prc_consolidate_collectn
   AS
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := TRUNC (SYSDATE);
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      vmin_date          date;
      vmax_date          date;
      v_edge             date;
      vv_sql            varchar2(20000);
   BEGIN
      SELECT SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
      
      INSERT INTO optimiz_clr_LOG (process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'COLLECTION CONSOLIDATED GRP',
                   'COLLECTION CONSOLIDATED GRP',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_collection_driver';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
     if(tab_cnt)>=1 Then
        execute immediate 'drop table tmp_collection_driver';
        v_sql := 'create table tmp_collection_driver as
        select account_number from tmp_3mth_collections
          union
          select account_number from tmp_2mth_collections
          union
          select account_number from tmp_2mth_collections
          union
          select account_number from tmp_1week_collections';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     else 
        v_sql := 'create table tmp_collection_driver as
        select account_number from tmp_3mth_collections
          union
          select account_number from tmp_2mth_collections
          union
          select account_number from tmp_2mth_collections
          union
          select account_number from tmp_1week_collections';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     end if;
      
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_consol_collection_final';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
     if(tab_cnt)>=1 Then
        execute immediate 'drop table tmp_consol_collection_final';
        v_sql := 'create table tmp_consol_collection_final as
        select a.account_number,
            (b.total_daily_credit + c.total_daily_credit + d.total_daily_credit) total_credit_3mth,
            (b.fcy_daily_credit + c.fcy_daily_credit + d.fcy_daily_credit) fcy_credit_3mth,
            (b.lcy_daily_credit + c.lcy_daily_credit + d.lcy_daily_credit) lcy_credit_3mth,
            (b.penal_charge + c.penal_charge + d.penal_charge) penal_charge_3mth,
            (b.debit_interest + c.debit_interest + d.debit_interest) debit_interest_3mth,
            (d.total_daily_credit) total_credit_1mth,
            (d.fcy_daily_credit) fcy_credit_1mth,
            (d.lcy_daily_credit) lcy_credit_1mth,
            (d.penal_charge) penal_charge_1mth,
            (d.debit_interest) debit_interest_1mth,
            nvl(e.total_daily_credit,0) total_credit_1wk,
            nvl(e.fcy_daily_credit,0) fcy_credit_1wk,
            nvl(e.lcy_daily_credit,0) lcy_credit_1wk,
            nvl(e.penal_charge,0) penal_charge_1wk
             from tmp_collection_driver a,tmp_3mth_collections b,tmp_2mth_collections c,tmp_1mth_collections d,tmp_1week_collections e
             where a.account_number=b.account_number(+)
             and   a.account_number=c.account_number(+)
             and   a.account_number=d.account_number(+)
             and   a.account_number=e.account_number(+)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     else 
       v_sql := 'create table tmp_consol_collection_final as
        select a.account_number,
            (b.total_daily_credit + c.total_daily_credit + d.total_daily_credit) total_credit_3mth,
            (b.fcy_daily_credit + c.fcy_daily_credit + d.fcy_daily_credit) fcy_credit_3mth,
            (b.lcy_daily_credit + c.lcy_daily_credit + d.lcy_daily_credit) lcy_credit_3mth,
            (b.penal_charge + c.penal_charge + d.penal_charge) penal_charge_3mth,
            (b.debit_interest + c.debit_interest + d.debit_interest) debit_interest_3mth,
            (d.total_daily_credit) total_credit_1mth,
            (d.fcy_daily_credit) fcy_credit_1mth,
            (d.lcy_daily_credit) lcy_credit_1mth,
            (d.penal_charge) penal_charge_1mth,
            (d.debit_interest) debit_interest_1mth,
            nvl(e.total_daily_credit,0) total_credit_1wk,
            nvl(e.fcy_daily_credit,0) fcy_credit_1wk,
            nvl(e.lcy_daily_credit,0) lcy_credit_1wk,
            nvl(e.penal_charge,0) penal_charge_1wk
             from tmp_collection_driver a,tmp_3mth_collections b,tmp_2mth_collections c,tmp_1mth_collections d,tmp_1week_collections e
             where a.account_number=b.account_number(+)
             and   a.account_number=c.account_number(+)
             and   a.account_number=d.account_number(+)
             and   a.account_number=e.account_number(+)';
        execute immediate v_sql;
        v_rows_processed := SQL%ROWCOUNT;
     end if;
     
    UPDATE optimiz_clr_LOG
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
      EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
   END;
 procedure prc_cust_director_list
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CUSTOMER DIRECTOR LIST',
                   'CUSTOMER DIRECTOR LIST',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cust_director';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
     if(tab_cnt)>=1 Then
     execute immediate 'drop table tmp_clr_cust_director';
     v_sql := 'create table tmp_clr_cust_director as
       SELECT /*+ PARALLEL(auto) */ 
     customer_no,director_name,rank() over(partition by customer_no order by
     director_name, customer_no, slno) rnk from stglive.src_sttm_corp_directors';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cust_director as
       SELECT /*+ PARALLEL(auto) */ 
     customer_no,director_name,rank() over(partition by customer_no order by
     director_name, customer_no, slno) rnk from stglive.src_sttm_corp_directors';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
        begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cust_dirname_sort';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
     if(tab_cnt)>=1 Then
     execute immediate 'drop table tmp_clr_cust_dirname_sort';
     v_sql := 'create table tmp_clr_cust_dirname_sort as
       SELECT /*+ PARALLEL(auto) */ 
     customer_no,
     min(case when rnk=1 then director_name end) dir_name1,
     min(case when rnk=2 then director_name end) dir_name2,
     min(case when rnk=3 then director_name end) dir_name3,
     min(case when rnk=4 then director_name end) dir_name4
     from tmp_clr_cust_director
    group by customer_no';
    execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cust_dirname_sort as
    SELECT /*+ PARALLEL(auto) */ 
     customer_no,
     min(case when rnk=1 then director_name end) dir_name1,
     min(case when rnk=2 then director_name end) dir_name2,
     min(case when rnk=3 then director_name end) dir_name3,
     min(case when rnk=4 then director_name end) dir_name4
     from tmp_clr_cust_director group by customer_no';
    execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_cust_lasttrnx_date
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CUST LAST TRANX DATE',
                   'CUST LAST TRANX DATE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      commit;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_last_trxndate';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_last_trxndate';
       v_sql := 'create table tmp_clr_last_trxndate as
       select /*+ parallel(auto) */ 
       account_number,max(last_credit_date) last_credit_date,sum(last_credit_amount) last_credit_amount
       from odsrev.drv_account_snapshot_details where account_class
       NOT IN (''070008'',
                        ''090001'',
                  ''070006'',
                  ''050029'',
                  ''090002'')
         AND account_type IN (''S'', ''U'')
         and last_credit_amount>0
         group by account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_last_trxndate as
       select /*+ parallel(auto) */ 
       account_number,max(last_credit_date) last_credit_date,sum(last_credit_amount)  last_credit_amount
       from odsrev.drv_account_snapshot_details where account_class
       NOT IN (''070008'',
               ''090001'',
               ''070006'',
               ''050029'',
               ''090002'')
         AND account_type IN (''S'', ''U'')
         and last_credit_amount>0
         group by account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_ccy_rate_extract
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CCY RATE EXTRACT',
                   'CCY RATE EXTRACT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_ccy_rate';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_ccy_rate';
       v_sql := 'create table tmp_clr_ccy_rate as
       SELECT /*+ PARALLEL(auto) */ 
        ccy1, mid_rate
        from cytm_rates@loc_fcubslive
          where branch_code = ''099''
            and rate_type = ''STANDARD''
            and ccy2 = ''NGN''
      union all
      select ''NGN'', 1 from dual
      union all
     select ''FRF'', 0 from dual
     union all
    select ''NLG'', 0.0090 from dual
    union all
    select ''ITL'', 8.86 from dual
    union all
    select ''DEM'', 0.0089 from dual';
   execute immediate v_sql;
   v_rows_processed := SQL%ROWCOUNT;
   else
   v_sql := 'create table tmp_clr_ccy_rate as
       SELECT /*+ PARALLEL(auto) */ 
        ccy1, mid_rate
        from cytm_rates@loc_fcubslive
          where branch_code = ''099''
            and rate_type = ''STANDARD''
            and ccy2 = ''NGN''
      union all
      select ''NGN'', 1 from dual
      union all
     select ''FRF'', 0 from dual
     union all
    select ''NLG'', 0.0090 from dual
    union all
    select ''ITL'', 8.86 from dual
    union all
    select ''DEM'', 0.0089 from dual';
   execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_sector_description
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR CLTB FCC',
                   'CLR CLTB FCC',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_sector_descr';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_sector_descr';
     v_sql := 'create table tmp_clr_sector_descr as
      SELECT /*+ PARALLEL(4) */
      a.customer_no,b.region_desc fcubs_region,c.risk_desc fcubs_risk,d.sector_desc fcubs_sector,e.sub_sector_desc fcubs_sub_sector
    from sttm_exposure_details@loc_fcubslive a,sttm_region_details@loc_fcubslive b,sttm_risk_details@loc_fcubslive c,
     sttm_sector_details@loc_fcubslive d,
     sttm_sub_sector_details@loc_fcubslive e
    where a.region_code=b.region_code(+)
        and   a.risk_code = c.risk_code(+)
        and   a.sector_code = d.sector_code(+)
        and   a.sub_sector_code = e.sub_sector_code(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_sector_descr as
      SELECT /*+ PARALLEL(4) */
      a.customer_no,b.region_desc fcubs_region,c.risk_desc fcubs_risk,d.sector_desc fcubs_sector,e.sub_sector_desc fcubs_sub_sector
    from sttm_exposure_details@loc_fcubslive a,sttm_region_details@loc_fcubslive b,sttm_risk_details@loc_fcubslive c,
     sttm_sector_details@loc_fcubslive d,
     sttm_sub_sector_details@loc_fcubslive e
    where a.region_code=b.region_code(+)
        and   a.risk_code = c.risk_code(+)
        and   a.sector_code = d.sector_code(+)
        and   a.sub_sector_code = e.sub_sector_code(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
   
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_getm_collateral_liab
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'GETM COLLATERAL INFO',
                   'GETM COLLATERAL INFO',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_getm_collateralll';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_getm_collateralll';
       v_sql := 'create table tmp_clr_getm_collateralll as
       SELECT /*+ PARALLEL(auto) */ 
        customer_no,
        collateral_value,
        collateral_code,collateral_currency,collateral_type,start_date
                      from (select customer_no, collateral_value,collateral_code,COLLATERAL_CURRENCY,COLLATERAL_TYPE,START_DATE
                              FROM stglive.src_getm_collat a,
                                   stglive.src_getm_liab_cust b
                             WHERE     a.liab_id = b.liab_id
                                   AND a.record_stat = ''O''
                                   AND category_id NOT IN(''1401'', ''1402''))';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_getm_collateralll as
       SELECT /*+ PARALLEL(auto) */ 
        customer_no,
        collateral_value,
        collateral_code,collateral_currency,collateral_type,start_date
           from (select customer_no, collateral_value,collateral_code,collateral_currency,collateral_type,start_date
                      FROM stglive.src_getm_collat a,
                      stglive.src_getm_liab_cust b
                      WHERE     a.liab_id = b.liab_id
                      AND a.record_stat = ''O''
                      AND category_id NOT IN(''1401'', ''1402''))';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_getm_collaterall';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_getm_collaterall';
       v_sql := 'create table tmp_clr_getm_collaterall as
       SELECT /*+ PARALLEL(auto) */ 
        customer_no,collateral_value,collateral_code,collateral_type,collateral_currency
        from(
        select customer_no,collateral_value,collateral_code,collateral_type,collateral_currency,
       start_date,rank() over(partition by customer_no order by start_date desc) rnk from tmp_clr_getm_collateralll
        )
        where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else 
   v_sql := 'create table tmp_clr_getm_collaterall as
       SELECT /*+ PARALLEL(auto) */ 
        customer_no,collateral_value,collateral_code,collateral_type,collateral_currency
        from(
        select customer_no,collateral_value,collateral_code,collateral_type,collateral_currency,
       start_date,rank() over(partition by customer_no order by start_date desc) rnk from tmp_clr_getm_collateralll
        )
        where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_getm_collateral';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_getm_collateral';
       v_sql := 'create table tmp_clr_getm_collateral as
       SELECT /*+ PARALLEL(auto) */ 
        customer_no,collateral_value,collateral_code,collateral_type
        from(
        select customer_no,sum(collateral_value) collateral_value,min(collateral_code) collateral_code,collateral_currency,collateral_type 
     from tmp_clr_getm_collaterall group by customer_no,collateral_currency,collateral_type)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_getm_collateral as
       SELECT /*+ PARALLEL(auto) */ 
        customer_no,collateral_value,collateral_code,collateral_type
        from(
        select customer_no,sum(collateral_value) collateral_value,min(collateral_code) collateral_code,collateral_currency,collateral_type 
     from tmp_clr_getm_collaterall group by customer_no,collateral_currency,collateral_type)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_cltb_acct_link_dtls
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLTB COLLLINK DTLS',
                   'CLTB COLLLINK DTLS',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_colllink_dtls';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cltb_colllink_dtls';
       v_sql := 'create table tmp_clr_cltb_colllink_dtls as
       SELECT /*+ PARALLEL(auto) */ 
       account_number,linked_amount,linked_reference_no
       from stglive.src_cltb_acc_coll_link_dtls';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cltb_colllink_dtls as
       SELECT /*+ PARALLEL(auto) */ 
       account_number,linked_amount,linked_reference_no
       from stglive.src_cltb_acc_coll_link_dtls';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_d_consolidate_report
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     
     select in_date into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR CONSOLIDATE D-REPORT',
                   'CLR CONSOLIDATE D-REPORT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      ---TEST
      ---------------------------
      execute immediate 'truncate table tmp_datee';commit;
      insert into tmp_datee
      select v_date from dual;commit;
--       begin
--        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_datee';
--        EXCEPTION
--        WHEN NO_DATA_FOUND THEN
--            tab_cnt:=0;
--      end;
--      
--       if(tab_cnt)>=1 Then
--       execute immediate 'drop table tmp_datee';
--       v_sql := 'create table tmp_datee as
--       select cust_id,cbn_sector,cbn_sub_sector,cbn_sector_adjusted,obligor_risk_rating,pwc_classification,cbn_classification
--        from(
--        select cust_id,cbn_sector,cbn_sub_sector,cbn_sector_adjusted,obligor_risk_rating,pwc_classification,cbn_classification,
--        row_number() over(partition by cust_id order by rownum desc) rnk
--       from riskassetreport.usr_clr_obie_extra)
--       where rnk=1';
--     execute immediate v_sql;
--     v_rows_processed := SQL%ROWCOUNT;
--     else
--     v_sql := 'create table tmp_datee as
--     select cust_id,cbn_sector,cbn_sub_sector,cbn_sector_adjusted,obligor_risk_rating,pwc_classification,cbn_classification
--        from(
--        select cust_id,cbn_sector,cbn_sub_sector,cbn_sector_adjusted,obligor_risk_rating,pwc_classification,cbn_classification,
--        row_number() over(partition by cust_id order by rownum desc) rnk
--      from riskassetreport.usr_clr_obie_extra)
--      where rnk=1';
--     execute immediate v_sql;
--     v_rows_processed := SQL%ROWCOUNT;
--     end if;
      --------------------------
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_orr_sector';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_orr_sector';
       v_sql := 'create table tmp_clr_orr_sector as
       select cust_id,cbn_sector,cbn_sub_sector,cbn_sector_adjusted,obligor_risk_rating,pwc_classification,cbn_classification
        from(
        select cust_id,cbn_sector,cbn_sub_sector,cbn_sector_adjusted,obligor_risk_rating,pwc_classification,cbn_classification,
        row_number() over(partition by cust_id order by rownum desc) rnk
       from riskassetreport.usr_clr_obie_extra)
       where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_orr_sector as
     select cust_id,cbn_sector,cbn_sub_sector,cbn_sector_adjusted,obligor_risk_rating,pwc_classification,cbn_classification
        from(
        select cust_id,cbn_sector,cbn_sub_sector,cbn_sector_adjusted,obligor_risk_rating,pwc_classification,cbn_classification,
        row_number() over(partition by cust_id order by rownum desc) rnk
      from riskassetreport.usr_clr_obie_extra)
      where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
      
     begin
       select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='d_consolidated_clr_report';
       EXCEPTION
       WHEN NO_DATA_FOUND THEN
           tab_cnt:=0;
     end;
      
     if(tab_cnt)>=1 Then
     execute immediate 'drop table d_consolidated_clr_report';
     v_sql := 'create table d_consolidated_clr_report as
 SELECT /*+ PARALLEL(auto) */ 
 distinct to_date(substr('''||v_date||''',1,10),''YYYY-MM-DD'') reference_date,a.cust_id, a.ref_no, a.product_code, a.currency, booking_date, loan_amount_tcy, principal_outstanding_bal_tcy,
loan_amount_lcy, a.principal_outstanding_bal_lcy,case when rate=333333 then null else rate end rate, 
to_number(tenor) tenor, maturity_date, value_date, contract_status,
process_date, branch_code, last_credit_date, last_credit_amount, limit, source, settlement_account,
asset_gl, g.cbn_sector cbn_sector, g.cbn_sub_sector cbn_sub_sector,g.cbn_sector_adjusted cbn_sector_adjusted,
g.obligor_risk_rating obligor_risk_rating,
(CASE
                            WHEN d.exposure_type = ''CONTINGENT''
                            THEN
                               ''Performing''
                            ELSE
                               nvl(a.ngaap_classification,b.ngaap_classification)
                         END)
 ngaap_classification,
 fn_provision_amount(a.ngaap_classification,a.principal_outstanding_bal_lcy) ngaap_provision,
 a.principal_outstanding_bal_lcy total_exposure,
 nvl(DECODE( a.principal_outstanding_bal_lcy,
                           0, 0,
                           0 / a.principal_outstanding_bal_lcy),0)
                           collection_exposure_ratio_12m,
                        nvl(DECODE (
                           a.principal_outstanding_bal_lcy,
                           0, 0,
                           0 / a.principal_outstanding_bal_lcy),0)
                           collection_exposure_ratio_6m,
                        nvl(DECODE (
                           a.principal_outstanding_bal_lcy,
                           0, 0,
                           e.LCY_CREDIT_3MTH / a.principal_outstanding_bal_lcy),0)
                           collection_exposure_ratio_3m,
                        nvl(DECODE (
                           a.principal_outstanding_bal_lcy,
                           0, 0,
                           e.LCY_CREDIT_1MTH / a.principal_outstanding_bal_lcy),0)
                           collection_exposure_ratio_1m,
 nam_director1 director_1_name, nam_director2 director_2_name,
nam_director3 director_3_name, nam_director4 director_4_name, crms_code, account_officer_code,accountofficer_name, a.team_code,
a.team_name,a.group_code,a.group_name,a.region_code,a.region_name,a.division_code,a.division_name,
fcubs_region,fcubs_risk,fcubs_sector,fcubs_sub_sector,
dashboard_currency,
branch_name,
case when a.ref_no =''099AMGL080310011'' AND a.product_code <> ''AMGL'' then ''Y''
     when a.product_code = ''090005'' then ''Y''
     when a.ref_no in
(''0001648810'',
''0001635733'',
''0015839172'',
''0001647253'',
''0004958831'',
''0001647260'',
''0015843658'',
''0060468789'',
''0015841410'',
''0015839660'',
''0014545742'',
''0000134057'',
''0055832339'',
''0007183872'',
''0055890337'',
''0001797505'',
''0001786714'',
''0055833408'',
''0056235023'',
''0000853598'',
''0006953218'',
''0055831734'',
''0004291121'',
''0055891578'',
''0055833295'',
''0060703987'',
''0055833336'',
''0006822846'',
''0055831686'',
''0014545319'',
''0055832827'',
''0055892238'',
''0002768034'',
''0055832119'',
''0055832236'',
''0004563862'',
''0055832494'',
''0006612609'',
''0001795460'',
''0041905997'',
''0014691986'',
''0025320277'',
''0027075492'',
''0028328126'',
''0031536862'',
''0035840730'',
''0042278883'',
''0024413040'',
''0055890863'',
''0055832205'',
''0056159747'',
''0010492477'',
''0060574736'',
''0001637768'',
''0015451525'',
''0016851328'',
''0018675256'',
''0019813727'',
''0024592901'',
''0027610204'',
''0034614301'',
''0035907088'',
''0000827722'',
''0001740817'',
''0001219467'',
''099FL01161460001'',
''099FL01161060001'',
''099CTLN152730577'') then ''Y'' else ''N''
end exclusion_flag,
 nvl(e.FCY_CREDIT_1MTH,0) total_collection_1m,
 nvl(e.LCY_CREDIT_1MTH,0) total_collection_1m_lcy,
 nvl(e.FCY_CREDIT_3MTH,0) total_collection_3m,
 nvl(e.LCY_CREDIT_3MTH,0) total_collection_3m_lcy,
 0 total_collection_6m,
 0 total_collection_6m_lcy,
 0 total_collection_12m,
 0 total_collection_12m_lcy,
c.new_team_code new_team_code,
d.exposure_type,
d.facility_type,
case when d.facility_type=''ON LENDING'' then ''TERM LOAN'' else d.facility_type end dashboard_facility,
nvl(e.FCY_CREDIT_1WK,0) total_collection_1week,
nvl(e.lcy_credit_1wk,0) total_collection_1week_lcy,
mis_code_settlement,
a.currency currency_short_name,
a.dashboard_currency currency_type,
collateral_code collateral_desc,
collateral_type,
'' '' collateral_status,
collateral_value,
sysdate valuation_date
from tmp_clr_combine_balanceee a,stglive.usrclr3 b,stglive.usr_loans_mis c,stglive.usr_clr_exp_fac_type d,
STGLIVE.tmp_consol_collection_final e,tmp_clr_getm_collateral f, tmp_clr_orr_sector g
where a.cust_id=lpad(b.cust_id(+),9,0)
 and a.cust_id=lpad(g.cust_id(+),9,0)
 and a.ref_no=c.account_code(+)
 and a.cust_id= f.customer_no(+)
 and a.settlement_account=e.account_number(+)
 and a.PRODUCT_CODE=d.PRODUCT_CODE(+)
and a.product_code NOT IN (''070008'',
        ''AGLOTR '',
        ''GLOTRC'',
        ''LGLOTR'',
        ''090001'',
        ''070006'',
        ''050029'',
        ''090002'',
        ''100001'',
        ''70006'',
        ''90001'',
        ''COLL'',
        ''DIFNES'',
        ''ICMLCP'',
        ''ICMLSR'',
        ''IFCASA'',
        ''IFILSR'',
        ''INVASS'',
        ''INVBMB'',
        ''IRLRST'',
        ''ISLRSR'',
       ''ITLRSR'',
       ''LTIV'',
      ''RECFCY'',
      ''RECOV'',
       ''SMIV'',
      ''STBD'')
      and booking_date<='''||v_date||'''';
    execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table d_consolidated_clr_report as
 SELECT /*+ PARALLEL(auto) */ 
 distinct to_date(substr('''||v_date||''',1,10),''YYYY-MM-DD'') reference_date,a.cust_id, a.ref_no, a.product_code, a.currency, booking_date, loan_amount_tcy, principal_outstanding_bal_tcy,
loan_amount_lcy, a.principal_outstanding_bal_lcy,case when rate=333333 then null else rate end rate, 
to_number(tenor) tenor, maturity_date, value_date, contract_status,
process_date, branch_code, last_credit_date, last_credit_amount, limit, source, settlement_account,
asset_gl, g.cbn_sector cbn_sector, g.cbn_sub_sector cbn_sub_sector,g.cbn_sector_adjusted cbn_sector_adjusted,
g.obligor_risk_rating obligor_risk_rating,
(CASE
                            WHEN d.exposure_type = ''CONTINGENT''
                            THEN
                               ''Performing''
                            ELSE
                               nvl(a.ngaap_classification,b.ngaap_classification)
                         END)
 ngaap_classification,
 fn_provision_amount(a.ngaap_classification,a.principal_outstanding_bal_lcy) ngaap_provision,
 a.principal_outstanding_bal_lcy total_exposure,
 nvl(DECODE( a.principal_outstanding_bal_lcy,
                           0, 0,
                           0 / a.principal_outstanding_bal_lcy),0)
                           collection_exposure_ratio_12m,
                        nvl(DECODE (
                           a.principal_outstanding_bal_lcy,
                           0, 0,
                           0 / a.principal_outstanding_bal_lcy),0)
                           collection_exposure_ratio_6m,
                        nvl(DECODE (
                           a.principal_outstanding_bal_lcy,
                           0, 0,
                           e.LCY_CREDIT_3MTH / a.principal_outstanding_bal_lcy),0)
                           collection_exposure_ratio_3m,
                        nvl(DECODE (
                           a.principal_outstanding_bal_lcy,
                           0, 0,
                           e.LCY_CREDIT_1MTH / a.principal_outstanding_bal_lcy),0)
                           collection_exposure_ratio_1m,
 nam_director1 director_1_name, nam_director2 director_2_name,
nam_director3 director_3_name, nam_director4 director_4_name, crms_code, account_officer_code,accountofficer_name, a.team_code,
a.team_name,a.group_code,a.group_name,a.region_code,a.region_name,a.division_code,a.division_name,
fcubs_region,fcubs_risk,fcubs_sector,fcubs_sub_sector,
dashboard_currency,
branch_name,
case when a.ref_no =''099AMGL080310011'' AND a.product_code <> ''AMGL'' then ''Y''
     when a.product_code = ''090005'' then ''Y''
     when a.ref_no in
(''0001648810'',
''0001635733'',
''0015839172'',
''0001647253'',
''0004958831'',
''0001647260'',
''0015843658'',
''0060468789'',
''0015841410'',
''0015839660'',
''0014545742'',
''0000134057'',
''0055832339'',
''0007183872'',
''0055890337'',
''0001797505'',
''0001786714'',
''0055833408'',
''0056235023'',
''0000853598'',
''0006953218'',
''0055831734'',
''0004291121'',
''0055891578'',
''0055833295'',
''0060703987'',
''0055833336'',
''0006822846'',
''0055831686'',
''0014545319'',
''0055832827'',
''0055892238'',
''0002768034'',
''0055832119'',
''0055832236'',
''0004563862'',
''0055832494'',
''0006612609'',
''0001795460'',
''0041905997'',
''0014691986'',
''0025320277'',
''0027075492'',
''0028328126'',
''0031536862'',
''0035840730'',
''0042278883'',
''0024413040'',
''0055890863'',
''0055832205'',
''0056159747'',
''0010492477'',
''0060574736'',
''0001637768'',
''0015451525'',
''0016851328'',
''0018675256'',
''0019813727'',
''0024592901'',
''0027610204'',
''0034614301'',
''0035907088'',
''0000827722'',
''0001740817'',
''0001219467'',
''099FL01161460001'',
''099FL01161060001'',
''099CTLN152730577'') then ''Y'' else ''N''
end exclusion_flag,
 nvl(e.FCY_CREDIT_1MTH,0) total_collection_1m,
 nvl(e.LCY_CREDIT_1MTH,0) total_collection_1m_lcy,
 nvl(e.FCY_CREDIT_3MTH,0) total_collection_3m,
 nvl(e.LCY_CREDIT_3MTH,0) total_collection_3m_lcy,
 0 total_collection_6m,
 0 total_collection_6m_lcy,
 0 total_collection_12m,
 0 total_collection_12m_lcy,
c.new_team_code new_team_code,
d.exposure_type,
d.facility_type,
case when d.facility_type=''ON LENDING'' then ''TERM LOAN'' else d.facility_type end dashboard_facility,
nvl(e.FCY_CREDIT_1WK,0) total_collection_1week,
nvl(e.lcy_credit_1wk,0) total_collection_1week_lcy,
mis_code_settlement,
a.currency currency_short_name,
a.dashboard_currency currency_type,
collateral_code collateral_desc,
collateral_type,
'' '' collateral_status,
collateral_value,
sysdate valuation_date
from tmp_clr_combine_balanceee a,stglive.usrclr3 b,stglive.usr_loans_mis c,stglive.usr_clr_exp_fac_type d,
STGLIVE.tmp_consol_collection_final e,tmp_clr_getm_collateral f, tmp_clr_orr_sector g
where a.cust_id=lpad(b.cust_id(+),9,0)
 and a.cust_id=lpad(g.cust_id(+),9,0)
 and a.ref_no=c.account_code(+)
 and a.cust_id= f.customer_no(+)
 and a.settlement_account=e.account_number(+)
 and a.PRODUCT_CODE=d.PRODUCT_CODE(+)
and a.product_code NOT IN (''070008'',
        ''AGLOTR '',
        ''GLOTRC'',
        ''LGLOTR'',
        ''090001'',
        ''070006'',
        ''050029'',
        ''090002'',
        ''100001'',
        ''70006'',
        ''90001'',
        ''COLL'',
        ''DIFNES'',
        ''ICMLCP'',
        ''ICMLSR'',
        ''IFCASA'',
        ''IFILSR'',
        ''INVASS'',
        ''INVBMB'',
        ''IRLRST'',
        ''ISLRSR'',
       ''ITLRSR'',
       ''LTIV'',
      ''RECFCY'',
      ''RECOV'',
       ''SMIV'',
      ''STBD'')
      and booking_date<='''||v_date||'''';
    execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_d_consolidate_final
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      v_partition        VARCHAR2(100);
      vv_sql             varchar2(25000);
begin

     select in_date into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR CONSOLIDATE INSERT',
                   'CLR CONSOLIDATE INSERT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
        begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='d_consolidated_final';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
     if(tab_cnt)>=1 Then
     execute immediate 'drop table d_consolidated_final';
     v_sql := 'create table d_consolidated_final as
       SELECT /*+ PARALLEL(auto) */      
    reference_date,cust_id,ref_no,product_code,currency,booking_date,loan_amount_tcy,principal_outstanding_bal_tcy,
        rate,to_number(tenor) tenor,maturity_date,value_date,contract_status,process_date,branch_code,account_officer_code,team_code,source,
        loan_amount_lcy,principal_outstanding_bal_lcy,last_credit_date,last_credit_amount,limit,director_1_name,
        director_2_name,director_3_name,director_4_name,settlement_account,cbn_sector,cbn_sub_sector,obligor_risk_rating,
        asset_gl,total_collection_3m,total_collection_3m_lcy,total_collection_6m,total_collection_6m_lcy,total_collection_12m,
        total_collection_12m_lcy,ngaap_classification,ngaap_provision,total_exposure,collection_exposure_ratio_3m,
        collection_exposure_ratio_6m,collection_exposure_ratio_12m,exposure_type,facility_type,collateral_desc,
        collateral_type,collateral_status,collateral_value,valuation_date,dashboard_currency,dashboard_facility,
        total_collection_1m,total_collection_1m_lcy,collection_exposure_ratio_1m,total_collection_1week,
        total_collection_1week_lcy,crms_code
     from d_consolidated_clr_report where exclusion_flag=''N''';
    execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table d_consolidated_final as
       SELECT /*+ PARALLEL(auto) */      
    reference_date,cust_id,ref_no,product_code,currency,booking_date,loan_amount_tcy,principal_outstanding_bal_tcy,
        rate,to_number(tenor) tenor,maturity_date,value_date,contract_status,process_date,branch_code,account_officer_code,team_code,source,
        loan_amount_lcy,principal_outstanding_bal_lcy,last_credit_date,last_credit_amount,limit,director_1_name,
        director_2_name,director_3_name,director_4_name,settlement_account,cbn_sector,cbn_sub_sector,obligor_risk_rating,
        asset_gl,total_collection_3m,total_collection_3m_lcy,total_collection_6m,total_collection_6m_lcy,total_collection_12m,
        total_collection_12m_lcy,ngaap_classification,ngaap_provision,total_exposure,collection_exposure_ratio_3m,
        collection_exposure_ratio_6m,collection_exposure_ratio_12m,exposure_type,facility_type,collateral_desc,
        collateral_type,collateral_status,collateral_value,valuation_date,dashboard_currency,dashboard_facility,
        total_collection_1m,total_collection_1m_lcy,collection_exposure_ratio_1m,total_collection_1week,
        total_collection_1week_lcy,crms_code
     from d_consolidated_clr_report where exclusion_flag=''N''';
    execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    execute immediate 'alter table d_consolidated_final modify(CBN_SECTOR VARCHAR2(600 BYTE),CBN_SUB_SECTOR VARCHAR2(600 BYTE),
     OBLIGOR_RISK_RATING VARCHAR2(600 BYTE))';
   
   --execute immediate 'grant select on d_consolidated_final to stglive';
   
    v_partition:= 'P'|| to_char(v_date,'yyyymmdd');
    
    stglive.prc_truncate_partition('stglive.d_consolidated_credit_report_n',v_partition);
    
    execute immediate 'alter table stglive.d_consolidated_credit_report_n 
      exchange partition P'||to_char(v_date,'yyyymmdd')||' with table d_consolidated_final';
    
    --execute immediate 'alter table odsrev.d_consolidated_credit_report_n 
      ---exchange partition P'||to_char(trunc(sysdate),'yyyymmdd')||' with table d_consolidated_final';
    
    --stglive.prc_truncate_partition('stglive.d_consolidated_credit_report',v_partition);
  /*  
    vv_sql :='select reference_date,cust_id,ref_no,product_code,currency,booking_date,loan_amount_tcy,principal_outstanding_bal_tcy,
        rate,tenor,maturity_date,value_date,contract_status,process_date,branch_code,account_officer_code,team_code,source,
        loan_amount_lcy,principal_outstanding_bal_lcy,last_credit_date,last_credit_amount,limit,director_1_name,
        director_2_name,director_3_name,director_4_name,settlement_account,cbn_sector,cbn_sub_sector,obligor_risk_rating,
        asset_gl,total_collection_3m,total_collection_3m_lcy,total_collection_6m,total_collection_6m_lcy,total_collection_12m,
        total_collection_12m_lcy,ngaap_classification,ngaap_provision,total_exposure,collection_exposure_ratio_3m,
        collection_exposure_ratio_6m,collection_exposure_ratio_12m,exposure_type,facility_type,collateral_desc,
        collateral_type,collateral_status,collateral_value,valuation_date,dashboard_currency,dashboard_facility,
        total_collection_1m,total_collection_1m_lcy,collection_exposure_ratio_1m,total_collection_1week,
    total_collection_1week_lcy,crms_code from d_consolidated_final';
    
    execute immediate 'alter table stglive.d_consolidated_credit_report 
      exchange partition P'||to_char(trunc(sysdate),'yyyymmdd')||' with table d_consolidated_final';
    
    execute immediate 'insert into stglive.d_consolidated_credit_report(reference_date,cust_id,ref_no,product_code,currency,booking_date,loan_amount_tcy,principal_outstanding_bal_tcy,
        rate,tenor,maturity_date,value_date,contract_status,process_date,branch_code,account_officer_code,team_code,source,
        loan_amount_lcy,principal_outstanding_bal_lcy,last_credit_date,last_credit_amount,limit,director_1_name,
        director_2_name,director_3_name,director_4_name,settlement_account,cbn_sector,cbn_sub_sector,obligor_risk_rating,
        asset_gl,total_collection_3m,total_collection_3m_lcy,total_collection_6m,total_collection_6m_lcy,total_collection_12m,
        total_collection_12m_lcy,ngaap_classification,ngaap_provision,total_exposure,collection_exposure_ratio_3m,
        collection_exposure_ratio_6m,collection_exposure_ratio_12m,exposure_type,facility_type,collateral_desc,
        collateral_type,collateral_status,collateral_value,valuation_date,dashboard_currency,dashboard_facility,
        total_collection_1m,total_collection_1m_lcy,collection_exposure_ratio_1m,total_collection_1week,
    total_collection_1week_lcy,crms_code)' || vv_sql;
    
    commit;
    */ 
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_getm_liab_cust_ext
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'GETM LIAB CUST',
                   'GETM LIAB CUST',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_getm_liab_cust';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_getm_liab_cust';
       v_sql := 'create table tmp_clr_getm_liab_cust as
       SELECT /*+ PARALLEL(auto) */ 
       liab_id,customer_no
                   from stglive.src_getm_liab_cust';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_getm_liab_cust as
       SELECT /*+ PARALLEL(auto) */ 
       liab_id,customer_no
                   from stglive.src_getm_liab_cust';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_get_bvn_ext
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'BVN CUSTOMER INFO',
                   'BVN CUSTOMER INFO',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cust_bvn';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cust_bvn';
       v_sql := 'create table tmp_clr_cust_bvn as
       SELECT /*+ PARALLEL(auto) */ 
      a.customer_no,
         rec_key,
         NVL (b.field_val_3, ''NA'') bvn
         FROM (SELECT SUBSTR (rec_key, 1, 9) rec_key,
                                         field_val_3
                 FROM cstm_function_userdef_fields@loc_fcubsdr
                 WHERE  function_id = ''STDCIF''
                 AND field_val_3 IS NOT NULL) b,
               stglive.src_sttm_customer a WHERE customer_no = rec_key AND a.auth_stat = ''A''
               and rownum <=10000000';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cust_bvn as
       SELECT /*+ PARALLEL(auto) */ 
      a.customer_no,
         rec_key,
         NVL (b.field_val_3, ''NA'') bvn
         FROM (SELECT SUBSTR(rec_key, 1, 9) rec_key,
                       field_val_3
                 FROM cstm_function_userdef_fields@loc_fcubsdr
                 WHERE  function_id = ''STDCIF''
                 AND field_val_3 IS NOT NULL) b,
               stglive.src_sttm_customer a WHERE customer_no = rec_key AND a.auth_stat = ''A''
               and rownum <=10000000';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_get_int_receivable
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      v_prev_working_day  date;
      
      
begin
     
     select in_date into v_date from clr_date_control;
     
     v_prev_working_day := v_date - 1;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'INTEREST RECEIVABLE INFO',
                   'INTEREST RECEIVABLE INFO',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_int_receivable';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_int_receivable';
       v_sql := 'create table tmp_clr_int_receivable as
       SELECT /*+ PARALLEL(auto) */ 
      account_number,
        SUM(balance) int_receivable_tcy,
        SUM(lcy_balance) int_receivable_lcy
        from stglive.src_cltb_acct_comp_bal_brkup
     WHERE component IN (''MAIN_INT'', ''ODPR2_PNLRT'')
     GROUP BY account_number
     UNION ALL
                            SELECT acc,
                                   SUM (accrued_amt) accrued_amt_tcy,
                                   SUM (
                                        accrued_amt
                                      * (stglive.pkg_currency1.fn_lcy_conversion_rate (
                                            (ccy),
                                            '''||v_prev_working_day||''')))
                                      accrued_amt_lcy
                              from stglive.src_ictb_entries,
                                   ods.sttm_cust_account
                             WHERE acc = cust_ac_no AND drcr = ''D''
                          GROUP BY acc';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_int_receivable as
       SELECT /*+ PARALLEL(auto) */ 
      account_number,
        SUM(balance) int_receivable_tcy,
        SUM(lcy_balance) int_receivable_lcy
        from stglive.src_cltb_acct_comp_bal_brkup
     WHERE component IN (''MAIN_INT'', ''ODPR2_PNLRT'')
     GROUP BY account_number
     UNION ALL
                            SELECT acc,
                                   SUM (accrued_amt) accrued_amt_tcy,
                                   SUM (
                                        accrued_amt
                                      * (stglive.pkg_currency1.fn_lcy_conversion_rate (
                                            (ccy),
                                            '''||v_prev_working_day||''')))
                                      accrued_amt_lcy
                              from stglive.src_ictb_entries,
                                   ods.sttm_cust_account
                             WHERE acc = cust_ac_no AND drcr = ''D''
                          GROUP BY acc';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_cardsys_acct_limit
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CARDSYS ACCT LIMIT',
                   'CARDSYS ACCT LIMIT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cardsys_acctlimit';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cardsys_acctlimit';
       v_sql := 'create table tmp_clr_cardsys_acctlimit as
       SELECT /*+ PARALLEL(auto) */ 
      account_number,creation,expiry_date,new_credit_limit from 
      cardsys.cs_account_cardlimits@loc_fcubslive';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_cardsys_acctlimit as
       SELECT /*+ PARALLEL(auto) */ 
      account_number,creation,expiry_date,new_credit_limit from 
      cardsys.cs_account_cardlimits@loc_fcubslive';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_getm_liab_extract
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'GETM LIAB EXTRACT',
                   'GETM LIAB EXTRACT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_getm_liab_extract';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_getm_liab_extract';
       v_sql := 'create table tmp_clr_getm_liab_extract as
       SELECT /*+ PARALLEL(auto) */ 
       id,liab_no,liab_name liability_name,
                         overall_limit overall_limit_amount
                   from stglive.src_getm_liab';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_getm_liab_extract as
       SELECT /*+ PARALLEL(auto) */ 
       id,liab_no,liab_name liability_name,
                         overall_limit overall_limit_amount
                   from stglive.src_getm_liab';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_ldtb_contract_mastld
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'LDTB CONTRACT LD',
                   'LDTB CONTRACT LD',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_ldtb_contract_ld';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_ldtb_contract_ld';
       v_sql := 'create table tmp_clr_ldtb_contract_ld as
       SELECT /*+ PARALLEL(auto) */
       contract_ref_no,user_ref_no,amount from(
       select contract_ref_no,user_ref_no,amount,rank() over(partition by contract_ref_no order by version_no desc)rnk 
       from stglive.src_ldtb_contract_master_ld) where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_ldtb_contract_ld as
       SELECT /*+ PARALLEL(auto) */
       contract_ref_no,user_ref_no,amount from(
       select contract_ref_no,user_ref_no,amount,rank() over(partition by contract_ref_no order by version_no desc)rnk 
       from stglive.src_ldtb_contract_master_ld) where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_stage_2obiee_extract
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     
     select trunc(in_date) into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR CONSOLIDATE OBIEE',
                   'CLR CONSOLIDATE OBIEE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      
      ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (007,
                   'CLR CONSOLIDATE OBIEE break 1',
                   'CLR CONSOLIDATE OBIEE break 1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_consolidate_obiee';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_consolidate_obiee';
     v_sql := 'create table tmp_clr_consolidate_obiee as
       SELECT /*+ PARALLEL(4) */
        a.*,h.product_description product_name, nvl(trim(b.cust_fullname),trim(c.customer_name1)) customer_name1,b.customer_type,liability_no,d.value_date original_book_date,
user_defined_status fcubs_classification,
liability_name,overall_limit_amount,f.linked_amount facility_limit_amount,
                         f.linked_reference_no line_code,
   nvl (g.group_name,nvl(b.cust_fullname,c.customer_name1))
                            group_obligor_name,i.bvn,j.amount original_amt_disbursed
from d_consolidated_clr_report a, tmp_clr_cust_snapshot b,--odsrev.drv_customer_snapshot_details b,
tmp_clr_sttm_cust_info c, tmp_clr_cltb_acct_master d,tmp_clr_getm_liab_extract e,tmp_clr_cltb_colllink_dtls f,
(select *
  from stglive.dim_usr_group_related a
  where dw_group_key =(select max (dw_group_key)
  from stglive.dim_usr_group_related
  where cod_cust_id = a.cod_cust_id))g,
  revedw.dim_product h,
  tmp_clr_cust_bvn i,
  tmp_clr_ldtb_contract_ld j,
  tmp_clr_getm_collateral k
where a.cust_id = b.customer_number(+)
  and a.cust_id = c.customer_no(+)
  and a.cust_id = k.customer_no(+)
  and a.ref_no = d.user_ref_no(+)
  and c.liability_no = e.liab_no(+)
  and a.ref_no = f.account_number(+)
  and a.ref_no = j.contract_ref_no(+)
  and a.cust_id = lpad (g.cod_cust_id(+),9,0)
  and trim(a.product_code) = trim(h.product_code(+))
  and a.cust_id = i.rec_key(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_consolidate_obiee as
       SELECT /*+ PARALLEL(4) */
        a.*,h.product_description product_name, nvl(trim(b.cust_fullname),trim(c.customer_name1)) customer_name1,b.customer_type,liability_no,d.value_date original_book_date,
user_defined_status fcubs_classification,
liability_name,overall_limit_amount,f.linked_amount facility_limit_amount,
                         f.linked_reference_no line_code,
   nvl (g.group_name,nvl(b.cust_fullname,c.customer_name1))
                            group_obligor_name,i.bvn,j.amount original_amt_disbursed
from d_consolidated_clr_report a, tmp_clr_cust_snapshot b, ---odsrev.drv_customer_snapshot_details b,
tmp_clr_sttm_cust_info c, tmp_clr_cltb_acct_master d,tmp_clr_getm_liab_extract e,tmp_clr_cltb_colllink_dtls f,
(select *
  from stglive.dim_usr_group_related a
  where dw_group_key =(select max (dw_group_key)
  from stglive.dim_usr_group_related
  where cod_cust_id = a.cod_cust_id))g,
  revedw.dim_product h,
  tmp_clr_cust_bvn i,
  tmp_clr_ldtb_contract_ld j,
  tmp_clr_getm_collateral k
where a.cust_id = b.customer_number(+)
  and a.cust_id = c.customer_no(+)
  and a.cust_id = k.customer_no(+)
  and a.ref_no = d.user_ref_no(+)
  and c.liability_no = e.liab_no(+)
  and a.ref_no = f.account_number(+)
  and a.ref_no = j.contract_ref_no(+)
  and a.cust_id = lpad (g.cod_cust_id(+),9,0)
  and a.product_code = h.product_code(+)
  and a.cust_id = i.rec_key(+)';
 execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    
    ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (008,
                   'CLR CONSOLIDATE OBIEE break 2',
                   'CLR CONSOLIDATE OBIEE break 2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
    
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_consolidate_obi2';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_consolidate_obi2';
     v_sql := 'create table tmp_clr_consolidate_obi2 as
       SELECT /*+ PARALLEL(4) */
       a.*,CASE WHEN a.product_code IN(''RDPI'',''RDIP'')
                              AND (a.customer_name1) IN
                        (''HANSWORTH LIMITED'',
                                                ''HUAWEI TECHNOLOGIES COMPANY (NIGERIA)LTD'',
                                                ''ALCATEL NIGERIA LIMITED'',
                                                ''ZTE NIGERIA LIMITED'')
                            THEN
                               0
                            ELSE
                               NVL (b.int_receivable_tcy, 0)
                         END
                            int_receivable_tcy,
                           CASE
                              WHEN     a.product_code IN (''RDPI'', ''RDIP'')
                                   AND (a.customer_name1) IN (''HANSWORTH LIMITED'',
                                                                               ''HUAWEI TECHNOLOGIES COMPANY (NIGERIA)LTD'',
                                                                               ''ALCATEL NIGERIA LIMITED'',
                                                                               ''ZTE NIGERIA LIMITED'')
                              THEN
                                 0
                              ELSE
                                 NVL (b.int_receivable_tcy, 0)
                           END
   * c.mid_rate int_receivable_lcy,
   d.account_number cardsys_no,d.creation cardsys_creation, d.expiry_date expiry_cardsys, d.new_credit_limit cardsys_limit
   from tmp_clr_consolidate_obiee a,tmp_clr_int_receivable b,tmp_clr_ccy_rate c,
       tmp_clr_cardsys_acctlimit d
    where a.ref_no = b.account_number(+) 
    and a.ref_no = d.account_number(+)
    and currency = ccy1(+)';
  execute immediate v_sql;
  v_rows_processed := SQL%ROWCOUNT;
  else
     v_sql := 'create table tmp_clr_consolidate_obi2 as
       SELECT /*+ PARALLEL(4) */
       a.*,CASE WHEN a.product_code IN(''RDPI'',''RDIP'')
                              AND (a.customer_name1) IN
                        (''HANSWORTH LIMITED'',
                                                ''HUAWEI TECHNOLOGIES COMPANY (NIGERIA)LTD'',
                                                ''ALCATEL NIGERIA LIMITED'',
                                                ''ZTE NIGERIA LIMITED'')
                            THEN
                               0
                            ELSE
                               NVL (b.int_receivable_tcy, 0)
                         END
                            int_receivable_tcy,
                           CASE
                              WHEN     a.product_code IN (''RDPI'', ''RDIP'')
                                   AND (a.customer_name1) IN (''HANSWORTH LIMITED'',
                                                                               ''HUAWEI TECHNOLOGIES COMPANY (NIGERIA)LTD'',
                                                                               ''ALCATEL NIGERIA LIMITED'',
                                                                               ''ZTE NIGERIA LIMITED'')
                              THEN
                                 0
                              ELSE
                                 NVL (b.int_receivable_tcy, 0)
                           END
                         * c.mid_rate int_receivable_lcy,d.account_number cardsys_no,d.creation cardsys_creation, d.expiry_date expiry_cardsys, d.new_credit_limit cardsys_limit
                          from tmp_clr_consolidate_obiee a,tmp_clr_int_receivable b,tmp_clr_ccy_rate c,
                            tmp_clr_cardsys_acctlimit d
                where a.ref_no = b.account_number(+) 
                and   a.ref_no = d.account_number(+)
                and currency = ccy1(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    
    ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (009,
                   'CLR CONSOLIDATE OBIEE break 3',
                   'CLR CONSOLIDATE OBIEE break 3',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_consolidate_obi3';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_consolidate_obi3';
     v_sql := 'create table tmp_clr_consolidate_obi3 as
       SELECT /*+ PARALLEL(4) */
      reference_date, a.cust_id, customer_name1, a.ref_no, product_code,  product_name, currency, 
        case when cardsys_no is null then booking_date else cardsys_creation end booking_date, loan_amount_tcy, principal_outstanding_bal_tcy, loan_amount_lcy,
        principal_outstanding_bal_lcy, rate, tenor, 
        case when cardsys_no is null then maturity_date else expiry_cardsys end maturity_date,
        case when cardsys_no is null then value_date else cardsys_creation end value_date,
         contract_status, process_date, branch_code,
        last_credit_date, last_credit_amount, 
        case when cardsys_no is null then limit else cardsys_limit end limit,
        source, settlement_account, asset_gl, cbn_sector, cbn_sub_sector,cbn_sector_adjusted,branch_name,
        obligor_risk_rating, ngaap_classification, ngaap_provision, total_exposure, collection_exposure_ratio_12m,
        collection_exposure_ratio_6m, collection_exposure_ratio_3m, collection_exposure_ratio_1m, director_1_name,
        director_2_name, director_3_name, director_4_name, 
        nvl(a.crms_code,b.crms_code) crms_code, account_officer_code, accountofficer_name,team_code, team_name,
        group_code, group_name, region_code, region_name, division_code, division_name, fcubs_region, fcubs_risk,
        fcubs_sector, fcubs_sub_sector, dashboard_currency, exclusion_flag, total_collection_1m, total_collection_1m_lcy,
        total_collection_3m, total_collection_3m_lcy, total_collection_6m, total_collection_6m_lcy, total_collection_12m,
        total_collection_12m_lcy, new_team_code, exposure_type, case when d.ref_code is not null then ''ON - LENDING - CBN'' else facility_type end facility_type,
        dashboard_facility, total_collection_1week,
        total_collection_1week_lcy,nvl(customer_type,''C'') customer_type, liability_no, original_book_date, fcubs_classification,
        liability_name, overall_limit_amount, facility_limit_amount, line_code, group_obligor_name, bvn, original_amt_disbursed,
        collateral_value, collateral_type, int_receivable_tcy, 
        case when int_receivable_lcy < 0 then 0 else int_receivable_lcy end int_receivable_lcy, cardsys_no, cardsys_creation, expiry_cardsys, cardsys_limit,
        (principal_outstanding_bal_tcy + int_receivable_tcy)
                    total_exposure_tcy,
                 (a.principal_outstanding_bal_lcy + int_receivable_lcy)
                    total_exposure_lcy,
                 (CASE
                     WHEN     a.cust_id = a.liability_no
                          AND collateral_value > 0
                     THEN
                        ''YES''
                     ELSE
                        ''NO''
                  END)
         collateral_attached,
         case when a.cust_id = a.liability_no then (a.principal_outstanding_bal_lcy + int_receivable_lcy) else 0 end total_exposure_kcy,
         e.name_of_borrowers,
                         e.interest,
                         e.crms_borrowers_code_no,
                         e.rc_sr_br_nid,
                         e.rel_to_reporting_inst,
                         e.related_interest_name,
                         mis_code_settlement,
                         currency_short_name,
                         currency_type
        from tmp_clr_consolidate_obi2 a, tmp_clr_crms_spool b, stglive.dim_usr_insider_related e,stglive.obiee_change_facilitytype d
        where a.ref_no=b.ref_no(+)
  and a.cust_id = LPAD(e.cust_id(+),9,0)
  and a.ref_no=d.ref_code(+)';
  execute immediate v_sql;
  v_rows_processed := SQL%ROWCOUNT;
  else
    v_sql := 'create table tmp_clr_consolidate_obi3 as
       SELECT /*+ PARALLEL(4) */
      reference_date, a.cust_id, customer_name1, a.ref_no, product_code,  product_name, currency, 
        case when cardsys_no is null then booking_date else cardsys_creation end booking_date, loan_amount_tcy, principal_outstanding_bal_tcy, loan_amount_lcy,
        principal_outstanding_bal_lcy, rate, tenor, 
        case when cardsys_no is null then maturity_date else expiry_cardsys end maturity_date,
        case when cardsys_no is null then value_date else cardsys_creation end value_date,
         contract_status, process_date, branch_code,
        last_credit_date, last_credit_amount, 
        case when cardsys_no is null then limit else cardsys_limit end limit,
        source, settlement_account, asset_gl, cbn_sector, cbn_sub_sector,cbn_sector_adjusted,branch_name,
        obligor_risk_rating, ngaap_classification, ngaap_provision, total_exposure, collection_exposure_ratio_12m,
        collection_exposure_ratio_6m, collection_exposure_ratio_3m, collection_exposure_ratio_1m, director_1_name,
        director_2_name, director_3_name, director_4_name, 
        nvl(a.crms_code,b.crms_code) crms_code, account_officer_code, accountofficer_name,team_code, team_name,
        group_code, group_name, region_code, region_name, division_code, division_name, fcubs_region, fcubs_risk,
        fcubs_sector, fcubs_sub_sector, dashboard_currency, exclusion_flag, total_collection_1m, total_collection_1m_lcy,
        total_collection_3m, total_collection_3m_lcy, total_collection_6m, total_collection_6m_lcy, total_collection_12m,
        total_collection_12m_lcy, new_team_code, exposure_type, case when d.ref_code is not null then ''ON - LENDING - CBN'' else facility_type end facility_type,
        dashboard_facility, total_collection_1week,
        total_collection_1week_lcy,nvl(customer_type,''C'') customer_type, liability_no, original_book_date, fcubs_classification,
        liability_name, overall_limit_amount, facility_limit_amount, line_code, group_obligor_name, bvn, original_amt_disbursed,
        collateral_value, collateral_type, int_receivable_tcy, 
        case when int_receivable_lcy < 0 then 0 else int_receivable_lcy end int_receivable_lcy, 
        cardsys_no, cardsys_creation, expiry_cardsys, cardsys_limit,
        (principal_outstanding_bal_tcy + int_receivable_tcy)
                    total_exposure_tcy,
                 (a.principal_outstanding_bal_lcy + int_receivable_lcy)
                    total_exposure_lcy,
                 (CASE
                     WHEN     a.cust_id = a.liability_no
                          AND collateral_value > 0
                     THEN
                        ''YES''
                     ELSE
                        ''NO''
                  END)
         collateral_attached,
         case when a.cust_id = a.liability_no then (a.principal_outstanding_bal_lcy + int_receivable_lcy) else 0 end
         total_exposure_kcy,
         e.name_of_borrowers,
                         e.interest,
                         e.crms_borrowers_code_no,
                         e.rc_sr_br_nid,
                         e.rel_to_reporting_inst,
                         e.related_interest_name,
                         mis_code_settlement,
currency_short_name,
                         currency_type
        from tmp_clr_consolidate_obi2 a, tmp_clr_crms_spool b, stglive.dim_usr_insider_related e,stglive.obiee_change_facilitytype d
        where a.ref_no=b.ref_no(+)
  and a.cust_id = LPAD(e.cust_id(+),9,0)
  and a.ref_no=d.ref_code(+)';
  execute immediate v_sql;
  v_rows_processed := SQL%ROWCOUNT;
  end if;
    
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_crms_spool_extract
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CRMS SPOOL INFO',
                   'CRMS SPOOL INFO',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_crms_spool';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_crms_spool';
      v_sql := 'create table tmp_clr_crms_spool as
       SELECT /*+ PARALLEL(auto) */ 
        ref_no,crms_code from(
     select ref_no,crms_code from stglive.obiee_total where crms_code is not null
            union all
     select distinct facilityrefno ref_no, crms_code  from salesportal.sp_mqmsg_logs@loc_fcubslive where crms_code is not null)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_crms_spool as
       SELECT /*+ PARALLEL(auto) */ 
        ref_no,crms_code from(
     select ref_no,crms_code from stglive.obiee_total where crms_code is not null
            union all
     select distinct facilityrefno ref_no, crms_code  from salesportal.sp_mqmsg_logs@loc_fcubslive where crms_code is not null)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_cltb_acct_schedule
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     select trunc(in_date) into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLTB SCHEDULE PAYMENT',
                   'CLTB SCHEDULE PAYMENT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_schedule1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_cltb_schedule1';
      v_sql := 'create table tmp_clr_cltb_schedule1 as
      SELECT /*+ PARALLEL(auto) */ 
        account_number,settlement_ccy,component_name,schedule_due_date,schedule_st_date,
        nvl(amount_due,0) amount_due,nvl(amount_settled,0) amount_settled,nvl(accrued_amount,0) accrued_amount
     from stglive.src_cltb_account_schedules 
     where schedule_due_date >''30sep2015''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_cltb_schedule1 as
      SELECT /*+ PARALLEL(auto) */ 
        account_number,settlement_ccy,component_name,schedule_due_date,schedule_st_date,
        nvl(amount_due,0) amount_due,nvl(amount_settled,0) amount_settled,nvl(accrued_amount,0) accrued_amount
     from stglive.src_cltb_account_schedules 
     where schedule_due_date >''30sep2015''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_schedule';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_cltb_schedule';
      v_sql := 'create table tmp_clr_cltb_schedule as
      SELECT /*+ PARALLEL(auto) */ 
        account_number,settlement_ccy,component_name,schedule_due_date,schedule_st_date,
        nvl(amount_due,0) amount_due,nvl(amount_settled,0) amount_settled,nvl(accrued_amount,0) accrued_amount
     from tmp_clr_cltb_schedule1 
     where component_name in (''PRINCIPAL'',''MAIN_INT'')
     and schedule_due_date <='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cltb_schedule as
      SELECT /*+ PARALLEL(auto) */ 
        account_number,settlement_ccy,component_name,schedule_due_date,schedule_st_date,
        nvl(amount_due,0) amount_due,nvl(amount_settled,0) amount_settled,nvl(accrued_amount,0) accrued_amount
     from tmp_clr_cltb_schedule1 
     where component_name in (''PRINCIPAL'',''MAIN_INT'')
     and schedule_due_date <='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_cltb_schedule_obligatn
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     select trunc(in_date) into v_date from clr_date_control;

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLTB SCHEDULE OBLIGATN',
                   'CLTB SCHEDULE OBLIGATN',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_sched_oblign';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_cltb_sched_oblign';
      v_sql := 'create table tmp_clr_cltb_sched_oblign as
      SELECT /*+ PARALLEL(auto) */ 
        account_number, min(schedule_due_date) schedule_due_date,component_name
             FROM stglive.src_cltb_account_schedules x
            WHERE schedule_due_date >= '''||v_date||''' and component_name in(''MAIN_INT'',''PRINCIPAL'')
         GROUP BY account_number,component_name';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_cltb_sched_oblign as
      SELECT /*+ PARALLEL(auto) */ 
        account_number, min(schedule_due_date) schedule_due_date,component_name
             FROM stglive.src_cltb_account_schedules x
            WHERE schedule_due_date >= '''||v_date||''' and component_name in(''MAIN_INT'',''PRINCIPAL'')
         GROUP BY account_number,component_name';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_cltb_acct_sch_compo
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLTB SCHEDULE COMPONENT',
                   'CLTB SCHEDULE COMPONENT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_sched_compo';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_cltb_sched_compo';
      v_sql := 'create table tmp_clr_cltb_sched_compo as
      SELECT /*+ PARALLEL(auto) */ 
        account_number,component_name,unit,no_of_schedules,schedule_type
        from stglive.src_cltb_account_comp_sch';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_cltb_sched_compo as
      SELECT /*+ PARALLEL(auto) */ 
        account_number,component_name,unit,no_of_schedules,schedule_type
        from stglive.src_cltb_account_comp_sch';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_cltb_acct_sch_datediff
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     select trunc(in_date) into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLTB SCHEDULE DIFFDATE',
                   'CLTB SCHEDULE DIFFDATE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cltb_sched_datediff';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_cltb_sched_datediff';
      v_sql := 'create table tmp_clr_cltb_sched_datediff as
      SELECT /*+ PARALLEL(auto) */ 
       account_number,component_name,schedule_due_date,schedule_st_date
       FROM stglive.src_cltb_account_schedules where schedule_due_date >= '''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
      v_sql := 'create table tmp_clr_cltb_sched_datediff as
      SELECT /*+ PARALLEL(auto) */ 
       account_number,component_name,schedule_due_date,schedule_st_date
       FROM stglive.src_cltb_account_schedules where schedule_due_date >= '''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

        
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_sttm_acct_linkages
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CUST ACCT LINKAGES',
                   'CUST ACCT LINKAGES',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_sttm_acct_linkages';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_sttm_acct_linkages';
      v_sql := 'create table tmp_clr_sttm_acct_linkages as
      SELECT /*+ PARALLEL(auto) */ 
    cust_ac_no,linked_ref_no
    from stglive.src_sttm_cust_account_linkages';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
      v_sql := 'create table tmp_clr_sttm_acct_linkages as
      SELECT /*+ PARALLEL(auto) */ 
    cust_ac_no,linked_ref_no
    from stglive.src_sttm_cust_account_linkages';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_unpaid_obligatn
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR UNPAID OBLIGATN',
                   'CLR UNPAID OBLIGATN',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_unpaid_obligation';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_unpaid_obligation';
      v_sql := 'create table tmp_clr_unpaid_obligation as
            SELECT /*+ PARALLEL(4) */
                 account_number,
                  settlement_ccy unpo_settlement_ccy,
                    trunc(sysdate)-1
                  - MAX (
                       CASE
                          WHEN component_name = ''PRINCIPAL''
                          THEN
                             schedule_due_date
                       END)
                     unpo_days_overdue,
                  MIN (
                     CASE
                        WHEN component_name = ''PRINCIPAL'' THEN schedule_st_date
                     END)
                     unpo_sched_start_date,
                  MAX (
                     CASE
                        WHEN component_name = ''PRINCIPAL''
                        THEN
                           schedule_due_date
                     END)
                     unpo_sched_due_date,
                  SUM (
                     CASE
                        WHEN component_name = ''PRINCIPAL'' THEN amount_due
                        ELSE 0
                     END)
                     unpo_principal_amount,
                  SUM (
                     CASE
                        WHEN component_name = ''PRINCIPAL'' THEN amount_settled
                        ELSE 0
                     END)
                     unpo_principal_settled,
                  SUM (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN accrued_amount
                        ELSE 0
                     END)
                     unpo_accrued_amount,
                  SUM (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN amount_settled
                        ELSE 0
                     END)
                     unpo_int_settled,
                  SUM (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN amount_due
                        ELSE 0
                     END)
                     unpo_int_amount,
                  COUNT (CASE WHEN component_name = ''PRINCIPAL'' THEN 1 END)
                     unpo_schedule_cnt,
                  SUM(
                     CASE
                        WHEN component_name = ''PRINCIPAL''
                        THEN
                           (amount_due - amount_settled)
                        ELSE
                           0
                     END)
                     unsettled_principal_amount,
                  SUM (
                     CASE
                        WHEN component_name = ''MAIN_INT''
                        THEN
                           (amount_due - amount_settled)
                        ELSE
                           0
                     END)
                     unsettled_interest_amount,
                  SUM (
                       CASE
                          WHEN component_name = ''MAIN_INT''
                          THEN
                               (accrued_amount - amount_settled)
                             * stglive.pkg_currency1.fn_lcy_conversion_rate (
                                  (settlement_ccy),
                                  trunc(sysdate)-1)
                          ELSE
                             0
                       END
                     + CASE
                          WHEN component_name = ''PRINCIPAL''
                          THEN
                               (amount_due - amount_settled)
                             * stglive.pkg_currency1.fn_lcy_conversion_rate (
                                  (settlement_ccy),
                                  trunc(sysdate)-1)
                          ELSE
                             0
                       END)
                     total_unsettled_amount_lcy
          from tmp_clr_cltb_schedule
          group by account_number,settlement_ccy';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_unpaid_obligation as
            SELECT /*+ PARALLEL(4) */
                 account_number,
                  settlement_ccy unpo_settlement_ccy,
                    trunc(sysdate)-1
                  - MAX (
                       CASE
                          WHEN component_name = ''PRINCIPAL''
                          THEN
                             schedule_due_date
                       END)
                     unpo_days_overdue,
                  MIN (
                     CASE
                        WHEN component_name = ''PRINCIPAL'' THEN schedule_st_date
                     END)
                     unpo_sched_start_date,
                  MAX (
                     CASE
                        WHEN component_name = ''PRINCIPAL''
                        THEN
                           schedule_due_date
                     END)
                     unpo_sched_due_date,
                  SUM (
                     CASE
                        WHEN component_name = ''PRINCIPAL'' THEN amount_due
                        ELSE 0
                     END)
                     unpo_principal_amount,
                  SUM (
                     CASE
                        WHEN component_name = ''PRINCIPAL'' THEN amount_settled
                        ELSE 0
                     END)
                     unpo_principal_settled,
                  SUM (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN accrued_amount
                        ELSE 0
                     END)
                     unpo_accrued_amount,
                  SUM (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN amount_settled
                        ELSE 0
                     END)
                     unpo_int_settled,
                  SUM (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN amount_due
                        ELSE 0
                     END)
                     unpo_int_amount,
                  COUNT (CASE WHEN component_name = ''PRINCIPAL'' THEN 1 END)
                     unpo_schedule_cnt,
                  SUM (
                     CASE
                        WHEN component_name = ''PRINCIPAL''
                        THEN
                           (amount_due - amount_settled)
                        ELSE
                           0
                     END)
                     unsettled_principal_amount,
                  SUM (
                     CASE
                        WHEN component_name = ''MAIN_INT''
                        THEN
                           (amount_due - amount_settled)
                        ELSE
                           0
                     END)
                     unsettled_interest_amount,
                  SUM (
                       CASE
                          WHEN component_name = ''MAIN_INT''
                          THEN
                               (accrued_amount - amount_settled)
                             * stglive.pkg_currency1.fn_lcy_conversion_rate (
                                  (settlement_ccy),
                                  trunc(sysdate)-1)
                          ELSE
                             0
                       END
                     + CASE
                          WHEN component_name = ''PRINCIPAL''
                          THEN
                               (amount_due - amount_settled)
                             * stglive.pkg_currency1.fn_lcy_conversion_rate (
                                  (settlement_ccy),
                                  trunc(sysdate)-1)
                          ELSE
                             0
                       END)
                     total_unsettled_amount_lcy
          from tmp_clr_cltb_schedule
          group by account_number,settlement_ccy';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_min_sched_date';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_min_sched_date';
      v_sql := 'create table tmp_clr_min_sched_date as
      SELECT /*+ PARALLEL(auto) */ 
        account_number, MIN(schedule_due_date) schedule_due_date
             FROM tmp_clr_cltb_sched_oblign
            WHERE component_name = ''MAIN_INT''
         GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_min_sched_date as
      SELECT /*+ PARALLEL(auto) */ 
        account_number, MIN(schedule_due_date) schedule_due_date
             FROM tmp_clr_cltb_sched_oblign
            WHERE component_name = ''MAIN_INT''
         GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_main_unpaidoblign';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_main_unpaidoblign';
      v_sql := 'create table tmp_clr_main_unpaidoblign as
      SELECT /*+ PARALLEL(4) */
               a.account_number,
                unpo_settlement_ccy,
                unpo_days_overdue,
                unpo_sched_start_date,
                b.schedule_due_date unpo_sched_due_date,
                unpo_principal_amount,
                unpo_principal_settled,
                unpo_accrued_amount,
                unpo_int_settled,
                unpo_int_amount,
                unpo_schedule_cnt,
                unsettled_principal_amount,
                unsettled_interest_amount,
                total_unsettled_amount_lcy
           FROM tmp_clr_unpaid_obligation a, tmp_clr_min_sched_date b
          WHERE a.account_number = b.account_number(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_main_unpaidoblign as
      SELECT /*+ PARALLEL(4) */
               a.account_number,
                unpo_settlement_ccy,
                unpo_days_overdue,
                unpo_sched_start_date,
                b.schedule_due_date unpo_sched_due_date,
                unpo_principal_amount,
                unpo_principal_settled,
                unpo_accrued_amount,
                unpo_int_settled,
                unpo_int_amount,
                unpo_schedule_cnt,
                unsettled_principal_amount,
                unsettled_interest_amount,
                total_unsettled_amount_lcy
           FROM tmp_clr_unpaid_obligation a, tmp_clr_min_sched_date b
          WHERE a.account_number = b.account_number(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_clr_sched_datediff
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     select trunc(in_date) into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR SCHED DATEDIFF',
                   'CLR SCHED DATEDIFF',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_schedu_datediff';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_schedu_datediff';
       v_sql := 'create table tmp_clr_schedu_datediff as
       SELECT /*+ PARALLEL(4) */
                 account_number,
                  MIN (
                     CASE
                        WHEN component_name = ''PRINCIPAL''
                        THEN
                           schedule_due_date
                     END)
                     p_due_date,
                  MIN (
                     CASE
                        WHEN component_name = ''PRINCIPAL'' THEN schedule_st_date
                     END)
                     p_prev_date,
                    MIN (
                       CASE
                          WHEN component_name = ''PRINCIPAL''
                          THEN
                             schedule_due_date
                       END)
                  - MIN (
                       CASE
                          WHEN component_name = ''PRINCIPAL''
                          THEN
                             schedule_st_date
                       END)
                     p_diff,
                  MIN (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN schedule_due_date
                     END)
                     i_due_date,
                  MIN (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN schedule_st_date
                     END)
                     i_prev_date,
                    MIN (
                       CASE
                          WHEN component_name = ''MAIN_INT''
                          THEN
                             schedule_due_date
                       END)
                  - MIN (
                       CASE
                          WHEN component_name = ''MAIN_INT''
                          THEN
                             schedule_st_date
                       END)
                     i_diff
             FROM tmp_clr_cltb_schedule1
            WHERE     component_name IN (''PRINCIPAL'', ''MAIN_INT'')
                  AND schedule_due_date >= '''||v_date||'''
         GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_schedu_datediff as
       SELECT /*+ PARALLEL(4) */
                 account_number,
                  MIN (
                     CASE
                        WHEN component_name = ''PRINCIPAL''
                        THEN
                           schedule_due_date
                     END)
                     p_due_date,
                  MIN (
                     CASE
                        WHEN component_name = ''PRINCIPAL'' THEN schedule_st_date
                     END)
                     p_prev_date,
                    MIN (
                       CASE
                          WHEN component_name = ''PRINCIPAL''
                          THEN
                             schedule_due_date
                       END)
                  - MIN (
                       CASE
                          WHEN component_name = ''PRINCIPAL''
                          THEN
                             schedule_st_date
                       END)
                     p_diff,
                  MIN (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN schedule_due_date
                     END)
                     i_due_date,
                  MIN (
                     CASE
                        WHEN component_name = ''MAIN_INT'' THEN schedule_st_date
                     END)
                     i_prev_date,
                    MIN (
                       CASE
                          WHEN component_name = ''MAIN_INT''
                          THEN
                             schedule_due_date
                       END)
                  - MIN (
                       CASE
                          WHEN component_name = ''MAIN_INT''
                          THEN
                             schedule_st_date
                       END)
                     i_diff
             FROM tmp_clr_cltb_schedule1
            WHERE     component_name IN (''PRINCIPAL'', ''MAIN_INT'')
                  AND schedule_due_date >= '''||v_date||'''
         GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_clr_lff_line
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR LFF LINE',
                   'CLR LFF LINE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_lff_line';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_lff_line';
       v_sql := 'create table tmp_clr_lff_line as
       SELECT /*+ PARALLEL(auto) */ 
        dflt_settle_ac,
                a.linked_ref_no line_code,
                b.amount approved_lff,
                product_code
           FROM tmp_clr_sttm_acct_linkages a,
                (SELECT *
                   FROM tmp_clr_fcc_combine
                  WHERE product_code IN(''UNLL'',
                                         ''COLC'',
                                        ''BAIM'',
                                        ''USLL'',
                                        ''CULC'')) b
          WHERE a.cust_ac_no = b.dflt_settle_ac';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_lff_line as
       SELECT /*+ PARALLEL(auto) */ 
        dflt_settle_ac,
                a.linked_ref_no line_code,
                b.amount approved_lff,
                product_code
           FROM tmp_clr_sttm_acct_linkages a,
                (SELECT *
                   FROM tmp_clr_fcc_combine
                  WHERE product_code IN(''UNLL'',
                                         ''COLC'',
                                        ''BAIM'',
                                        ''USLL'',
                                        ''CULC'')) b
          WHERE a.cust_ac_no = b.dflt_settle_ac';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_repayment_freq
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'LOAN REPAYMENT FREQ',
                   'LOAN REPAYMENT FREQ',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_loan_repay_freq1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_loan_repay_freq1';
     v_sql := 'create table tmp_clr_loan_repay_freq1 as
    SELECT /*+ PARALLEL(auto) */ 
       account_number,component_name,unit,max(NO_OF_SCHEDULES) NO_OF_SCHEDULES from tmp_clr_cltb_sched_compo 
       where component_name IN (''MAIN_INT'',''PRINCIPAL'')
    and SCHEDULE_TYPE=''P''
   group by account_number,component_name,unit';
   execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_loan_repay_freq1 as
    SELECT /*+ PARALLEL(auto) */ 
       account_number,component_name,unit,max(NO_OF_SCHEDULES) NO_OF_SCHEDULES from tmp_clr_cltb_sched_compo 
       where component_name IN (''MAIN_INT'',''PRINCIPAL'')
    and SCHEDULE_TYPE=''P''
   group by account_number,component_name,unit';
   execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_loan_repay_freq';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_clr_loan_repay_freq';
     v_sql := 'create table tmp_clr_loan_repay_freq as
    SELECT /*+ PARALLEL(auto) */ 
       pr.account_number,
                  MAX (
                     CASE
                        WHEN pr.component_name = ''PRINCIPAL'' THEN unit
                        ELSE NULL
                     END)
                     principal_freq,
                  MAX (
                     CASE
                        WHEN pr.component_name = ''MAIN_INT'' THEN unit
                        ELSE NULL
                     END)
                     int_freq
             FROM tmp_clr_loan_repay_freq1 pr
             group by pr.account_number';
   execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    else
   v_sql := 'create table tmp_clr_loan_repay_freq as
    SELECT /*+ PARALLEL(auto) */ 
       pr.account_number,
                  MAX(
                     CASE
                        WHEN pr.component_name = ''PRINCIPAL'' THEN unit
                        ELSE NULL
                     END)
                     principal_freq,
                  MAX (
                     CASE
                        WHEN pr.component_name = ''MAIN_INT'' THEN unit
                        ELSE NULL
                     END)
                     int_freq
             FROM tmp_clr_loan_repay_freq1 pr
             group by pr.account_number';
   execute immediate v_sql;
   v_rows_processed := SQL%ROWCOUNT;
   end if;
   
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_gen_obiee_spool
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'GEN OBIEE SPOOL',
                   'GEN OBIEE SPOOL',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      
      ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (010,
                   'GEN OBIEE SPOOL break 1',
                   'GEN OBIEE SPOOL break 1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_obiee_spool_1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_obiee_spool_1';
       v_sql := 'create table tmp_clr_obiee_spool_1 as
       SELECT /*+ PARALLEL(auto) */ 
            cust_id,a.liability_no,trim(a.customer_name1) customer_name,a.customer_type,settlement_account,reference_date,
            ref_no,product_code,product_name,currency_short_name,currency_type,loan_amount_tcy,loan_amount_lcy,LIMIT,
            principal_outstanding_bal_tcy,principal_outstanding_bal_lcy,a.booking_date,value_date, maturity_date, process_date,
            rate,tenor,contract_status,branch_code,branch_name,account_officer_code,team_code,accountofficer_name,team_name,group_code,
            group_name,region_code,region_name,division_code,division_name,source,last_credit_date,last_credit_amount,
            director_1_name,director_2_name,director_3_name,director_4_name,cbn_sub_sector,cbn_sector,cbn_sector_adjusted,obligor_risk_rating,
            asset_gl,total_collection_3m,total_collection_3m_lcy,total_collection_6m,total_collection_6m_lcy,total_collection_12m,
            total_collection_12m_lcy,ngaap_classification,ngaap_provision,collection_exposure_ratio_3m,
            collection_exposure_ratio_6m,collection_exposure_ratio_12m,exposure_type,
            facility_type,'' '' collateral_desc,
            collateral_type,'' '' collateral_status,group_obligor_name,name_of_borrowers,interest,crms_borrowers_code_no,
            rc_sr_br_nid,rel_to_reporting_inst,related_interest_name,bvn bvn_number,fcubs_region,fcubs_risk,fcubs_sector,fcubs_sub_sector,
            nvl(trim(liability_name),trim(a.customer_name1)) liability_name, overall_limit_amount,fcubs_classification,original_book_date,
         case when product_code in (''CUBD'',''BKGT'',''APGT'',''PFBD'',''PFBI'',
            ''RTBD'',''TIBD'',''BTBD'',''APRV'',''OTGT'',''APGI'',''IDMT'',''UNLL'',''COLC'') then c.limit_amount
            else a.facility_limit_amount end
            facility_limit_amount,
            sysdate valuation_date,
            a.line_code,original_amt_disbursed,int_receivable_tcy,int_receivable_lcy,'' '' group_head_name,
            total_exposure_tcy,total_exposure_lcy,collateral_attached,collateral_value,mis_code_settlement,'' '' tin,
            nvl(debit_interest_3mth,0) debit_interest,
            crms_code,
                               CASE
                   WHEN total_exposure_kcy = 0
                   THEN
                      0
                   ELSE
                      ROUND (
                         (  (total_exposure_lcy / total_exposure_kcy)
                          * collateral_value),
                         2)
                END
                   collateral_per_facility
        from tmp_clr_consolidate_obi3 a, STGLIVE.tmp_consol_collection_final b,tmp_clr_od_limit_amt c
        where a.ref_no = b.account_number(+)
        and   a.cust_id = c.customer_id(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_obiee_spool_1 as
       SELECT /*+ PARALLEL(auto) */ 
            cust_id,a.liability_no,trim(a.customer_name1) customer_name,a.customer_type,settlement_account,reference_date,
            ref_no,product_code,product_name,currency_short_name,currency_type,loan_amount_tcy,loan_amount_lcy,LIMIT,
            principal_outstanding_bal_tcy,principal_outstanding_bal_lcy,a.booking_date,value_date, maturity_date, process_date,
            rate,tenor,contract_status,branch_code,branch_name,account_officer_code,team_code,accountofficer_name,team_name,group_code,
            group_name,region_code,region_name,division_code,division_name,source,last_credit_date,last_credit_amount,
            director_1_name,director_2_name,director_3_name,director_4_name,cbn_sub_sector,cbn_sector,cbn_sector_adjusted,obligor_risk_rating,
            asset_gl,total_collection_3m,total_collection_3m_lcy,total_collection_6m,total_collection_6m_lcy,total_collection_12m,
            total_collection_12m_lcy,ngaap_classification,ngaap_provision,collection_exposure_ratio_3m,
            collection_exposure_ratio_6m,collection_exposure_ratio_12m,exposure_type,facility_type,'' '' collateral_desc,
            collateral_type,'' '' collateral_status,group_obligor_name,name_of_borrowers,interest,crms_borrowers_code_no,
            rc_sr_br_nid,rel_to_reporting_inst,related_interest_name,bvn bvn_number,fcubs_region,fcubs_risk,fcubs_sector,fcubs_sub_sector,
            nvl(trim(liability_name),trim(a.customer_name1)) liability_name, overall_limit_amount,fcubs_classification,original_book_date,
         case when product_code in (''CUBD'',''BKGT'',''APGT'',''PFBD'',''PFBI'',
            ''RTBD'',''TIBD'',''BTBD'',''APRV'',''OTGT'',''APGI'',''IDMT'',''UNLL'',''COLC'') then c.limit_amount
            else a.facility_limit_amount end
            facility_limit_amount,
            sysdate valuation_date,
            a.line_code,original_amt_disbursed,int_receivable_tcy,int_receivable_lcy,'' '' group_head_name,
            total_exposure_tcy,total_exposure_lcy,collateral_attached,collateral_value,mis_code_settlement,'' '' tin,
            nvl(debit_interest_3mth,0) debit_interest,
            crms_code,
                               CASE
                   WHEN total_exposure_kcy = 0
                   THEN
                      0
                   ELSE
                      ROUND (
                         (  (total_exposure_lcy / total_exposure_kcy)
                          * collateral_value),
                         2)
                END
                   collateral_per_facility
        from tmp_clr_consolidate_obi3 a, STGLIVE.tmp_consol_collection_final b,tmp_clr_od_limit_amt c
        where a.ref_no = b.account_number(+)
        and   a.cust_id = c.customer_id(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     
     ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (011,
                   'GEN OBIEE SPOOL break 2',
                   'GEN OBIEE SPOOL break 2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
     
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_obiee_spool';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_obiee_spool';
       v_sql := 'create table rev_obiee_spool as
       SELECT /*+ PARALLEL(auto) */ 
            distinct *
               from tmp_clr_obiee_spool_1';
       execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table rev_obiee_spool as
       SELECT /*+ PARALLEL(auto) */ 
            distinct *
               from tmp_clr_obiee_spool_1';
       execute immediate v_sql;
   v_rows_processed := SQL%ROWCOUNT;
   end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_sched_minprin_morat
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     
     select trunc(in_date) into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'MIN PRICIPAL SCHEDULE',
                   'MIN PRICIPAL SCHEDULE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_min_sched_princ';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_min_sched_princ';
       v_sql := 'create table tmp_clr_min_sched_princ as
      SELECT /*+ PARALLEL(4) */
                 account_number, MIN (schedule_due_date) schedule_due_date
             FROM tmp_clr_cltb_schedule1 x
            WHERE schedule_due_date >= '''||v_date||''' AND component_name = ''PRINCIPAL''
         GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_min_sched_princ as
      SELECT /*+ PARALLEL(4) */
                 account_number, MIN (schedule_due_date) schedule_due_date
             FROM tmp_clr_cltb_schedule1 x
            WHERE schedule_due_date >= '''||v_date||''' AND component_name = ''PRINCIPAL''
         GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and  lower(table_name)='tmp_clr_sched_date';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
     end;
      
     if(tab_cnt)>=1 Then
     execute immediate 'drop table tmp_clr_sched_date';
      v_sql := 'create table tmp_clr_sched_date as
      SELECT /*+ PARALLEL(4) */
               a.account_number,
                a.component_name,
                c.schedule_due_date,
                a.amount_due,
                (a.amount_due - a.amount_settled) outstanding
          FROM tmp_clr_cltb_schedule1 a,
                tmp_clr_min_sched_princ c
          WHERE a.account_number = c.account_number
                AND a.component_name = ''PRINCIPAL''
          AND a.schedule_due_date = c.schedule_due_date';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_sched_date as
      SELECT /*+ PARALLEL(4) */
               a.account_number,
                a.component_name,
                c.schedule_due_date,
                a.amount_due,
                (a.amount_due - a.amount_settled) outstanding
          FROM tmp_clr_cltb_schedule1 a,
                tmp_clr_min_sched_princ c
          WHERE  a.account_number = c.account_number
                AND a.component_name = ''PRINCIPAL''
           AND a.schedule_due_date = c.schedule_due_date';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_sched_mininterest
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select trunc(in_date) into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'MIN INTEREST SCHEDULE',
                   'MIN INTEREST SCHEDULE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_min_interest_due';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_min_interest_due';
       v_sql := 'create table tmp_clr_min_interest_due as
      SELECT /*+ PARALLEL(4) */
                 account_number, MIN (schedule_due_date) schedule_due_date
             FROM tmp_clr_cltb_schedule1 x
            WHERE schedule_due_date >='''||v_date||''' AND component_name = ''MAIN_INT''
         GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_min_interest_due as
      SELECT /*+ PARALLEL(4) */
                 account_number, MIN (schedule_due_date) schedule_due_date
             FROM tmp_clr_cltb_schedule1 x
            WHERE schedule_due_date >='''||v_date||''' AND component_name = ''MAIN_INT''
         GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
   
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_interest_amt_due';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_interest_amt_due';
       v_sql := 'create table tmp_clr_interest_amt_due as
      SELECT /*+ PARALLEL(4) */
               a.account_number,
                a.amount_due int_amount_due
          FROM tmp_clr_cltb_schedule1 a,
                tmp_clr_min_interest_due c
          WHERE  a.account_number = c.account_number
                AND a.component_name = ''MAIN_INT''
                AND a.schedule_due_date = c.schedule_due_date';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_interest_amt_due as
      SELECT /*+ PARALLEL(4) */
               a.account_number,
                a.amount_due int_amount_due
          FROM tmp_clr_cltb_schedule1 a,
                tmp_clr_min_interest_due c
          WHERE  a.account_number = c.account_number
                AND a.component_name = ''MAIN_INT''
                AND a.schedule_due_date = c.schedule_due_date';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_unpaid_int_scheddate
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'UNPAID INTEREST SCHEDULE',
                   'UNPAID INTEREST SCHEDULE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_unpaid_interest_amt';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_unpaid_interest_amt';
    v_sql := 'create table tmp_clr_unpaid_interest_amt as
      SELECT /*+ PARALLEL(4) */
                 a.account_number,
       unpo_settlement_ccy,
                    CASE
            WHEN total_unsettled_amount_lcy = 0 THEN 0
                 ELSE unpo_days_overdue
               END
            unpo_days_overdue,
            unpo_sched_start_date,
            unpo_sched_due_date,
            nvl(c.amount_due,0) unpo_principal_amount,
           nvl(unpo_principal_settled,0) unpo_principal_settled,
           nvl(unpo_accrued_amount,0) unpo_accrued_amount,
           nvl(unpo_int_settled,0) unpo_int_settled,
           nvl(b.int_amount_due,0) unpo_int_amount,
             CASE
                           WHEN unsettled_principal_amount < 0 THEN 0
                           ELSE unsettled_principal_amount
                        END
                           unsettled_principal_amount,
                        CASE
                           WHEN unsettled_interest_amount < 0 THEN 0
                           ELSE unsettled_interest_amount
                        END
                           unsettled_interest_amount,
                        CASE
                           WHEN total_unsettled_amount_lcy < 0 THEN 0
                           ELSE total_unsettled_amount_lcy
                        END
                           total_unsettled_amount_lcy
                   FROM tmp_clr_main_unpaidoblign a,
                        tmp_clr_interest_amt_due b,
                        tmp_clr_sched_date c
                  WHERE     a.account_number = b.account_number(+)
                        AND a.account_number = c.account_number(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_unpaid_interest_amt as
      SELECT /*+ PARALLEL(4) */
                 a.account_number,
       unpo_settlement_ccy,
                    CASE
            WHEN total_unsettled_amount_lcy = 0 THEN 0
                 ELSE unpo_days_overdue
               END
            unpo_days_overdue,
            unpo_sched_start_date,
            unpo_sched_due_date,
            nvl(c.amount_due,0) unpo_principal_amount,
           nvl(unpo_principal_settled,0) unpo_principal_settled,
           nvl(unpo_accrued_amount,0) unpo_accrued_amount,
           nvl(unpo_int_settled,0) unpo_int_settled,
           nvl(b.int_amount_due,0) unpo_int_amount,
             CASE
                           WHEN unsettled_principal_amount < 0 THEN 0
                           ELSE unsettled_principal_amount
                        END
                           unsettled_principal_amount,
                        CASE
                           WHEN unsettled_interest_amount < 0 THEN 0
                           ELSE unsettled_interest_amount
                        END
                           unsettled_interest_amount,
                        CASE
                           WHEN total_unsettled_amount_lcy < 0 THEN 0
                           ELSE total_unsettled_amount_lcy
                        END
                           total_unsettled_amount_lcy
                   FROM tmp_clr_main_unpaidoblign a,
                        tmp_clr_interest_amt_due b,
                        tmp_clr_sched_date c
                  WHERE     a.account_number = b.account_number(+)
                        AND a.account_number = c.account_number(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
  
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_clr_mora_flag
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select trunc(in_date) into v_date from clr_date_control;

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR MORATORIUM FLAG',
                   'CLR MORATORIUM FLAG',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_mora_flag';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_mora_flag';
       v_sql := 'create table tmp_clr_mora_flag as
       SELECT /*+ PARALLEL(4) */
               a.account_number,
                CASE
                   WHEN     c.principal_freq = ''B''
                        AND a.schedule_due_date IS NOT NULL
                        AND b.exposure_type = ''DIRECT''
                   THEN
                      ''Y''
                   WHEN  c.principal_freq = ''M''
                        AND (a.schedule_due_date - trunc(sysdate-1)) > 33
                        AND b.exposure_type = ''DIRECT''
                   THEN
                      ''Y''
                   WHEN     c.principal_freq = ''Q''
                        AND (a.schedule_due_date - trunc(sysdate-1)) > 94
                        AND b.exposure_type = ''DIRECT''
                   THEN
                      ''Y''
                   WHEN     c.principal_freq = ''Y''
                        AND (a.schedule_due_date - trunc(sysdate-1)) > 368
                        AND b.exposure_type = ''DIRECT''
                   THEN
                      ''Y''
                   ELSE
                      ''N''
                END
                   mor_flag
           FROM tmp_clr_sched_date a,
                (SELECT *
                   FROM stglive.obiee_spool_n
                  WHERE reference_date = '''||v_date||''') b, 
                tmp_clr_loan_repay_freq c
          WHERE     a.account_number = b.ref_no(+)
                AND a.account_number = c.account_number(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_mora_flag as
       SELECT /*+ PARALLEL(4) */
               a.account_number,
                CASE
                   WHEN     c.principal_freq = ''B''
                        AND a.schedule_due_date IS NOT NULL
                        AND b.exposure_type = ''DIRECT''
                   THEN
                      ''Y''
                   WHEN  c.principal_freq = ''M''
                        AND (a.schedule_due_date - trunc(sysdate-1)) > 33
                        AND b.exposure_type = ''DIRECT''
                   THEN
                      ''Y''
                   WHEN     c.principal_freq = ''Q''
                        AND (a.schedule_due_date - trunc(sysdate-1)) > 94
                        AND b.exposure_type = ''DIRECT''
                   THEN
                      ''Y''
                   WHEN     c.principal_freq = ''Y''
                        AND (a.schedule_due_date - trunc(sysdate-1)) > 368
                        AND b.exposure_type = ''DIRECT''
                   THEN
                      ''Y''
                   ELSE
                      ''N''
                END
                   mor_flag
           FROM tmp_clr_sched_date a,
                (SELECT *
                   FROM stglive.obiee_spool_n
                  WHERE reference_date = '''||v_date||''') b, 
                tmp_clr_loan_repay_freq c
          WHERE     a.account_number = b.ref_no(+)
                AND a.account_number = c.account_number(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_riskasset_report
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR RISKASSET COMPUTE',
                   'CLR RISKASSET COMPUTE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_riskasset';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_riskasset';
       v_sql := 'create table tmp_clr_riskasset as
       SELECT /*+ PARALLEL(4) */
       cust_id,
       case when LENGTH (new_ref) < 10
                                        AND SUBSTR (new_ref, 1, 1) <> ''0''
                                   THEN
                                      ''0'' || new_ref
                                   ELSE
                                      new_ref
                                END
                                ref_no,
                        customer_name,
                        cbn_sector,
                        '' '' sector_code,
                        cbn_sub_sector,
                        '' '' sub_sector_code,
                        cbn_sector_adjusted,
                        obligor_risk_rating,
                        pwc_classification,
                        cbn_classification,
                        cbn_classification_date,
                        ifrs_classification,
                        impairment_amount,
                        mis_group extension_amendment,
                        mis_division syndicated_facilities,
                        '' '' approved_trade_cycle,
                        '' '' eir_rate,
                        '' '' pd,
                        '' '' lgd,
                        '' '' ccy,
                        '' '' ead
        from(
SELECT CASE
         WHEN LENGTH (loan_reference) < 10
         THEN
          LPAD (loan_reference, 10, 0)
                                           ELSE
                                              loan_reference
                                        END
                                           new_ref,
                                        a.*
                                   FROM riskassetreport.usr_clr_obie_extra a)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_riskasset as
       SELECT /*+ PARALLEL(4) */
       cust_id,
       case when LENGTH (new_ref) < 10
                                        AND SUBSTR (new_ref, 1, 1) <> ''0''
                                   THEN
                                      ''0'' || new_ref
                                   ELSE
                                      new_ref
                                END
                                ref_no,
                        customer_name,
                        cbn_sector,
                        '' '' sector_code,
                        cbn_sub_sector,
                        '' '' sub_sector_code,
                        cbn_sector_adjusted,
                        obligor_risk_rating,
                        pwc_classification,
                        cbn_classification,
                        cbn_classification_date,
                        ifrs_classification,
                        impairment_amount,
                        mis_group extension_amendment,
                        mis_division syndicated_facilities,
                        '' '' approved_trade_cycle,
                        '' '' eir_rate,
                        '' '' pd,
                        '' '' lgd,
                        '' '' ccy,
                        '' '' ead
        from(
SELECT CASE
         WHEN LENGTH (loan_reference) < 10
         THEN
          LPAD (loan_reference, 10, 0)
                                           ELSE
                                              loan_reference
                                        END
                                           new_ref,
                                        a.*
                                   FROM riskassetreport.usr_clr_obie_extra a)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_odintprin_charges
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR ODINTPRINC COMPUTE',
                   'CLR ODINTPRINC COMPUTE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_odintprin_penal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_odintprin_penal';
       v_sql := 'create table tmp_clr_odintprin_penal as
       SELECT /*+ PARALLEL(4) */
       nvl(SUM(amount_due - amount_settled),0) penal_charges, account_number
                     FROM tmp_clr_cltb_schedule1
                    WHERE component_name IN (''ODIN_PNLTY'',''ODPR_PNLTY'',''ODPR2_PNLRT'')
                 GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_odintprin_penal as
       SELECT /*+ PARALLEL(4) */
       nvl(SUM(amount_due - amount_settled),0) penal_charges, account_number
                     FROM tmp_clr_cltb_schedule1
                    WHERE component_name IN (''ODIN_PNLTY'',''ODPR_PNLTY'',''ODPR2_PNLRT'')
                 GROUP BY account_number';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_new_clr_mismapping
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'NEW CLR MIS',
                   'NEW CLR MIS',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_mis_cust_obiee';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_mis_cust_obiee';
       v_sql := 'create table tmp_clr_mis_cust_obiee as
       SELECT /*+ PARALLEL(4) */
       cust_no, cust_ac_no, ac_open_date,account_officer_code
                   FROM (SELECT a.cust_id cust_no,
                                cod_acct_no cust_ac_no,
                                ac_open_date,
                                ROW_NUMBER ()
                                OVER (PARTITION BY a.cust_id
                                      ORDER BY ac_open_date DESC)
                                   RANK,
                                account_officer_code
                           FROM tmp_clr_sttm_cust_acct_od a,(select * from stglive.obiee_spool_n where reference_date='''||v_date||''') b
                          WHERE a.cust_id = b.cust_id
                          and account_officer_code NOT IN (''RBD804'',
                                                    ''MDA111'',
                                                    ''ALM611'',
                                                    ''RLR711''))
                  WHERE RANK = 1';
         execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_mis_cust_obiee as
       SELECT /*+ PARALLEL(4) */
       cust_no, cust_ac_no, ac_open_date,account_officer_code
                   FROM (SELECT a.cust_id cust_no,
                                cod_acct_no cust_ac_no,
                                ac_open_date,
                                ROW_NUMBER ()
                                OVER (PARTITION BY a.cust_id
                                      ORDER BY ac_open_date DESC)
                                   RANK,
                                account_officer_code
                    FROM tmp_clr_sttm_cust_acct_od a,(select * from stglive.obiee_spool_n where reference_date='''||v_date||''') b
                          WHERE a.cust_id = b.cust_id
                          and account_officer_code NOT IN (''RBD804'',
                                                    ''MDA111'',
                                                    ''ALM611'',
                                                    ''RLR711''))
                  WHERE RANK = 1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_mis_cust_obi';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_mis_cust_obi';
       v_sql := 'create table tmp_clr_mis_cust_obi as
       SELECT /*+ PARALLEL(4) */
       cust_no,cust_ac_no,account_officer_code ao_code,accountofficer_name,
                group_name,
                division_name
        from tmp_clr_mis_cust_obiee a,tmp_clr_new_mis b
        where a.account_officer_code=accountofficer_code(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_mis_cust_obi as
       SELECT /*+ PARALLEL(4) */
       cust_no,cust_ac_no,account_officer_code ao_code,accountofficer_name,
                group_name,
                division_name
        from tmp_clr_mis_cust_obiee a,tmp_clr_new_mis b
        where a.account_officer_code=accountofficer_code(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_clr_mis
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'NEW CLR MISS',
                   'NEW CLR MISS',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_new_mis';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_new_mis';
    v_sql := 'create table tmp_clr_new_mis as
    SELECT /*+ PARALLEL(auto) */ 
    distinct
    mis_codes accountofficer_code,
    accountofficer_names accountofficer_name,
         team_codes team_code,
         team_names team_name,
         group_head_code group_code,
         group_head_name group_name,
         region_codes region_code,
         region_names region_name,
         division_codes division_code,
         division_names division_name
         FROM stglive.group_head_crm';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_new_mis as
    SELECT /*+ PARALLEL(auto) */ 
    distinct
    mis_codes accountofficer_code,
    accountofficer_names accountofficer_name,
         team_codes team_code,
         team_names team_name,
         group_head_code group_code,
         group_head_name group_name,
         region_codes region_code,
         region_names region_name,
         division_codes division_code,
         division_names division_name
         FROM stglive.group_head_crm';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_od_debit_penal
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select trunc(in_date) into v_date from clr_date_control;

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'OD DEBIT PENAL',
                   'OD DEBIT PENAL',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_od_debit_penal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_od_debit_penal';
    v_sql := 'create table tmp_clr_od_debit_penal as
    SELECT /*+ PARALLEL(auto) */ 
   account_number ac_no,penal_charge_3mth penal_charge,debit_interest_3mth debit_interest
    from tmp_consol_collection_final
   where account_number in (select distinct settlement_account
                                  FROM stglive.obiee_spool_n where reference_date='''||v_date||''')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_od_debit_penal as
    SELECT /*+ PARALLEL(auto) */ 
   account_number ac_no,penal_charge_3mth penal_charge,debit_interest_3mth debit_interest
    from tmp_consol_collection_final
   where account_number in (select distinct settlement_account
                                  FROM stglive.obiee_spool_n where reference_date='''||v_date||''')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_cbn_pwd_classic
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CBN PWD CLASSIC',
                   'CBN PWD CLASSIC',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cbn_pwd_classic';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cbn_pwd_classic';
       v_sql := 'create table tmp_clr_cbn_pwd_classic as
       SELECT /*+ PARALLEL(auto) */ 
        cust_id,
                        newref ref_no,
                        customer_name,
                        cbn_sector,
                        '' '' sector_code,
                        cbn_sub_sector,
                        '' '' sub_sector_code,
                        cbn_sector_adjusted,
                        obligor_risk_rating,
                        pwc_classification,
                        cbn_classification,
                        cbn_classification_date,
                        ifrs_classification,
                        impairment_amount,
                        mis_group extension_amendment,
                        mis_division syndicated_facilities,
                        '' '' approved_trade_cycle,
                        '' '' eir_rate,
                        '' '' pd,
                        '' '' lgd,
                        '' '' ccy,
                        '' '' ead
                   FROM (SELECT CASE
                                   WHEN     LENGTH (new_ref) < 10
                                        AND SUBSTR (new_ref, 1, 1) <> ''0''
                                   THEN
                                      ''0'' || new_ref
                                   ELSE
                                      new_ref
                                END
                                   newref,
                                b.*
                           FROM (SELECT CASE
                                           WHEN LENGTH (loan_reference) < 10
                                           THEN
                                              LPAD (loan_reference, 10, 0)
                                           ELSE
                                              loan_reference
                                        END
                                           new_ref,
                                        a.*
                                   FROM riskassetreport.usr_clr_obie_extra a)b)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cbn_pwd_classic as
       SELECT /*+ PARALLEL(auto) */ 
        cust_id,
                        newref ref_no,
                        customer_name,
                        cbn_sector,
                        '' '' sector_code,
                        cbn_sub_sector,
                        '' '' sub_sector_code,
                        cbn_sector_adjusted,
                        obligor_risk_rating,
                        pwc_classification,
                        cbn_classification,
                        cbn_classification_date,
                        ifrs_classification,
                        impairment_amount,
                        mis_group extension_amendment,
                        mis_division syndicated_facilities,
                        '' '' approved_trade_cycle,
                        '' '' eir_rate,
                        '' '' pd,
                        '' '' lgd,
                        '' '' ccy,
                        '' '' ead
                   FROM (SELECT CASE
                                   WHEN     LENGTH (new_ref) < 10
                                        AND SUBSTR (new_ref, 1, 1) <> ''0''
                                   THEN
                                      ''0'' || new_ref
                                   ELSE
                                      new_ref
                                END
                                   newref,
                                b.*
                           FROM (SELECT CASE
                                           WHEN LENGTH (loan_reference) < 10
                                           THEN
                                              LPAD (loan_reference, 10, 0)
                                           ELSE
                                              loan_reference
                                        END
                                           new_ref,
                                        a.*
                                   FROM riskassetreport.usr_clr_obie_extra a)b)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_is_staff_flag
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     select trunc(in_date) into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'IS STAFF FLAG',
                   'IS STAFF FLAG',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_is_staff_flag';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_is_staff_flag';
       v_sql := 'create table tmp_clr_is_staff_flag as
       SELECT /*+ PARALLEL(auto) */ 
        cust_id cust_no,''Y'' staff_flag
           FROM tmp_clr_sttm_cust_acct_od
          WHERE  record_stat = ''O''
                AND cod_prod = ''010003''
                AND cust_id in(SELECT distinct cust_id
                                  FROM stglive.obiee_spool_n where reference_date= '''||v_date||''' AND cust_id IS NOT NULL)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_is_staff_flag as
       SELECT /*+ PARALLEL(auto) */ 
        cust_id cust_no,''Y'' staff_flag
           FROM tmp_clr_sttm_cust_acct_od
          WHERE  record_stat = ''O''
                AND cod_prod = ''010003''
                AND cust_id in(SELECT distinct cust_id
                        FROM stglive.obiee_spool_n where reference_date= '''||v_date||''' AND cust_id IS NOT NULL)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_gen_new_clr
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (32000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'NEW CLR PROCESS',
                   'NEW CLR PROCESS',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_new_clr_intro';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_new_clr_intro';
       v_sql := 'create table tmp_new_clr_intro as
       SELECT /*+ PARALLEL(auto) */ 
        distinct reference_date,
                               a.ref_no,
                               a.cust_id,
                               nvl(a.customer_name,liability_name) customer_name,
                               a.customer_type,
                               a.settlement_account,
                               a.product_code,
                               a.product_name,
                               a.branch_name,
                               a.currency_short_name,
                               a.currency_type,
                               a.loan_amount_tcy,
                               a.loan_amount_lcy,
                               LIMIT,
                               principal_outstanding_bal_tcy,
                               principal_outstanding_bal_lcy,
                               a.booking_date,
                               a.value_date,
                               a.maturity_date,
                               a.process_date,
                               a.rate,
                               a.tenor,
                               a.contract_status,
                               a.branch_code,
                               nvl(l.branch_address,''UNDEFINED'') branch_location,
                               nvl(l.state,''UNDEFINED'') branch_state,
                               account_officer_code,
                               accountofficer_name,
                               team_code,
                               team_name,
                               group_code,
                               group_name,
                               region_code,
                               region_name,
                               division_code,
                               division_name,
                               case when trim(account_officer_code) is null and trim(a.customer_type)=''I'' then ''RETAIL BANKING DIVISION''
                                    when trim(account_officer_code) is null and trim(a.customer_type)=''C'' then ''COMMERCIAL BANKING DIVISION''
                                    when trim(division_name) is null and trim(a.customer_type)=''I'' then ''RETAIL BANKING DIVISION''
                                    when trim(division_name) is null and trim(a.customer_type)=''C'' then ''COMMERCIAL BANKING DIVISION''
                                    when trim(division_name)=''CORPORATE TREASURY'' and trim(a.customer_type)=''I'' then ''RETAIL BANKING DIVISION''
                                    when trim(division_name)=''CORPORATE TREASURY'' and trim(a.customer_type)=''C'' then ''COMMERCIAL BANKING DIVISION''
                                   else '' ''
                                end alternate_division_name,
                               source,
                             a.fcubs_region, a.fcubs_risk, a.fcubs_sector, a.fcubs_sub_sector,
                               last_credit_date,
                               last_credit_amount,
                               director_1_name,
                               director_2_name,
                               director_3_name,
                               director_4_name,
                               a.asset_gl,
                               a.rc_sr_br_nid,
                               lcy_credit_1wk total_collection_1wk_lcy,
                               lcy_credit_1mth total_collection_1m_lcy,
                               total_collection_3m,
                               total_collection_3m_lcy,
                               total_collection_6m,
                               total_collection_6m_lcy,
                               total_collection_12m,
                               total_collection_12m_lcy,
                               collection_exposure_ratio_3m,
                               collection_exposure_ratio_6m,
                               collection_exposure_ratio_12m,
            case when a.source=''OD'' and a.facility_type is null then ''OVERDRAFT'' else a.facility_type end facility_type,
                               collateral_value,
                               nvl(trim(group_obligor_name),a.liability_name) group_obligor_name,
                               name_of_borrowers,
                               interest,
                               crms_borrowers_code_no,
                               rel_to_reporting_inst,
                               related_interest_name,
                               group_head_name,
                               bvn_number,
                               liability_no,
                               a.line_code,
                               liability_name,
                               overall_limit_amount,
                               original_book_date,
                               facility_limit_amount,
                               int_receivable_tcy,
                               int_receivable_lcy,
                               total_exposure_tcy,
                              (nvl(o.penal_charges + penal_charge_3mth, 0) * mid_rate) + total_exposure_lcy  total_exposure_lcy,
                               mis_code_settlement,
                               a.tin,
                               a.crms_code,
                          a.cbn_sector cbn_sector,
                d.sector_code,
                a.cbn_sub_sector,
                sub_sector_code,
                a.cbn_sector_adjusted,
                nvl(a.obligor_risk_rating,''3'') obligor_risk_rating,
                pwc_classification,
                ngaap_classification,ngaap_provision,
                impairment_amount,
                a.valuation_date,
                NVL(cbn_classification, ''PERFORMING'') cbn_classification,
                NVL(ifrs_classification, 1) ifrs_classification,
                case when trim(a.facility_type) is null and trim(a.exposure_type) is null then ''DIRECT''
                     when trim(a.facility_type) in (''LC'',''BOND_GTEE'') and trim(a.exposure_type) is null then ''CONTINGENT''
                     else trim(a.exposure_type) 
                end exposure_type,
                m.approved_lff,
                e.user_ref_no ead,
                a.collateral_attached,
                a.collateral_per_facility,
                a.collateral_status,
                a.collateral_desc,a.collateral_type,
                CASE
      WHEN a.product_code IN (''KPLS'',
                                         ''KPLA'',
                                         ''MPTA'',
                                         ''CDMN'')
                   THEN
                      ''PERSONAL LOAN''
                   WHEN a.product_code IN (''SCAS'')
                   THEN
                      ''STAFF LOAN''
                   WHEN a.product_code IN (''KMGL'')
                   THEN
                      ''MORTGAGE LOAN''
                ELSE
                nvl(trim(r.adj_facility_type),trim(a.facility_type)) end adj_facility_type,
                NVL(((NVL(o.penal_charges + penal_charge_3mth, 0) * c.mid_rate) + a.total_exposure_lcy) * j.percentage,0)
                   expected_collection,
                CASE
               WHEN trim(a.facility_type) in (''PERSONAL LOAN'',''PROJECT FINANCE LOAN'',''TERM LOAN'',''ON - LENDING - CBN'',''ON - LENDING'',''STAFF LOAN'',
                        ''MORTGAGE LOAN'') THEN 20
               WHEN trim(a.facility_type) in (''CREDIT CARD'') THEN 15
               WHEN((NVL(o.penal_charges + penal_charge_3mth, 0) * c.mid_rate)
                         + a.total_exposure_lcy) = 0
                   THEN
                      0
                   ELSE
                      (NVL(((NVL (o.penal_charges + penal_charge_3mth, 0) * c.mid_rate)
                               + a.total_exposure_lcy)
                            * j.percentage,
                            0)
                       / (  (NVL(o.penal_charges + penal_charge_3mth, 0) * c.mid_rate)
                          + a.total_exposure_lcy))
                END
                expected_cer,
                CASE
                   WHEN a.principal_outstanding_bal_lcy = 0
                   THEN
                      0
                   ELSE
                        ((NVL (a.total_collection_3m_lcy, 0) / NVL (1,0))
                         / 3)
                      / a.principal_outstanding_bal_lcy
                END
                actual_cer,
                nvl(unpo_days_overdue,0) unpo_days_overdue,
                unpo_sched_start_date,
                unpo_sched_due_date,
                nvl(unpo_principal_amount,0) unpo_principal_amount,
                nvl(unpo_principal_settled,0) unpo_principal_settled, 
                nvl(unpo_accrued_amount,0) unpo_accrued_amount,
                nvl(unpo_int_settled,0) unpo_int_settled,
                nvl(unpo_int_amount,0) unpo_int_amount,
                nvl(unpo_schedule_cnt,0) unpo_schedule_cnt,
                CASE
                   WHEN unsettled_principal_amount < 0 THEN 0
                   ELSE unsettled_principal_amount
                END
                   unsettled_principal_amount,
                CASE
                   WHEN unsettled_interest_amount < 0 THEN 0
                   ELSE unsettled_interest_amount
                END
                   unsettled_interest_amount,
                  f.total_unsettled_amount_lcy
                + (nvl(o.penal_charges + b.penal_charge_3mth, 0) * c.mid_rate)
                   total_unsettled_amount_lcy,
                  c.mid_rate fx_rate,
                  case when n.mor_flag = ''N'' then ''Y'' else ''N'' end
                   core_exposure,
                  g.principal_freq,
                  g.int_freq,
            nvl(case when length(a.ref_no)<>10 then o.penal_charges + penal_charge_3mth else 0 end,0) penal_charges,
            nvl(new_credit_limit,0) card_limit,
            i.schedule_due_date,
            i.schedule_due_date - trunc(sysdate-4) days_to_maturity,
            i.amount_due,
            b.debit_interest_3mth m3_od_debit_int,
            CASE
                   WHEN a.cust_id IN (SELECT cust_no FROM tmp_clr_is_staff_flag)
                   THEN
                      ''Y''
                   ELSE
                      ''N''
                END
                staff_flag,
          case when a.product_code IN (''AMPC'',
                                          ''PDSS'',
                                          ''SADV'',
                                          ''PDPC'',
                                          ''PDEZ'',
                                          ''PDAD'',
                                          ''PDTU'',
                                          ''STLV'',
                                          ''MHSS'',
                                          ''PLS'',
                                          ''STPL'',
                                          ''KPLS'',
                                          ''MPTA'',
                                          ''SCAS'',
                                          ''CDMN'',
                                          ''KPLA'',
                                          ''MPTL'',
                                          ''WPTL'',
                                          ''KALS'',
                                          ''STLM'',
                                          ''IMGL'',
                                          ''IBL0'',
                                          ''IBL2'')
                      then ''Y'' else ''N'' end set_cbn_sect_info,
                      '||397712069000||' sol_regulatory_limit,
                      case when a.ref_no in (''0693495215'',''0060683588'') and a.name_of_borrowers IS NULL then ''Y'' 
                           when a.ref_no=''0690379686'' and a.INT_RECEIVABLE_LCY = 0 then ''Y''
                           when a.ref_no=''0032025286'' AND APPROVED_LFF <> 14265000 then ''Y''
                           when trim(a.product_code) in (''50001'',''20021'',''AGLOTR'',''050001'',''020021'') then ''Y''
                           else ''N''
                      end clr_exception_flag 
                       from STGLIVE.rev_obiee_spool a,
                        tmp_consol_collection_final b,
                        tmp_clr_ccy_rate c,
                        tmp_clr_cbn_pwd_classic d,
                        tmp_clr_fcc_combine e,
                        tmp_clr_main_unpaidoblign f,
                        tmp_clr_loan_repay_freq g,
                        tmp_clr_cardsys_acctlimit h,
                        tmp_clr_sched_date i,
                        tmp_clr_mora_flag n,
                        tmp_clr_odintprin_penal o,
                        bitest.usr_clr_adj_facility_type r,
                        bitest.tmp_facility_type j,
                        tmp_clr_schedu_datediff k,
                        revedw.dim_branch l,
                        tmp_clr_lff_line m
         where a.ref_no=e.ref_no(+)
         and a.ref_no=d.ref_no(+)
         and   a.settlement_account=b.account_number(+)
         and   a.ref_no = m.dflt_settle_ac(+)
         and trim(a.ref_no) = trim(f.account_number(+))
         and trim(a.ref_no) = trim(g.account_number(+))
         and trim(a.ref_no) = trim(i.account_number(+))
         and trim(a.ref_no) = trim(n.account_number(+))
         and trim(a.ref_no) = trim(o.account_number(+))
         and trim(a.ref_no) = trim(k.account_number(+))
         and a.settlement_account=h.account_number(+)
         and a.currency_short_name=ccy1(+)
         and trim(a.product_code)=trim(r.product_code(+))
         and trim(a.facility_type) = trim(j.facility_type(+))
         and a.branch_code=l.branch_code(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_new_clr_intro as
       SELECT /*+ PARALLEL(auto) */ 
        distinct reference_date,
                               a.ref_no,
                               a.cust_id,
                               nvl(a.customer_name,liability_name) customer_name,
                               a.customer_type,
                               a.settlement_account,
                               a.product_code,
                               a.product_name,
                               a.branch_name,
                               a.currency_short_name,
                               a.currency_type,
                               a.loan_amount_tcy,
                               a.loan_amount_lcy,
                               LIMIT,
                               principal_outstanding_bal_tcy,
                               principal_outstanding_bal_lcy,
                               a.booking_date,
                               a.value_date,
                               a.maturity_date,
                               a.process_date,
                               a.rate,
                               a.tenor,
                               a.contract_status,
                               a.branch_code,
                               nvl(l.branch_address,''UNDEFINED'') branch_location,
                               nvl(l.state,''UNDEFINED'') branch_state,
                               account_officer_code,
                               accountofficer_name,
                               team_code,
                               team_name,
                               group_code,
                               group_name,
                               region_code,
                               region_name,
                               division_code,
                               division_name,
                               case when trim(account_officer_code) is null and trim(a.customer_type)=''I'' then ''RETAIL BANKING DIVISION''
                                    when trim(account_officer_code) is null and trim(a.customer_type)=''C'' then ''COMMERCIAL BANKING DIVISION''
                                    when trim(division_name) is null and trim(a.customer_type)=''I'' then ''RETAIL BANKING DIVISION''
                                    when trim(division_name) is null and trim(a.customer_type)=''C'' then ''COMMERCIAL BANKING DIVISION''
                                    when trim(division_name)=''CORPORATE TREASURY'' and trim(a.customer_type)=''I'' then ''RETAIL BANKING DIVISION''
                                    when trim(division_name)=''CORPORATE TREASURY'' and trim(a.customer_type)=''C'' then ''COMMERCIAL BANKING DIVISION''
                                   else '' ''
                                end alternate_division_name,
                               source,
                             a.fcubs_region, a.fcubs_risk, a.fcubs_sector, a.fcubs_sub_sector,
                               last_credit_date,
                               last_credit_amount,
                               director_1_name,
                               director_2_name,
                               director_3_name,
                               director_4_name,
                               a.asset_gl,
                               a.rc_sr_br_nid,
                               lcy_credit_1wk total_collection_1wk_lcy,
                               lcy_credit_1mth total_collection_1m_lcy,
                               total_collection_3m,
                               total_collection_3m_lcy,
                               total_collection_6m,
                               total_collection_6m_lcy,
                               total_collection_12m,
                               total_collection_12m_lcy,
                               collection_exposure_ratio_3m,
                               collection_exposure_ratio_6m,
                               collection_exposure_ratio_12m,
            case when a.source=''OD'' and a.facility_type is null then ''OVERDRAFT'' else a.facility_type end facility_type,
                               collateral_value,
                               nvl(trim(group_obligor_name),a.liability_name) group_obligor_name,
                               name_of_borrowers,
                               interest,
                               crms_borrowers_code_no,
                               rel_to_reporting_inst,
                               related_interest_name,
                               group_head_name,
                               bvn_number,
                               liability_no,
                               a.line_code,
                               liability_name,
                               overall_limit_amount,
                               original_book_date,
                               facility_limit_amount,
                               int_receivable_tcy,
                               int_receivable_lcy,
                               total_exposure_tcy,
                              (nvl(o.penal_charges + penal_charge_3mth, 0) * mid_rate) + total_exposure_lcy  total_exposure_lcy,
                               mis_code_settlement,
                               a.tin,
                               a.crms_code,
                          a.cbn_sector cbn_sector,
                d.sector_code,
                a.cbn_sub_sector,
                sub_sector_code,
                a.cbn_sector_adjusted,
                nvl(a.obligor_risk_rating,''3'') obligor_risk_rating,
                pwc_classification,
                ngaap_classification,ngaap_provision,
                impairment_amount,
                a.valuation_date,
                NVL(cbn_classification, ''PERFORMING'') cbn_classification,
                NVL(ifrs_classification, 1) ifrs_classification,
                case when trim(a.facility_type) is null and trim(a.exposure_type) is null then ''DIRECT''
                     when trim(a.facility_type) in (''LC'',''BOND_GTEE'') and trim(a.exposure_type) is null then ''CONTINGENT''
                     else trim(a.exposure_type) 
                end exposure_type,
                m.approved_lff,
                e.user_ref_no ead,
                a.collateral_attached,
                a.collateral_per_facility,
                a.collateral_status,
                a.collateral_desc,a.collateral_type,
                CASE
      WHEN a.product_code IN (''KPLS'',
                                         ''KPLA'',
                                         ''MPTA'',
                                         ''CDMN'')
                   THEN
                      ''PERSONAL LOAN''
                   WHEN a.product_code IN (''SCAS'')
                   THEN
                      ''STAFF LOAN''
                   WHEN a.product_code IN (''KMGL'')
                   THEN
                      ''MORTGAGE LOAN''
                ELSE
                nvl(trim(r.adj_facility_type),trim(a.facility_type)) end adj_facility_type,
                NVL(((NVL(o.penal_charges + penal_charge_3mth, 0) * c.mid_rate) + a.total_exposure_lcy) * j.percentage,0)
                   expected_collection,
                CASE
               WHEN trim(a.facility_type) in (''PERSONAL LOAN'',''PROJECT FINANCE LOAN'',''TERM LOAN'',''ON - LENDING - CBN'',''ON - LENDING'',''STAFF LOAN'',
                        ''MORTGAGE LOAN'') THEN 20
               WHEN trim(a.facility_type) in (''CREDIT CARD'') THEN 15
               WHEN((NVL(o.penal_charges + penal_charge_3mth, 0) * c.mid_rate)
                         + a.total_exposure_lcy) = 0
                   THEN
                      0
                   ELSE
                      (NVL(((NVL (o.penal_charges + penal_charge_3mth, 0) * c.mid_rate)
                               + a.total_exposure_lcy)
                            * j.percentage,
                            0)
                       / (  (NVL(o.penal_charges + penal_charge_3mth, 0) * c.mid_rate)
                          + a.total_exposure_lcy))
                END
                expected_cer,
                CASE
                   WHEN a.principal_outstanding_bal_lcy = 0
                   THEN
                      0
                   ELSE
                        ((NVL (a.total_collection_3m_lcy, 0) / NVL (1,0))
                         / 3)
                      / a.principal_outstanding_bal_lcy
                END
                actual_cer,
                nvl(unpo_days_overdue,0) unpo_days_overdue,
                unpo_sched_start_date,
                unpo_sched_due_date,
                nvl(unpo_principal_amount,0) unpo_principal_amount,
                nvl(unpo_principal_settled,0) unpo_principal_settled, 
                nvl(unpo_accrued_amount,0) unpo_accrued_amount,
                nvl(unpo_int_settled,0) unpo_int_settled,
                nvl(unpo_int_amount,0) unpo_int_amount,
                nvl(unpo_schedule_cnt,0) unpo_schedule_cnt,
                CASE
                   WHEN unsettled_principal_amount < 0 THEN 0
                   ELSE unsettled_principal_amount
                END
                   unsettled_principal_amount,
                CASE
                   WHEN unsettled_interest_amount < 0 THEN 0
                   ELSE unsettled_interest_amount
                END
                   unsettled_interest_amount,
                  f.total_unsettled_amount_lcy
                + (nvl(o.penal_charges + b.penal_charge_3mth, 0) * c.mid_rate)
                   total_unsettled_amount_lcy,
                  c.mid_rate fx_rate,
                  case when n.mor_flag = ''N'' then ''Y'' else ''N'' end
                   core_exposure,
                  g.principal_freq,
                  g.int_freq,
            nvl(case when length(a.ref_no)<>10 then o.penal_charges + penal_charge_3mth else 0 end,0) penal_charges,
            nvl(new_credit_limit,0) card_limit,
            i.schedule_due_date,
            i.schedule_due_date - trunc(sysdate-4) days_to_maturity,
            i.amount_due,
            b.debit_interest_3mth m3_od_debit_int,
            CASE
                   WHEN a.cust_id IN (SELECT cust_no FROM tmp_clr_is_staff_flag)
                   THEN
                      ''Y''
                   ELSE
                      ''N''
                END
                staff_flag,
          case when a.product_code IN (''AMPC'',
                                          ''PDSS'',
                                          ''SADV'',
                                          ''PDPC'',
                                          ''PDEZ'',
                                          ''PDAD'',
                                          ''PDTU'',
                                          ''STLV'',
                                          ''MHSS'',
                                          ''PLS'',
                                          ''STPL'',
                                          ''KPLS'',
                                          ''MPTA'',
                                          ''SCAS'',
                                          ''CDMN'',
                                          ''KPLA'',
                                          ''MPTL'',
                                          ''WPTL'',
                                          ''KALS'',
                                          ''STLM'',
                                          ''IMGL'',
                                          ''IBL0'',
                                          ''IBL2'')
                      then ''Y'' else ''N'' end set_cbn_sect_info,
                      '||397712069000||' sol_regulatory_limit,
                      case when a.ref_no in (''0693495215'',''0060683588'') and a.name_of_borrowers IS NULL then ''Y'' 
                           when a.ref_no=''0690379686'' and a.INT_RECEIVABLE_LCY = 0 then ''Y''
                           when a.ref_no=''0032025286'' AND APPROVED_LFF <> 14265000 then ''Y''
                           when trim(a.product_code) in (''50001'',''20021'',''AGLOTR'',''050001'',''020021'') then ''Y''
                           else ''N''
                      end clr_exception_flag 
                       from STGLIVE.rev_obiee_spool a,
                        tmp_consol_collection_final b,
                        tmp_clr_ccy_rate c,
                        tmp_clr_cbn_pwd_classic d,
                        tmp_clr_fcc_combine e,
                        tmp_clr_main_unpaidoblign f,
                        tmp_clr_loan_repay_freq g,
                        tmp_clr_cardsys_acctlimit h,
                        tmp_clr_sched_date i,
                        tmp_clr_mora_flag n,
                        tmp_clr_odintprin_penal o,
                        bitest.usr_clr_adj_facility_type r,
                        bitest.tmp_facility_type j,
                        tmp_clr_schedu_datediff k,
                        revedw.dim_branch l,
                        tmp_clr_lff_line m
         where a.ref_no=e.ref_no(+)
         and a.ref_no=d.ref_no(+)
         and   a.settlement_account=b.account_number(+)
         and   a.ref_no = m.dflt_settle_ac(+)
         and trim(a.ref_no) = trim(f.account_number(+))
         and trim(a.ref_no) = trim(g.account_number(+))
         and trim(a.ref_no) = trim(i.account_number(+))
         and trim(a.ref_no) = trim(n.account_number(+))
         and trim(a.ref_no) = trim(o.account_number(+))
         and trim(a.ref_no) = trim(k.account_number(+))
         and a.settlement_account=h.account_number(+)
         and a.currency_short_name=ccy1(+)
         and trim(a.product_code)=trim(r.product_code(+))
         and trim(a.facility_type) = trim(j.facility_type(+))
         and a.branch_code=l.branch_code(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     

   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_od_limitamt
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
     select trunc(in_date) into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'OD LIMIT AMT',
                   'OD LIMIT AMT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_od_limit_amt';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_clr_od_limit_amt';
    v_sql := 'create table tmp_clr_od_limit_amt as
       select distinct a.cust_no as customer_id,
            b.ccy_restriction,b.line_currency,b.line_code,b.line_serial,b.line_start_date,
            b.booking_date,b.line_expiry_date,
            b.limit_amount,b.utilisation,b.available_amount,b.user_define_status,
            b.last_new_util_date,b.availability_flag,b.record_stat,b.maker_id,b.checker_id
            ,b.matured_util,b.revolving_amt
            ,b.collateral_contribution,b.conversion_date,
            b.liab_br,b.auth_stat
            from stglive.src_sttm_cust_account a, fcubslive.getm_facility@loc_fcubslive b,  fcubslive.getm_liab@loc_fcubslive c
            where a.cust_no = c.liab_no
            and b.liab_id = c.id
            and a.record_stat = ''O''
            and (b.line_code like ''GL%'' OR b.line_code like ''IFF%'')
        and b.line_expiry_date > '''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_od_limit_amt as
       select distinct a.cust_no as customer_id,
            b.ccy_restriction,b.line_currency,b.line_code,b.line_serial,b.line_start_date,
            b.booking_date,b.line_expiry_date,
            b.limit_amount,b.utilisation,b.available_amount,b.user_define_status,
            b.last_new_util_date,b.availability_flag,b.record_stat,b.maker_id,b.checker_id
            ,b.matured_util,b.revolving_amt
            ,b.collateral_contribution,b.conversion_date,
            b.liab_br,b.auth_stat
            from stglive.src_sttm_cust_account a, fcubslive.getm_facility@loc_fcubslive b,  fcubslive.getm_liab@loc_fcubslive c
            where a.cust_no = c.liab_no
            and b.liab_id = c.id
            and a.record_stat = ''O''
            and (b.line_code like ''GL%'' OR b.line_code like ''IFF%'')
        and b.line_expiry_date > '''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_generate_crms
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin
      select trunc(in_date) into v_date from clr_date_control;

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CRMS GENERATOR',
                   'CRMS GENERATOR',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_crms_code';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_crms_code';
       v_sql := 'create table tmp_clr_crms_code as
       SELECT /*+ PARALLEL(auto) */
       ref_no,linked_ref_no,crms_code,loan_amount,bvn,cust_id,fac_type
       from(
       select cust_ac_no ref_no,linked_ref_no,f.udf_value_14 crms_code,linked_amount loan_amount,'' '' bvn,customer_no cust_id,''OD'' fac_type
        FROM fcubslive.Elvw_Pool_Coll_Link_Odint_New@loc_fcubslive e,
        fcubslive.Sttm_Cust_Account_Linkages@loc_fcubslive c,
        fcubslive.getm_facility@loc_fcubslive g,
        fcubslive.getb_pool_link@loc_fcubslive d,
        fcubslive.getm_collat@loc_fcubslive f
        WHERE g.line_code || g.line_serial = c.linked_ref_no and c.linkage_type = ''F''
        and (e.liab_no=c.customer_no or e.liab_id in (select f.liab_id from stglive.src_getm_liab_cust f where f.customer_no =c.customer_no))
        AND d.pool_id = e.pool_id
      AND d.facility_id = g.id
      and e.collateral_code = f.collateral_code
      and eff_start_date <= '''||v_date||'''
      and eff_end_date >= '''||v_date||''')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_clr_crms_code as
       SELECT /*+ PARALLEL(auto) */
       ref_no,linked_ref_no,crms_code,loan_amount,bvn,cust_id,fac_type
       from(
       select cust_ac_no ref_no,linked_ref_no,f.udf_value_14 crms_code,linked_amount loan_amount,'' '' bvn,customer_no cust_id,''OD'' fac_type
        FROM fcubslive.Elvw_Pool_Coll_Link_Odint_New@loc_fcubslive e,
        fcubslive.Sttm_Cust_Account_Linkages@loc_fcubslive c,
        fcubslive.getm_facility@loc_fcubslive g,
        fcubslive.getb_pool_link@loc_fcubslive d,
        fcubslive.getm_collat@loc_fcubslive f
        WHERE g.line_code || g.line_serial = c.linked_ref_no and c.linkage_type = ''F''
        and (e.liab_no=c.customer_no or e.liab_id in (select f.liab_id from stglive.src_getm_liab_cust f where f.customer_no =c.customer_no))
        AND d.pool_id = e.pool_id
      AND d.facility_id = g.id
      and e.collateral_code = f.collateral_code
      and eff_start_date <= '''||v_date||'''
      and eff_end_date >= '''||v_date||''')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;


end;
 procedure prc_obiee_spool_final
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      v_partition        varchar2(500);
      
begin

     select trunc(in_date) into v_date from clr_date_control;

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'OBIEE SPOOL FINAL',
                   'OBIEE SPOOL FINAL',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      
       ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (002,
                   'OBIEE SPOOL FINAL break 1',
                   'OBIEE SPOOL FINAL break 1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;

      
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner ='STGLIVE' and lower(table_name)='tmp_clr_obiee_spool';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_obiee_spool';
       v_sql := 'create table tmp_clr_obiee_spool as
      SELECT /*+ PARALLEL(4) */
      cust_id,liability_no,customer_name,customer_type,settlement_account,reference_date,ref_no,
    product_code,product_name,currency_short_name,currency_type,loan_amount_tcy,loan_amount_lcy,
    LIMIT,principal_outstanding_bal_tcy,principal_outstanding_bal_lcy,booking_date,
    value_date,maturity_date,process_date,rate,tenor,contract_status,branch_code,account_officer_code,
    team_code,accountofficer_name,team_name,group_code,group_name,region_code,region_name,division_code,division_name,
    source,last_credit_date,last_credit_amount,director_1_name,director_2_name,director_3_name,director_4_name,
    cbn_sub_sector,cbn_sector,obligor_risk_rating,asset_gl,total_collection_3m,total_collection_3m_lcy,total_collection_6m,
    total_collection_6m_lcy,total_collection_12m,total_collection_12m_lcy,ngaap_classification,ngaap_provision,collection_exposure_ratio_3m,
    collection_exposure_ratio_6m,collection_exposure_ratio_12m,exposure_type,facility_type,collateral_desc,collateral_type,
                               collateral_status,
                               valuation_date,
                               group_obligor_name,
                               name_of_borrowers,
                               interest,
                               crms_borrowers_code_no,
                               rc_sr_br_nid,
                               rel_to_reporting_inst,
                               related_interest_name,
                               bvn_number,
                               fcubs_region,
                               fcubs_risk,
                               fcubs_sector,
                               fcubs_sub_sector,
                               liability_name,
                               overall_limit_amount,
                               fcubs_classification,
                               original_book_date,
                               facility_limit_amount,
                               line_code,
                               original_amt_disbursed,
                               int_receivable_tcy,
                               int_receivable_lcy,
                               group_head_name,
                               total_exposure_tcy,
                               total_exposure_lcy,
                               collateral_attached,
                               collateral_value,
                               mis_code_settlement,
                               tin,
                               crms_code,
                               collateral_per_facility
                from rev_obiee_spool';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_obiee_spool as
      SELECT /*+ PARALLEL(4) */
                 cust_id,liability_no,customer_name,customer_type,settlement_account,reference_date,ref_no,
product_code,product_name,currency_short_name,currency_type,loan_amount_tcy,loan_amount_lcy,
LIMIT,principal_outstanding_bal_tcy,principal_outstanding_bal_lcy,booking_date,
value_date,maturity_date,process_date,rate,tenor,contract_status,branch_code,account_officer_code,
team_code,accountofficer_name,team_name,group_code,group_name,region_code,region_name,division_code,division_name,
source,last_credit_date,last_credit_amount,director_1_name,director_2_name,director_3_name,director_4_name,
cbn_sub_sector,cbn_sector,obligor_risk_rating,asset_gl,total_collection_3m,total_collection_3m_lcy,total_collection_6m,
total_collection_6m_lcy,total_collection_12m,total_collection_12m_lcy,ngaap_classification,ngaap_provision,collection_exposure_ratio_3m,
collection_exposure_ratio_6m,collection_exposure_ratio_12m,exposure_type,facility_type,collateral_desc,collateral_type,
                               collateral_status,
                               valuation_date,
                               group_obligor_name,
                               name_of_borrowers,
                               interest,
                               crms_borrowers_code_no,
                               rc_sr_br_nid,
                               rel_to_reporting_inst,
                               related_interest_name,
                               bvn_number,
                               fcubs_region,
                               fcubs_risk,
                               fcubs_sector,
                               fcubs_sub_sector,
                               liability_name,
                               overall_limit_amount,
                               fcubs_classification,
                               original_book_date,
                               facility_limit_amount,
                               line_code,
                               original_amt_disbursed,
                               int_receivable_tcy,
                               int_receivable_lcy,
                               group_head_name,
                               total_exposure_tcy,
                               total_exposure_lcy,
                               collateral_attached,
                               collateral_value,
                               mis_code_settlement,
                               tin,
                               crms_code,
                               collateral_per_facility
                from rev_obiee_spool';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     
     
     UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = 002;

      COMMIT;
     
     execute immediate 'alter table tmp_clr_obiee_spool modify(CBN_SECTOR VARCHAR2(600 BYTE),CBN_SUB_SECTOR VARCHAR2(600 BYTE),
     OBLIGOR_RISK_RATING VARCHAR2(600 BYTE))';
     
     v_partition:= 'P'|| to_char(v_date,'yyyymmdd');
    
    stglive.prc_truncate_partition('stglive.obiee_spool_n',v_partition);
    
       ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (003,
                   'OBIEE SPOOL FINAL break 2',
                   'OBIEE SPOOL FINAL break 2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
    
    execute immediate 'alter table stglive.obiee_spool_n 
      exchange partition P'||to_char(v_date,'yyyymmdd')||' with table tmp_clr_obiee_spool';
      
      
      UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = 003;

      COMMIT;
      
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_clr_new_push
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      v_partition        varchar2(500);
      
begin
     select trunc(in_date) into v_date from clr_date_control;
     
     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'NEW CLR PUSH',
                   'NEW CLR PUSH',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
      ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (000,
                   'NEW CLR PUSH break 1',
                   'NEW CLR PUSH break 1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
            
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_old_clr_neww';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
    if(tab_cnt)>=1 Then
    execute immediate 'drop table tmp_old_clr_neww';
    v_sql := 'create table tmp_old_clr_neww as
    select
    reference_date, ref_no, cust_id, customer_name, customer_type, settlement_account, product_code, product_name, currency_short_name, currency_type,
loan_amount_tcy, loan_amount_lcy, limit, principal_outstanding_bal_tcy, principal_outstanding_bal_lcy, booking_date, value_date, maturity_date,
process_date, rate, tenor, contract_status, branch_code, account_officer_code, team_code, accountofficer_name, team_name, group_code, group_name,
region_code, region_name, division_code, division_name, source, last_credit_date, last_credit_amount, director_1_name, director_2_name, director_3_name,
director_4_name, asset_gl, total_collection_3m, total_collection_3m_lcy, total_collection_6m, total_collection_6m_lcy, total_collection_12m,
total_collection_12m_lcy, ngaap_classification, ngaap_provision, collection_exposure_ratio_3m, collection_exposure_ratio_6m,
collection_exposure_ratio_12m, facility_type, collateral_desc, collateral_type, collateral_status, collateral_value,
valuation_date, group_obligor_name, name_of_borrowers, interest, crms_borrowers_code_no, rc_sr_br_nid, rel_to_reporting_inst,
related_interest_name, group_head_name, bvn_number, liability_no, fcubs_region, fcubs_risk, fcubs_sub_sector, fcubs_sector,
liability_name, overall_limit_amount, fcubs_classification, original_book_date, facility_limit_amount, line_code,
original_amt_disbursed, int_receivable_tcy, int_receivable_lcy, total_exposure_tcy, total_exposure_lcy, collateral_attached,
collateral_per_facility, mis_code_settlement, tin, crms_code, upl_cust_id, upl_customer_name, cbn_sector, sector_code,
cbn_sub_sector, sub_sector_code, cbn_sector_adjusted, obligor_risk_rating, pwc_classification, cbn_classification,
cbn_classification_date, ifrs_classification, exposure_type, eir_rate, pd, lgd, ccy, ead, impairment_amount, extension_amendment,
approved_trade_cycle, syndicated_facilities, unpo_settlement_ccy, unpo_days_overdue, unpo_sched_start_date, unpo_sched_due_date,
unpo_principal_amount, unpo_principal_settled, unpo_accrued_amount, unpo_int_settled, unpo_int_amount, unpo_schedule_cnt,
unsettled_principal_amount, unsettled_interest_amount, total_unsettled_amount_lcy, principal_freq, int_freq, old_reference, branch_state,
card_limit, penal_charges, approved_lff, expected_collection, expected_cer, mis_aocode, misgroup, misdivision, fx_rate,
core_exposure, actual_cer, upd_flag, schedule_due_date, days_to_maturity, amount_due, staff_flag, adj_facility_type, sol_regulatory_limit,
sol_internal_limit_ngn, sol_internal_limit_usd from(
       select distinct reference_date,ref_no,cust_id,customer_name,customer_type,settlement_account,product_code,product_name,currency_short_name,
            currency_type,loan_amount_tcy,loan_amount_lcy,LIMIT,principal_outstanding_bal_tcy,principal_outstanding_bal_lcy,
            booking_date,value_date,maturity_date,process_date,
            case when trim(rate) is null and exposure_type=''CONTINGENT'' then 0 else rate end rate,
            tenor,contract_status,branch_code,account_officer_code,team_code,
            accountofficer_name,team_name,group_code,group_name,region_code,region_name,division_code,division_name,source,
            last_credit_date,last_credit_amount,director_1_name,director_2_name,director_3_name,director_4_name,asset_gl,
            total_collection_3m,total_collection_3m_lcy total_collection_3m_lcy,total_collection_6m,total_collection_6m_lcy total_collection_6m_lcy,
            total_collection_12m,total_collection_12m_lcy total_collection_12m_lcy,ngaap_classification,ngaap_provision,collection_exposure_ratio_3m,
            collection_exposure_ratio_6m,collection_exposure_ratio_12m,facility_type,collateral_desc,collateral_type,collateral_status,collateral_value,
            case when valuation_date<='''||v_date||''' then to_date(''1/1/1900'',''dd/mm/yyyy'') else to_date(''1/1/1900'',''dd/mm/yyyy'') end valuation_date,
            case when ref_no=''099ALS000576551'' then ''DANIEL OLUWADAMILOLA MAKINDE'' else group_obligor_name 
            end group_obligor_name,
            name_of_borrowers,interest,crms_borrowers_code_no,'' '' rc_sr_br_nid,rel_to_reporting_inst,related_interest_name,group_head_name,
            bvn_number,liability_no,fcubs_region,fcubs_risk,fcubs_sub_sector,fcubs_sector,
            liability_name,overall_limit_amount,'' '' fcubs_classification,original_book_date,limit facility_limit_amount,line_code,
            loan_amount_lcy original_amt_disbursed,int_receivable_tcy,int_receivable_lcy,total_exposure_tcy,total_exposure_lcy,
            collateral_attached,collateral_per_facility,mis_code_settlement,tin,crms_code,'' '' upl_cust_id,'' '' upl_customer_name,
            case 
                when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''GENERAL''
                when cbn_sector is null and customer_type = ''I'' then ''GENERAL''
                when cbn_sector is null and customer_type <> ''I'' then ''OTHERS''
            else cbn_sector end cbn_sector,
            case 
                when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''EA08000''
                when cbn_sector is null and customer_type = ''I'' then ''EA08000''
                when cbn_sector is null and customer_type <> ''I'' then ''EA08001''
            else sector_code end sector_code,
            case 
            when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''Personal''
            when cbn_sub_sector is null and customer_type = ''I'' then ''Personal''
            when cbn_sub_sector is null and customer_type <> ''I'' then ''OTHERS''
            else cbn_sub_sector end cbn_sub_sector,
            case 
                when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''EA08003''
                when cbn_sector is null and customer_type = ''I'' then ''EA08005''
                when cbn_sector is null and customer_type <> ''I'' then ''EA08006''
            else sub_sector_code end sub_sector_code,
            case 
                when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''GENERAL''
                when cbn_sector_adjusted is null and customer_type = ''I'' then ''GENERAL''
                when cbn_sector_adjusted is null and customer_type <> ''I'' then ''OTHERS''
             else cbn_sector_adjusted end cbn_sector_adjusted,
            obligor_risk_rating,pwc_classification,cbn_classification,
            '' '' cbn_classification_date,ifrs_classification,exposure_type,'' '' eir_rate,'' '' pd,'' '' lgd,m3_od_debit_int ccy,ead,
            impairment_amount,'' '' extension_amendment,'' '' approved_trade_cycle,'' '' syndicated_facilities,unpo_principal_settled unpo_settlement_ccy,
            unpo_days_overdue,unpo_sched_start_date,unpo_sched_due_date,unpo_principal_amount,unpo_principal_settled,unpo_accrued_amount,unpo_int_settled,
            unpo_int_amount,unpo_schedule_cnt,unsettled_principal_amount,unsettled_interest_amount,total_unsettled_amount_lcy,principal_freq,int_freq,
            '' '' old_reference,branch_state,card_limit,penal_charges,approved_lff,expected_collection,expected_cer,account_officer_code mis_aocode,group_name misgroup,
            division_name misdivision,fx_rate,core_exposure,actual_cer,
            case when trim(obligor_risk_rating) is null
                     then ''Y''  else ''N'' end upd_flag,
            schedule_due_date,days_to_maturity,amount_due,staff_flag,nvl(adj_facility_type,facility_type) adj_facility_type,
            sol_regulatory_limit,
            case
                when trim(obligor_risk_rating)=''1'' then 41670000000
                when trim(obligor_risk_rating)=''2+'' then 33330000000
                when trim(obligor_risk_rating)=''2'' then 25000000000
                when trim(obligor_risk_rating)=''2-'' then 16670000000
                when trim(obligor_risk_rating)=''3+'' then 3330000000
                when trim(obligor_risk_rating)=''3'' then 1670000000
                when trim(obligor_risk_rating)=''3-'' then 830000000
              end sol_internal_limit_ngn,
              case
                   when trim(obligor_risk_rating)=''1'' then 40000000
                   when trim(obligor_risk_rating)=''2+'' then 20000000
                   when trim(obligor_risk_rating)=''2'' then 20000000
                   when trim(obligor_risk_rating)=''2-'' then 20000000
                   when trim(obligor_risk_rating)=''3+'' then 5000000
                   when trim(obligor_risk_rating)=''3'' then 5000000
                   when trim(obligor_risk_rating)=''3-'' then 0
                end sol_internal_limit_usd,
                row_number() over(partition by ref_no order by rownum desc) rnk
       from tmp_new_clr_intro where clr_exception_flag=''N'')
       where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_old_clr_neww as
    select
    reference_date, ref_no, cust_id, customer_name, customer_type, settlement_account, product_code, product_name, currency_short_name, currency_type,
loan_amount_tcy, loan_amount_lcy, limit, principal_outstanding_bal_tcy, principal_outstanding_bal_lcy, booking_date, value_date, maturity_date,
process_date, rate, tenor, contract_status, branch_code, account_officer_code, team_code, accountofficer_name, team_name, group_code, group_name,
region_code, region_name, division_code, division_name, source, last_credit_date, last_credit_amount, director_1_name, director_2_name, director_3_name,
director_4_name, asset_gl, total_collection_3m, total_collection_3m_lcy, total_collection_6m, total_collection_6m_lcy, total_collection_12m,
total_collection_12m_lcy, ngaap_classification, ngaap_provision, collection_exposure_ratio_3m, collection_exposure_ratio_6m,
collection_exposure_ratio_12m, facility_type, collateral_desc, collateral_type, collateral_status, collateral_value,
valuation_date, group_obligor_name, name_of_borrowers, interest, crms_borrowers_code_no, rc_sr_br_nid, rel_to_reporting_inst,
related_interest_name, group_head_name, bvn_number, liability_no, fcubs_region, fcubs_risk, fcubs_sub_sector, fcubs_sector,
liability_name, overall_limit_amount, fcubs_classification, original_book_date, facility_limit_amount, line_code,
original_amt_disbursed, int_receivable_tcy, int_receivable_lcy, total_exposure_tcy, total_exposure_lcy, collateral_attached,
collateral_per_facility, mis_code_settlement, tin, crms_code, upl_cust_id, upl_customer_name, cbn_sector, sector_code,
cbn_sub_sector, sub_sector_code, cbn_sector_adjusted, obligor_risk_rating, pwc_classification, cbn_classification,
cbn_classification_date, ifrs_classification, exposure_type, eir_rate, pd, lgd, ccy, ead, impairment_amount, extension_amendment,
approved_trade_cycle, syndicated_facilities, unpo_settlement_ccy, unpo_days_overdue, unpo_sched_start_date, unpo_sched_due_date,
unpo_principal_amount, unpo_principal_settled, unpo_accrued_amount, unpo_int_settled, unpo_int_amount, unpo_schedule_cnt,
unsettled_principal_amount, unsettled_interest_amount, total_unsettled_amount_lcy, principal_freq, int_freq, old_reference, branch_state,
card_limit, penal_charges, approved_lff, expected_collection, expected_cer, mis_aocode, misgroup, misdivision, fx_rate,
core_exposure, actual_cer, upd_flag, schedule_due_date, days_to_maturity, amount_due, staff_flag, adj_facility_type, sol_regulatory_limit,
sol_internal_limit_ngn, sol_internal_limit_usd from(
       select distinct reference_date,ref_no,cust_id,customer_name,customer_type,settlement_account,product_code,product_name,currency_short_name,
            currency_type,loan_amount_tcy,loan_amount_lcy,LIMIT,principal_outstanding_bal_tcy,principal_outstanding_bal_lcy,
            booking_date,value_date,maturity_date,process_date,
            case when trim(rate) is null and exposure_type=''CONTINGENT'' then 0 else rate end rate,
            tenor,contract_status,branch_code,account_officer_code,team_code,
            accountofficer_name,team_name,group_code,group_name,region_code,region_name,division_code,division_name,source,
            last_credit_date,last_credit_amount,director_1_name,director_2_name,director_3_name,director_4_name,asset_gl,
            total_collection_3m,total_collection_3m_lcy total_collection_3m_lcy,total_collection_6m,total_collection_6m_lcy total_collection_6m_lcy,
            total_collection_12m,total_collection_12m_lcy total_collection_12m_lcy,ngaap_classification,ngaap_provision,collection_exposure_ratio_3m,
            collection_exposure_ratio_6m,collection_exposure_ratio_12m,facility_type,collateral_desc,collateral_type,collateral_status,collateral_value,
            case when valuation_date<='''||v_date||''' then to_date(''1/1/1900'',''dd/mm/yyyy'') else to_date(''1/1/1900'',''dd/mm/yyyy'') end valuation_date,
            case when ref_no=''099ALS000576551'' then ''DANIEL OLUWADAMILOLA MAKINDE'' else group_obligor_name 
            end group_obligor_name,
            name_of_borrowers,interest,crms_borrowers_code_no,'' '' rc_sr_br_nid,rel_to_reporting_inst,related_interest_name,group_head_name,
            bvn_number,liability_no,fcubs_region,fcubs_risk,fcubs_sub_sector,fcubs_sector,
            liability_name,overall_limit_amount,'' '' fcubs_classification,original_book_date,limit facility_limit_amount,line_code,
            loan_amount_lcy original_amt_disbursed,int_receivable_tcy,int_receivable_lcy,total_exposure_tcy,total_exposure_lcy,
            collateral_attached,collateral_per_facility,mis_code_settlement,tin,crms_code,'' '' upl_cust_id,'' '' upl_customer_name,
            case 
                when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''GENERAL''
                when cbn_sector is null and customer_type = ''I'' then ''GENERAL''
                when cbn_sector is null and customer_type <> ''I'' then ''OTHERS''
            else cbn_sector end cbn_sector,
            case 
                when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''EA08000''
                when cbn_sector is null and customer_type = ''I'' then ''EA08000''
                when cbn_sector is null and customer_type <> ''I'' then ''EA08001''
            else sector_code end sector_code,
            case 
            when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''Personal''
            when cbn_sub_sector is null and customer_type = ''I'' then ''Personal''
            when cbn_sub_sector is null and customer_type <> ''I'' then ''OTHERS''
            else cbn_sub_sector end cbn_sub_sector,
            case 
                when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''EA08003''
                when cbn_sector is null and customer_type = ''I'' then ''EA08005''
                when cbn_sector is null and customer_type <> ''I'' then ''EA08006''
            else sub_sector_code end sub_sector_code,
            case 
                when set_cbn_sect_info=''Y'' and (cbn_sector is null and cbn_sub_sector is null and cbn_sector_adjusted is null) then ''GENERAL''
                when cbn_sector_adjusted is null and customer_type = ''I'' then ''GENERAL''
                when cbn_sector_adjusted is null and customer_type <> ''I'' then ''OTHERS''
             else cbn_sector_adjusted end cbn_sector_adjusted,
            obligor_risk_rating,pwc_classification,cbn_classification,
            '' '' cbn_classification_date,ifrs_classification,exposure_type,'' '' eir_rate,'' '' pd,'' '' lgd,m3_od_debit_int ccy,ead,
            impairment_amount,'' '' extension_amendment,'' '' approved_trade_cycle,'' '' syndicated_facilities,unpo_principal_settled unpo_settlement_ccy,
            unpo_days_overdue,unpo_sched_start_date,unpo_sched_due_date,unpo_principal_amount,unpo_principal_settled,unpo_accrued_amount,unpo_int_settled,
            unpo_int_amount,unpo_schedule_cnt,unsettled_principal_amount,unsettled_interest_amount,total_unsettled_amount_lcy,principal_freq,int_freq,
            '' '' old_reference,branch_state,card_limit,penal_charges,approved_lff,expected_collection,expected_cer,account_officer_code mis_aocode,group_name misgroup,
            division_name misdivision,fx_rate,core_exposure,actual_cer,
            case when trim(obligor_risk_rating) is null
                     then ''Y''  else ''N'' end upd_flag,
            schedule_due_date,days_to_maturity,amount_due,staff_flag,nvl(adj_facility_type,facility_type) adj_facility_type,
            sol_regulatory_limit,
            case
                when trim(obligor_risk_rating)=''1'' then 41670000000
                when trim(obligor_risk_rating)=''2+'' then 33330000000
                when trim(obligor_risk_rating)=''2'' then 25000000000
                when trim(obligor_risk_rating)=''2-'' then 16670000000
                when trim(obligor_risk_rating)=''3+'' then 3330000000
                when trim(obligor_risk_rating)=''3'' then 1670000000
                when trim(obligor_risk_rating)=''3-'' then 830000000
              end sol_internal_limit_ngn,
              case
                   when trim(obligor_risk_rating)=''1'' then 40000000
                   when trim(obligor_risk_rating)=''2+'' then 20000000
                   when trim(obligor_risk_rating)=''2'' then 20000000
                   when trim(obligor_risk_rating)=''2-'' then 20000000
                   when trim(obligor_risk_rating)=''3+'' then 5000000
                   when trim(obligor_risk_rating)=''3'' then 5000000
                   when trim(obligor_risk_rating)=''3-'' then 0
                end sol_internal_limit_usd,
                row_number() over(partition by ref_no order by rownum desc) rnk
       from tmp_new_clr_intro where clr_exception_flag=''N'')
       where rnk=1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    
     UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = 000;

      COMMIT;
    
    v_partition:= 'P'|| to_char(v_date,'yyyymmdd');
    
   stglive.prc_truncate_partition('stglive.src_new_clr_n',v_partition);
   
   
    ---added by yennie to check runtime 22012022
           INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (001,
                   'NEW CLR PUSH break 2',
                   'NEW CLR PUSH break 2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
   
    
   execute immediate 'alter table stglive.src_new_clr_n 
     exchange partition P'||to_char(v_date,'yyyymmdd')||' with table tmp_old_clr_neww';
     
     UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = 001;

      COMMIT;
     
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
 procedure prc_clr_date_control
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      mainDate            date;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CLR DATE CONTROL',
                   'CLR DATE CONTROL',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      COMMIT;
      
    select max(reference_date) into v_date from STGLIVE.D_CONSOLIDATED_CREDIT_REPORT_N where reference_date between 
    trunc(sysdate-3) and trunc(sysdate-1);
    
    mainDate    := v_date + 1;
    
    execute immediate 'truncate table clr_date_control';
    
    insert into clr_date_control select mainDate from dual;
    
    commit;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_acct_snapshot_extract
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'ACCOUNT SNAP EXTRACT',
                   'ACCOUNT SNAP EXTRACT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      commit;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_acct_snapshot';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_acct_snapshot';
       v_sql := 'create table tmp_clr_acct_snapshot as
       select /*+ parallel(auto) */ 
       account_number,customer_number,account_currency,mis_code
       from odsrev.drv_account_snapshot_details';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_acct_snapshot as
       select /*+ parallel(auto) */ 
       account_number,customer_number,account_currency,mis_code
       from odsrev.drv_account_snapshot_details';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_cust_snapshot_extract
as
      v_message          VARCHAR2 (4000);
      v_rows_processed   NUMBER;
      v_date             DATE := trunc(sysdate)-1;
      v_seq              NUMBER;
      v_sql              VARCHAR2 (10000);
      tab_cnt            integer;
      
      
begin

     select SEQ_RAC_REFRESH.NEXTVAL INTO v_seq FROM DUAL;
     
     INSERT INTO optimiz_clr_LOG(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'CUSTOMER SNAP EXTRACT',
                   'CUSTOMER SNAP EXTRACT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

      commit;
      
      begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_clr_cust_snapshot';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_clr_cust_snapshot';
       v_sql := 'create table tmp_clr_cust_snapshot as
       select /*+ parallel(auto) */ 
       customer_number,cust_fullname,customer_type
       from odsrev.drv_customer_snapshot_details';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_clr_cust_snapshot as
       select /*+ parallel(auto) */ 
       customer_number,cust_fullname,customer_type
       from odsrev.drv_customer_snapshot_details';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimiz_clr_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimiz_clr_LOG
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
end;
/
