CREATE OR REPLACE package body STGLIVE.pkg_rac_refresh_rev
as
procedure prc_rac_mth_bal
as
      v_lastday          DATE := TRUNC (SYSDATE, 'MM') - 1;
      v_firstday_mnth    DATE := TRUNC (TRUNC (SYSDATE, 'MM') - 1,'MM');
      v_date             date;
      v_processid        NUMBER;
      v_processname      VARCHAR2 (4000);
      v_message          VARCHAR2 (500);
      v_rows_processed   NUMBER;
      v_sql              varchar2(32000);
      v_seq              number;
      v_trunc_date       DATE:= trunc(sysdate)-47;
      tab_cnt            integer;
      v_partition        VARCHAR2(100);

    v_start_date DATE:= trunc(sysdate)-46;
    v_end_date   DATE:= trunc(sysdate)-1;

begin      
            select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
            INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC END MTH BALANCE',
                   'RAC END MTH BALANCE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rac_mth_end_bal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rac_mth_end_bal';
       v_sql := 'create table tmp_rac_mth_end_bal as
       select 
       cod_act_no acct_no,
                ccy,
                dat_process,
                BAL_AVAILABLE_LCY close_bal_lcy,
                (CASE
                    WHEN account_class in
                         (''010002'',
                          ''010004'',
                          ''010020'',
                          ''010024'',
                          ''010003'',
                          ''020007'',
                          ''010020'',
                          ''010021'',
                          ''010002'',
                          ''010025'',
                          ''020006'',
                          ''010004'',
                          ''020009'',
                          ''020001'',
                          ''020003'',
                          ''010023'',
                          ''020004'',
                          ''020008'',
                          ''020011'',
                          ''020015'',
                          ''020017'',
                          ''020016'',
                          ''020033'',
                          ''020034'')
                    THEN
                       ''Y''
                    ELSE
                       ''N''
                 END)
                   sal_flag
                from ods.daily_close_position a, stglive.src_sttm_cust_account b
                where a.cod_act_no = b.cust_ac_no AND b.auth_stat = ''A''
                and dat_process='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rac_mth_end_bal as
       select 
       cod_act_no acct_no,
                ccy,
                dat_process,
                BAL_AVAILABLE_LCY close_bal_lcy,
                (CASE
                    WHEN account_class in
                         (''010002'',
                          ''010004'',
                          ''010020'',
                          ''010024'',
                          ''010003'',
                          ''020007'',
                          ''010020'',
                          ''010021'',
                          ''010002'',
                          ''010025'',
                          ''020006'',
                          ''010004'',
                          ''020009'',
                          ''020001'',
                          ''020003'',
                          ''010023'',
                          ''020004'',
                          ''020008'',
                          ''020011'',
                          ''020015'',
                          ''020017'',
                          ''020016'',
                          ''020033'',
                          ''020034'')
                    THEN
                       ''Y''
                    ELSE
                       ''N''
                 END)
                   sal_flag
                from ods.daily_close_position a, stglive.src_sttm_cust_account b
                where a.cod_act_no = b.cust_ac_no AND b.auth_stat = ''A''
                and dat_process='''||v_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     v_partition:= 'P'|| to_char(v_date,'yyyymmdd');
     
     odsrev.prc_truncate_partition('rev_rac_end_month_bal',v_partition);
     
     execute immediate 'alter table rev_rac_end_month_bal 
        exchange partition P'||to_char(v_date,'yyyymmdd')||' with table tmp_rac_mth_end_bal';

--insert into rev_rac_end_month_bal select * from rac_end_month_bal where dat_process > '1aug2020';commit;

       
     UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_take_salary_hist
as
      --v_lastday          DATE := TRUNC (SYSDATE, 'MM') - 1;
      --v_firstday_mnth    DATE := TRUNC (TRUNC (SYSDATE, 'MM') - 1, 'MM');
      v_date             date;
      --v_processid        NUMBER;
      --v_processname      VARCHAR2 (4000);
      v_message          VARCHAR2 (500);
      v_rows_processed   NUMBER;
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_partition        VARCHAR2(100);
      v_older_dates       DATE;
      v_startdate        date;
      v_enddate          date;
      v_max              date;
      
      v_start_date      date:=trunc(sysdate)-46;
      v_end_date        date:=trunc(sysdate)-1;

begin      
            select seq_rac_refresh.NEXTVAL into v_seq from dual;
            
            INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC SAL HIST',
                   'RAC SAL HIST',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
       begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rac_sal_acct';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rac_sal_acct';
       v_sql := 'create table tmp_rac_sal_acct as
       select distinct cust_ac_no
          from rev_sal_payments
          --from stglive.sal_payments
              where trn_dt between '''||v_start_date||''' AND '''||v_end_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rac_sal_acct as
       select distinct cust_ac_no
          from rev_sal_payments
          --from stglive.sal_payments
              where trn_dt between '''||v_start_date||''' AND '''||v_end_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     
     --BELOW ADDED BY YENNIE TO ADDRESS NEW RULES -- 09OCT2021
       begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rac_sal_acct_2m';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rac_sal_acct_2m';
       v_sql := 'create table tmp_rac_sal_acct_2m as
       select distinct cust_ac_no
               from tmp_rac_sal_acct
where cust_ac_no in (select distinct cust_ac_no
          from rev_sal_payments
          --from stglive.sal_payments
              where trn_dt between trunc(sysdate-91) AND trunc(sysdate-1) 
GROUP BY cust_ac_no
having COUNT (cust_ac_no) >= 2)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rac_sal_acct_2m as
       select distinct cust_ac_no
               from tmp_rac_sal_acct
where cust_ac_no in (select distinct cust_ac_no
          from rev_sal_payments
          --from stglive.sal_payments
              where trn_dt between trunc(sysdate-91) AND trunc(sysdate-1) 
              GROUP BY cust_ac_no
having COUNT (cust_ac_no) >= 2)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     --BELOW ADDED BY YENNIE TO ADDRESS NEW RULES -- 09OCT2021
     
       begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rac_sal_acct_4m';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rac_sal_acct_4m';
       v_sql := 'create table tmp_rac_sal_acct_4m as
       select distinct cust_ac_no
               from tmp_rac_sal_acct
where cust_ac_no in (select distinct cust_ac_no
          from rev_sal_payments
          --from stglive.sal_payments
              where trn_dt between trunc(sysdate-181) AND trunc(sysdate-1) 
GROUP BY cust_ac_no
having COUNT (cust_ac_no) >= 4)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rac_sal_acct_4m as
       select distinct cust_ac_no
               from tmp_rac_sal_acct
where cust_ac_no in (select distinct cust_ac_no
          from rev_sal_payments
          --from stglive.sal_payments
              where trn_dt between trunc(sysdate-181) AND trunc(sysdate-1) 
              GROUP BY cust_ac_no
having COUNT (cust_ac_no) >= 4)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     --BELOW ADDED BY YENNIE TO ADDRESS NEW RULES -- 09OCT2021
--     delete tmp_rac_sal_acct
--where cust_ac_no not in 
--(select * from tmp_rac_sal_acct_2m
--union 
--select * from tmp_rac_sal_acct_4m);commit;
     
    select max(trn_dt) into v_max from odsrev.rac_46days_tranx_extract where trn_dt >=trunc(sysdate)-5 and trn_dt <=trunc(sysdate);
    
    v_startdate := v_max;
    v_enddate   := trunc(sysdate)-1;
     
    
    --BELOW TAKEN OUT BY YENNIE TO ADDRESS FAILURES -- 09OCT2021
--    v_older_dates  :=trunc(v_startdate)-10;
--     v_partition:= 'P'|| to_char(v_older_dates,'yyyymmdd');
    ---odsrev.prc_truncate_partition('odsrev.rac_46days_tranx_extract',v_partition);
    
    while v_startdate <= v_enddate
     loop 
       
       begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_46days_tranx_extract';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
    
     if(tab_cnt)>=1 Then
      execute immediate 'drop table tmp_46days_tranx_extract';
      v_sql := 'create table tmp_46days_tranx_extract as
        select /*+ parallel(auto) */
        ac_no,trn_dt,drcr_ind,lcy_amount
     from stglive.src_actb_history partition (P' || to_char(v_startdate,'yyyymmdd') ||')
     where IB = ''N'' and trn_code NOT IN(''REV'')
     and ac_no in (select CUST_AC_NO from tmp_rac_sal_acct)
     ';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table tmp_46days_tranx_extract as
        select /*+ parallel(auto) */
        ac_no,trn_dt,drcr_ind,lcy_amount
     from stglive.src_actb_history partition (P' || to_char(v_startdate,'yyyymmdd') ||')
     where IB = ''N'' and trn_code NOT IN(''REV'')
     and ac_no in (select CUST_AC_NO from tmp_rac_sal_acct)
     ';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    v_partition:= 'P'|| to_char(v_startdate,'yyyymmdd');
    
    odsrev.prc_truncate_partition('odsrev.rac_46days_tranx_extract',v_partition);
    
    execute immediate 'alter table odsrev.rac_46days_tranx_extract 
        exchange partition P'||to_char(v_startdate,'yyyymmdd')||' with table tmp_46days_tranx_extract';
    
             
    v_startdate := v_startdate + 1;
    
    end loop;
     
--     begin
--        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rac_sal_hist';
--        EXCEPTION
--        WHEN NO_DATA_FOUND THEN
--            tab_cnt:=0;
--      end;
--      
--       if(tab_cnt)>=1 Then
--       execute immediate 'drop table tmp_rac_sal_hist';
--       v_sql := 'create table tmp_rac_sal_hist as
--       select  /*+parallel (100)*/ *
--          from stglive.src_actb_history where trn_dt between '''||v_start_date||''' AND '''||v_end_date||'''
--        and AC_NO in (select CUST_AC_NO from tmp_rac_sal_acct)';
--     execute immediate v_sql;
--     v_rows_processed := SQL%ROWCOUNT;
--     else
--    v_sql := 'create table tmp_rac_sal_hist as
--       select  /*+parallel (100)*/ *
--          from stglive.src_actb_history where trn_dt between '''||v_start_date||''' AND '''||v_end_date||'''
--        and AC_NO in (select CUST_AC_NO from tmp_rac_sal_acct)';
--     execute immediate v_sql;
--     v_rows_processed := SQL%ROWCOUNT;
--     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_rac_cr_dr_mnt';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_rac_cr_dr_mnt';
       v_sql := 'create table rev_rac_cr_dr_mnt as
       select  /*+parallel (100)*/
          AC_NO CUST_AC_NO,
            TO_CHAR (TRN_DT, ''YYMM'') MNTH,
            SUM (DECODE (DRCR_IND, ''C'', LCY_AMOUNT)) AMT_CR,
            SUM (DECODE (DRCR_IND, ''D'', LCY_AMOUNT)) AMT_DR,
            COUNT (DECODE (DRCR_IND, ''C'', LCY_AMOUNT)) CNT_CR,
            COUNT (DECODE (DRCR_IND, ''D'', LCY_AMOUNT)) CNT_DR
       from odsrev.rac_46days_tranx_extract where trn_dt between '''||v_start_date||''' AND '''||v_end_date||'''
         GROUP BY AC_NO, TO_CHAR (TRN_DT, ''YYMM'')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_rac_cr_dr_mnt as
       select  /*+parallel (100)*/
          AC_NO CUST_AC_NO,
            TO_CHAR (TRN_DT, ''YYMM'') MNTH,
            SUM (DECODE (DRCR_IND, ''C'', LCY_AMOUNT)) AMT_CR,
            SUM (DECODE (DRCR_IND, ''D'', LCY_AMOUNT)) AMT_DR,
            COUNT (DECODE (DRCR_IND, ''C'', LCY_AMOUNT)) CNT_CR,
            COUNT (DECODE (DRCR_IND, ''D'', LCY_AMOUNT)) CNT_DR
       from odsrev.rac_46days_tranx_extract where trn_dt between '''||v_start_date||''' AND '''||v_end_date||'''
         GROUP BY AC_NO, TO_CHAR (TRN_DT, ''YYMM'')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
        
       
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_rac_date_control
as
      v_lastday          DATE := TRUNC (SYSDATE, 'MM') - 1;
      v_firstday_mnth    DATE := TRUNC (TRUNC (SYSDATE, 'MM') - 1, 'MM');
      v_date             date;
      v_processid        NUMBER;
      v_processname      VARCHAR2 (4000);
      v_message          VARCHAR2 (500);
      v_rows_processed   NUMBER;
      v_sql                   varchar2(32000);
      v_seq                   number;
      v_trunc_date DATE:= trunc(sysdate)-47;

    v_start_date DATE:= trunc(sysdate)-46;
    v_end_date   DATE:= trunc(sysdate)-1;

begin      
            select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
            INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DATE CONTROL',
                   'RAC DATE CONTROL',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
          
        execute immediate 'truncate table rac_date_control';
        
        insert into rac_date_control
        select full_date
        from stglive.dim_date where months_between(v_lastday,full_date) < 1
                                         and full_date <= v_lastday
                                         and last_day_in_month_indicator = 'Y';
         
        commit;
         
              
     UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_total_12mth_bal
as
      v_lastday          DATE := TRUNC (SYSDATE, 'MM') - 1;
      v_firstday_mnth    DATE := TRUNC (TRUNC (SYSDATE, 'MM') - 1, 'MM');
      v_date             date;
      v_processid        NUMBER;
      v_processname      VARCHAR2 (4000);
      v_message          VARCHAR2 (500);
      v_rows_processed   NUMBER;
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_trunc_date       DATE:= trunc(sysdate)-47;

    v_start_date DATE:= trunc(sysdate)-46;
    v_end_date   DATE:= trunc(sysdate)-1;

begin      
            select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
            INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC TOTAL 12MTH BALANCE',
                   'RAC TOTAL 12MTH BALANCE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
       begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rac_total_bal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rac_total_bal';
       v_sql := 'create table tmp_rac_total_bal as
       select acct_no,
                  ccy,
                  AVG (close_bal_lcy) close_bal_lcy,
                  sal_flag,
                  '||1||' qset
             from odsrev.rev_rac_end_month_bal
           GROUP BY acct_no, ccy, sal_flag';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rac_total_bal as
       select acct_no,
                  ccy,
                  AVG (close_bal_lcy) close_bal_lcy,
                  sal_flag,
                  '||1||' qset
             from odsrev.rev_rac_end_month_bal
           GROUP BY acct_no, ccy, sal_flag';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_mth_infocus_salary
as
      v_lastday          DATE := TRUNC (SYSDATE, 'MM') - 1;
      v_firstday_mnth    DATE := TRUNC (TRUNC (SYSDATE, 'MM') - 1, 'MM');
      v_date             date;
      v_processid        NUMBER;
      v_processname      VARCHAR2 (4000);
      v_message          VARCHAR2 (500);
      v_rows_processed   NUMBER;
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_trunc_date       DATE:= trunc(sysdate)-47;

    v_start_date DATE:= trunc(sysdate)-46;
    v_end_date   DATE:= trunc(sysdate)-1;

begin      
            select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
            INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC SALARY INFOCUS',
                   'RAC SALARY INFOCUS',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
       begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rac_last_sal_';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      --BELOW ADDED BY YENNIE TO MEET NEW RULES 09OCT2021
      ----and ac_open_date <= trunc(sysdate-180), removed 04mar2022 based on device finance samsung ish
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rac_last_sal_';
       v_sql := 'create table tmp_rac_last_sal_ as
       select
       cust_no,
       ac_desc, 
       a.cust_ac_no,
       mnth,
       sal_cal_type,
       sal_cr,
       ccy
       from(
       --from rev_sal_payments a,stglive.src_sttm_cust_accountb
       SELECT cust_ac_no,
                          TO_CHAR (trn_dt, ''YYMM'') mnth,
                          ''LITERAL_SAL'' sal_cal_type,
                          AVG (lcy_amount) sal_cr
       from (select distinct * from rev_sal_payments)
            where trn_dt BETWEEN '''||v_start_date||''' AND '''||v_end_date||'''
            AND account_class NOT IN (''010001'',
                                       ''070008'',
                                       ''060003'',
                                       ''010012'',
                                       ''020005'',
                                       ''020027'',
                                       ''050021'',
                                       ''090001'')
                 GROUP BY cust_ac_no, TO_CHAR (trn_dt, ''YYMM''))a,
                 stglive.src_sttm_cust_account b
                WHERE a.cust_ac_no = b.cust_ac_no
                and ac_open_date <= trunc(sysdate-90)'; ---trunc(sysdate-180)
                
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rac_last_sal_ as
       select
       cust_no,
       ac_desc, 
       a.cust_ac_no,
       mnth,
       sal_cal_type,
       sal_cr,
       ccy
       from(
       --from rev_sal_payments a,stglive.src_sttm_cust_accountb
       SELECT cust_ac_no,
                          TO_CHAR (trn_dt, ''YYMM'') mnth,
                          ''LITERAL_SAL'' sal_cal_type,
                          AVG (lcy_amount) sal_cr
       from (select distinct * from rev_sal_payments)
            where trn_dt BETWEEN '''||v_start_date||''' AND '''||v_end_date||'''
            AND account_class NOT IN (''010001'',
                                       ''070008'',
                                       ''060003'',
                                       ''010012'',
                                       ''020005'',
                                       ''020027'',
                                       ''050021'',
                                       ''090001'')
                 GROUP BY cust_ac_no, TO_CHAR (trn_dt, ''YYMM''))a,
                 stglive.src_sttm_cust_account b
                WHERE a.cust_ac_no = b.cust_ac_no
                ---and ac_open_date <= trunc(sysdate-90)';  ---trunc(sysdate-180)
                
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rac_last_mthsal_fin';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rac_last_mthsal_fin';
       v_sql := 'create table tmp_rac_last_mthsal_fin as
       select 
       CUST_NO,
                  ac_desc,
                  CUST_AC_NO,
                  MAX(MNTH) MNTH,
                  CCY,
                  AVG(SAL_CR) SAL_CR
             FROM tmp_rac_last_sal_
         GROUP BY CUST_NO,
                  ac_desc,
                  CUST_AC_NO,
                  CCY';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rac_last_mthsal_fin as
       select 
       CUST_NO,
                  ac_desc,
                  CUST_AC_NO,
                  MAX(MNTH) MNTH,
                  CCY,
                  AVG(SAL_CR) SAL_CR
             FROM tmp_rac_last_sal_
         GROUP BY CUST_NO,
                  ac_desc,
                  CUST_AC_NO,
                  CCY';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     DCP.prc_rac_refresh_mail (' REV MONTHLY_RUN',
                                'SUCCESSFUL',
                                v_rows_processed);
    
     
   UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
      
      
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);
         
         DCP.prc_rac_refresh_mail ('REV MONTHLY_RUN',
                                   'FAILED (' || v_message || ')',
                                   v_rows_processed);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
end;
procedure prc_daily_l1_drcr_sal
as
     v_processid        NUMBER;
      v_processname      VARCHAR2 (4000);
      v_message          VARCHAR2 (500);
      v_rows_processed   NUMBER;
      v_data_count       NUMBER := 0;
      p_process_date     DATE;
      v_staff_count      NUMBER;
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DRCR SAL DAILY',
                   'RAC DRCR SAL DAILY',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rev_rac_drcr_sal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rev_rac_drcr_sal';
       v_sql := 'create table tmp_rev_rac_drcr_sal as
       select 
       a.cust_ac_no,
                  amt_cr,
                  cnt_cr,
                  ROUND (amt_cr / cnt_cr, 2) avg_cr,
                  amt_dr,
                  cnt_dr,
                  ROUND (amt_dr / cnt_dr, 2) avg_dr,
                  AVG(sal_cr) total_sal, 
                  a.mnth,
                  NVL2 (b.cust_ac_no, ''Y'', ''N'') sal_flag,
                  '||0||' CHQ_BNCED,
                  a.mnth MONTHH
             FROM tmp_rac_last_mthsal_fin a, rev_rac_cr_dr_mnt b
            WHERE a.cust_ac_no = b.cust_ac_no(+)
              GROUP BY a.cust_ac_no,
                  amt_cr,
                  cnt_cr,
                  ROUND (amt_cr / cnt_cr, 2),
                  amt_dr,
                  cnt_dr,
                  ROUND (amt_dr / cnt_dr, 2),
                  a.mnth,
                  NVL2(b.cust_ac_no, ''Y'', ''N''),
                  '||0||',
                  a.mnth';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rev_rac_drcr_sal as
       select 
       a.cust_ac_no,
                  amt_cr,
                  cnt_cr,
                  ROUND (amt_cr / cnt_cr, 2) avg_cr,
                  amt_dr,
                  cnt_dr,
                  ROUND (amt_dr / cnt_dr, 2) avg_dr,
                  AVG(sal_cr) total_sal, 
                  a.mnth,
                  NVL2 (b.cust_ac_no, ''Y'', ''N'') sal_flag,
                  '||0||' CHQ_BNCED,
                  a.mnth MONTHH
             FROM tmp_rac_last_mthsal_fin a, rev_rac_cr_dr_mnt b
            WHERE a.cust_ac_no = b.cust_ac_no(+)
              GROUP BY a.cust_ac_no,
                  amt_cr,
                  cnt_cr,
                  ROUND (amt_cr / cnt_cr, 2),
                  amt_dr,
                  cnt_dr,
                  ROUND (amt_dr / cnt_dr, 2),
                  a.mnth,
                  NVL2(b.cust_ac_no, ''Y'', ''N''),
                  '||0||',
                  a.mnth';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_clr_consol_extract
as
      v_max_ref          date;
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC D CONSOLIDATE EXTRACT',
                   'RAC D CONSOLIDATE EXTRACT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    select max(reference_date) into v_max_ref from d_consolidated_credit_report_n where reference_date > trunc(sysdate-4);
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_tt_consolidated_credit_rep';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_tt_consolidated_credit_rep';
       v_sql := 'create table rev_tt_consolidated_credit_rep as
       select reference_date, cust_id, ref_no, product_code, currency, booking_date, loan_amount_tcy, 
        principal_outstanding_bal_tcy, rate, tenor, maturity_date, value_date, contract_status, process_date, branch_code, account_officer_code, 
        team_code, source, loan_amount_lcy, principal_outstanding_bal_lcy, last_credit_date, last_credit_amount, limit, director_1_name, director_2_name, 
        director_3_name, director_4_name, settlement_account, cbn_sub_sector, cbn_sector, obligor_risk_rating, asset_gl, total_collection_3m, 
        total_collection_3m_lcy, total_collection_6m, total_collection_6m_lcy, total_collection_12m, total_collection_12m_lcy, ngaap_classification, 
        ngaap_provision, total_exposure, collection_exposure_ratio_3m, collection_exposure_ratio_6m, collection_exposure_ratio_12m, exposure_type, 
        facility_type, '' '' collateral_desc, '' '' collateral_type, '' '' collateral_status, '' '' collateral_value, value_date valuation_date, dashboard_currency, dashboard_facility, 
        total_collection_1m, total_collection_1m_lcy, collection_exposure_ratio_1m, total_collection_1week, total_collection_1week_lcy, crms_code 
      from d_consolidated_credit_report_n where reference_date = trunc(sysdate-1)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_tt_consolidated_credit_rep as
       select reference_date, cust_id, ref_no, product_code, currency, booking_date, loan_amount_tcy, 
        principal_outstanding_bal_tcy, rate, tenor, maturity_date, value_date, contract_status, process_date, branch_code, account_officer_code, 
        team_code, source, loan_amount_lcy, principal_outstanding_bal_lcy, last_credit_date, last_credit_amount, limit, director_1_name, director_2_name, 
        director_3_name, director_4_name, settlement_account, cbn_sub_sector, cbn_sector, obligor_risk_rating, asset_gl, total_collection_3m, 
        total_collection_3m_lcy, total_collection_6m, total_collection_6m_lcy, total_collection_12m, total_collection_12m_lcy, ngaap_classification, 
        ngaap_provision, total_exposure, collection_exposure_ratio_3m, collection_exposure_ratio_6m, collection_exposure_ratio_12m, exposure_type, 
        facility_type, '' '' collateral_desc, '' '' collateral_type, '' '' collateral_status, '' '' collateral_value, value_date valuation_date, dashboard_currency, dashboard_facility, 
        total_collection_1m, total_collection_1m_lcy, collection_exposure_ratio_1m, total_collection_1week, total_collection_1week_lcy, crms_code 
      from d_consolidated_credit_report_n where reference_date = trunc(sysdate-1)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_daily_block1a
as
      
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DAILY BLOCK 1A',
                   'RAC DAILY BLOCK 1A',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rev_rac_v_block1a';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rev_rac_v_block1a';
       v_sql := 'create table tmp_rev_rac_v_block1a as
       select /*+ use_hash(z1, z2,
                dim_usr_group_related, clrcustomer) no_index(z3 IDX_ACCT_CODE) no_index(clrcustomer IDX$$_1991B0006)  */ z3.accountofficer_name,
                dim_usr_group_related.group_name, dim_clr_product.clr_product_name as product_name, clrcustomer.customer_name,
                d.amt_od_limit as amt_od_limit, z2.acy_avl_bal as bal_available, z2.date_last_cr as dat_last_cr, 1 as ctr_days_overline_curr,
                trim ( z1.settlement_account) as settlement_account, z1.cust_id as cust_id, z1.ref_no, z1.product_code, z1.currency, z1.booking_date,
                z1.loan_amount_tcy, z1.principal_outstanding_bal_tcy, z1.rate, z1.tenor, z1.maturity_date, z1.value_date, z1.account_officer_code,
                z1.team_code, z1.loan_amount_lcy, z1.principal_outstanding_bal_lcy, z1.last_credit_date, z1.total_exposure, z1.exposure_type,
                z1.facility_type
                from rev_tt_consolidated_credit_rep z1, stglive.src_sttm_cust_account z2, (select clr_product_code,
                clr_product_name from stglive.dim_clr_product union all select ''MHSS'', ''MHSS'' from dual) dim_clr_product,
                (select cod_cust_id, group_name from stglive.dim_usr_group_related where dim_usr_group_related.cod_cust_id != ''OTHERS'') dim_usr_group_related,
                stglive.bank_team z3, stglive.clrcustomer, (select customer_no, cust_ac_no, od_limit amt_od_limit from stglive.tbl_overdraft_new) d
                where z2.auth_stat(+) = ''A''
                and z1.settlement_account = z2.cust_ac_no and z1.product_code = dim_clr_product.clr_product_code(+)
                and to_number (z1.cust_id) = clrcustomer.customer_id(+) and z1.account_officer_code = z3.accountofficer_code(+)
                and z1.cust_id = dim_usr_group_related.cod_cust_id(+)
            and z1.settlement_account = d.cust_ac_no(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rev_rac_v_block1a as
       select /*+ use_hash(z1, z2,
                dim_usr_group_related, clrcustomer) no_index(z3 IDX_ACCT_CODE) no_index(clrcustomer IDX$$_1991B0006)  */ z3.accountofficer_name,
                dim_usr_group_related.group_name, dim_clr_product.clr_product_name as product_name, clrcustomer.customer_name,
                d.amt_od_limit as amt_od_limit, z2.acy_avl_bal as bal_available, z2.date_last_cr as dat_last_cr, 1 as ctr_days_overline_curr,
                trim ( z1.settlement_account) as settlement_account, z1.cust_id as cust_id, z1.ref_no, z1.product_code, z1.currency, z1.booking_date,
                z1.loan_amount_tcy, z1.principal_outstanding_bal_tcy, z1.rate, z1.tenor, z1.maturity_date, z1.value_date, z1.account_officer_code,
                z1.team_code, z1.loan_amount_lcy, z1.principal_outstanding_bal_lcy, z1.last_credit_date, z1.total_exposure, z1.exposure_type,
                z1.facility_type
                from rev_tt_consolidated_credit_rep z1, stglive.src_sttm_cust_account z2, (select clr_product_code,
                clr_product_name from stglive.dim_clr_product union all select ''MHSS'', ''MHSS'' from dual) dim_clr_product,
                (select cod_cust_id, group_name from stglive.dim_usr_group_related where dim_usr_group_related.cod_cust_id != ''OTHERS'') dim_usr_group_related,
                stglive.bank_team z3, stglive.clrcustomer, (select customer_no, cust_ac_no, od_limit amt_od_limit from stglive.tbl_overdraft_new) d
                where z2.auth_stat(+) = ''A''
                and z1.settlement_account = z2.cust_ac_no and z1.product_code = dim_clr_product.clr_product_code(+)
                and to_number (z1.cust_id) = clrcustomer.customer_id(+) and z1.account_officer_code = z3.accountofficer_code(+)
                and z1.cust_id = dim_usr_group_related.cod_cust_id(+)
            and z1.settlement_account = d.cust_ac_no(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_daily_block1b
as
      v_max_ref          date;
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DAILY BLOCK 1B',
                   'RAC DAILY BLOCK 1B',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rev_rac_v_block1b';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rev_rac_v_block1b';
       v_sql := 'create table tmp_rev_rac_v_block1b as
SELECT /*+ use_hash(z1, z2, z3, z4) no_index(z3 PK01_STTM_ACCOUNT_CLASS) no_index(z4 PK01_STTM_CONTRACT_STATUSES)  */
DISTINCT  ''du'' AS cod_module,
                          z4.DESCRIPTION
                             AS txt_acct_status,
                          z1.RECORD_STAT
                             AS cod_acct_status,
                          z1.ccy AS nam_ccy_short,
                          z3.DESCRIPTION AS nam_product,
                          z1.ACCOUNT_CLASS AS cod_prod,
                          z1.CUST_AC_NO AS cod_acct_no,
                          z1.AC_DESC cod_acct_title,
                          z1.CUST_NO AS cod_cust,
                          z1.ccy AS cod_ccy,
                          z1.acc_status AS cod_acct_stat,
                          z1.ACY_AVL_BAL
                             AS other_bal_available
                     FROM stglive.src_STTM_CUST_ACCOUNT z1,
                          rev_tt_consolidated_credit_rep z2,  
                          stglive.src_STTM_ACCOUNT_CLASS z3,
                          stglive.src_STTM_CONTRACT_STATUSES z4
                    WHERE     z2.product_code IN
                                 (''PLS'',
                                  ''ALS'',
                                  ''HLSB'',
                                  ''AMGL'',
                                  ''IMGL'',
                                  ''PDAD'',
                                  ''AFSF'',
                                  ''STLV'',
                                  ''STLP'',
                                  ''STLM'',
                                  ''LT01'',
                                  ''LTA1'',
                                  ''TL01'',
                                  ''TLA1'',
                                  ''TL02'',
                                  ''MPTL'',
                                  ''AFLF'',
                                  ''MHSS'',
                                  ''LT0C'',
                                  ''TL0C'',
                                  ''CHPF'',
                                  ''FL01'',
                                  ''MSME'',
                                  ''LTP1'',
                                  ''FUSS'',
                                  ''IDCP'',
                                  ''AMPD'',
                                  ''CDLS'',
                                  ''050031'',
                                  ''050033'',
                                  ''AGLOTR'',
                                  ''010003'',
                                  ''030002'',
                                  ''010002'',
                                  ''070007'',
                                  ''050032'',
                                  ''080005'',
                                  ''030001'',
                                  ''010020'',
                                  ''010016'',
                                  ''010023'',
                                  ''010024'',
                                  ''070003'',
                                  ''010018'',
                                  ''080004'',
                                  ''010007'',
                                  ''010008'',
                                  ''010015'',
                                  ''080001'',
                                  ''070001'',
                                  ''010017'',
                                  ''020008'',
                                  ''020007'',
                                  ''010004'',
                                  ''010011'',
                                  ''010006'',
                                  ''010021'',
                                  ''020005'',
                                  ''020003'',
                                  ''020001'',
                                  ''020002'',
                                  ''020009'',
                                  ''020006'')
                          AND (   z1.RECORD_STAT <> ''C''
                               OR (    z1.RECORD_STAT =
                                          ''C''
                                   AND z1.ACY_AVL_BAL > 0))
                          AND z1.acc_status =
                                 z4.status_code(+)
                          AND z1.CUST_NO =
                                 z2.cust_id
                          AND z1.ACCOUNT_CLASS =
                                 z3.ACCOUNT_CLASS
                          AND z1.AUTH_STAT = ''A''
                          AND z1.ACCOUNT_CLASS NOT IN
                                 (''050017'',
                                  ''050023'',
                                  ''050018'',
                                  ''050001'',
                                  ''050016'',
                                  ''050024'',
                                  ''050021'',
                                  ''050020'',
                                  ''050019'',
                                  ''050002'',
                                  ''050005'',
                                  ''050003'',
                                  ''050004'',
                                  ''050022'',
                                  ''050009'',
                                  ''050010'',
                                  ''050006'',
                                  ''050007'',
                                  ''050015'',
                                  ''050008'',
                                  ''050013'',
                                  ''050014'',
                                  ''050011'',
                                  ''050012'',
                                  ''060003'',
                                  ''070008'')
                          AND z1.CUST_AC_NO NOT IN
                                 (SELECT TRIM (settlement_account) FROM rev_tt_consolidated_credit_rep
                                   WHERE     product_code IN
                                                (''060003'', ''070008'' ))';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rev_rac_v_block1b as
    SELECT /*+ use_hash(z1, z2, z3, z4) no_index(z3 PK01_STTM_ACCOUNT_CLASS) no_index(z4 PK01_STTM_CONTRACT_STATUSES)  */
    DISTINCT  ''du'' AS cod_module,
                          z4.DESCRIPTION
                             AS txt_acct_status,
                          z1.RECORD_STAT
                             AS cod_acct_status,
                          z1.ccy AS nam_ccy_short,
                          z3.DESCRIPTION AS nam_product,
                          z1.ACCOUNT_CLASS AS cod_prod,
                          z1.CUST_AC_NO AS cod_acct_no,
                          z1.AC_DESC cod_acct_title,
                          z1.CUST_NO AS cod_cust,
                          z1.ccy AS cod_ccy,
                          z1.acc_status AS cod_acct_stat,
                          z1.ACY_AVL_BAL
                             AS other_bal_available
                     FROM stglive.src_STTM_CUST_ACCOUNT z1,
                          rev_tt_consolidated_credit_rep z2,
                          stglive.src_STTM_ACCOUNT_CLASS z3,
                          stglive.src_STTM_CONTRACT_STATUSES z4
                    WHERE     z2.product_code IN
                                 (''PLS'',
                                  ''ALS'',
                                  ''HLSB'',
                                  ''AMGL'',
                                  ''IMGL'',
                                  ''PDAD'',
                                  ''AFSF'',
                                  ''STLV'',
                                  ''STLP'',
                                  ''STLM'',
                                  ''LT01'',
                                  ''LTA1'',
                                  ''TL01'',
                                  ''TLA1'',
                                  ''TL02'',
                                  ''MPTL'',
                                  ''AFLF'',
                                  ''MHSS'',
                                  ''LT0C'',
                                  ''TL0C'',
                                  ''CHPF'',
                                  ''FL01'',
                                  ''MSME'',
                                  ''LTP1'',
                                  ''FUSS'',
                                  ''IDCP'',
                                  ''AMPD'',
                                  ''CDLS'',
                                  ''050031'',
                                  ''050033'',
                                  ''AGLOTR'',
                                  ''010003'',
                                  ''030002'',
                                  ''010002'',
                                  ''070007'',
                                  ''050032'',
                                  ''080005'',
                                  ''030001'',
                                  ''010020'',
                                  ''010016'',
                                  ''010023'',
                                  ''010024'',
                                  ''070003'',
                                  ''010018'',
                                  ''080004'',
                                  ''010007'',
                                  ''010008'',
                                  ''010015'',
                                  ''080001'',
                                  ''070001'',
                                  ''010017'',
                                  ''020008'',
                                  ''020007'',
                                  ''010004'',
                                  ''010011'',
                                  ''010006'',
                                  ''010021'',
                                  ''020005'',
                                  ''020003'',
                                  ''020001'',
                                  ''020002'',
                                  ''020009'',
                                  ''020006'')
                          AND (   z1.RECORD_STAT <> ''C''
                               OR (    z1.RECORD_STAT =
                                          ''C''
                                   AND z1.ACY_AVL_BAL > 0))
                          AND z1.acc_status =
                                 z4.status_code(+)
                          AND z1.CUST_NO =
                                 z2.cust_id
                          AND z1.ACCOUNT_CLASS =
                                 z3.ACCOUNT_CLASS
                          AND z1.AUTH_STAT = ''A''
                          AND z1.ACCOUNT_CLASS NOT IN
                                 (''050017'',
                                  ''050023'',
                                  ''050018'',
                                  ''050001'',
                                  ''050016'',
                                  ''050024'',
                                  ''050021'',
                                  ''050020'',
                                  ''050019'',
                                  ''050002'',
                                  ''050005'',
                                  ''050003'',
                                  ''050004'',
                                  ''050022'',
                                  ''050009'',
                                  ''050010'',
                                  ''050006'',
                                  ''050007'',
                                  ''050015'',
                                  ''050008'',
                                  ''050013'',
                                  ''050014'',
                                  ''050011'',
                                  ''050012'',
                                  ''060003'',
                                  ''070008'')
                          AND z1.CUST_AC_NO NOT IN
                                 (SELECT TRIM (settlement_account) FROM rev_tt_consolidated_credit_rep
                                   WHERE     product_code IN
                                                (''060003'', ''070008'' ))';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 
  procedure prc_daily_block2a_1
as
      
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DAILY BLOCK 2A1',
                   'RAC DAILY BLOCK 2A1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rev_rac_v_block2a_1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rev_rac_v_block2a_1';
       v_sql := 'create table tmp_rev_rac_v_block2a_1 as
select /*+ use_hash(e,a,b,c) no_index(c pk_sttm_cust_account_linkages) */
                                  a.cust_ac_no,
                                            sum (e.linked_amount) amt_od_limit
                                       from stglive.elvw_pool_coll_link_odint_new e,
                                            stglive.src_sttm_cust_account a,
                                            stglive.src_sttm_customer b,
                                            stglive.src_sttm_cust_account_linkages c
                                      where ((e.pool_code || ''1'' =
                                                            rtrim (
                                                               c.linked_ref_no)
                                                     and c.linkage_type = ''F'')
                                                 or (    e.pool_code =
                                                            rtrim (
                                                               c.linked_ref_no)
                                            and c.linkage_type = ''P''))
                                            and e.liab_id = b.liability_no
                                            and a.cust_no = b.customer_no
                                            and a.cust_ac_no = c.cust_ac_no
                                            and a.branch_code = c.branch_code
                                            and trunc(eff_start_date) <= trunc(sysdate)
                                            and trunc(eff_end_date) >= trunc(sysdate)
                                            group by a.cust_ac_no';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rev_rac_v_block2a_1 as
select /*+ use_hash(e,a,b,c) no_index(c pk_sttm_cust_account_linkages) */
                                  a.cust_ac_no,
                                            sum (e.linked_amount) amt_od_limit
                                       from stglive.elvw_pool_coll_link_odint_new e,
                                            stglive.src_sttm_cust_account a,
                                            stglive.src_sttm_customer b,
                                            stglive.src_sttm_cust_account_linkages c
                                      where ((e.pool_code || ''1'' =
                                                            rtrim (
                                                               c.linked_ref_no)
                                                     and c.linkage_type = ''F'')
                                                 or (    e.pool_code =
                                                            rtrim (
                                                               c.linked_ref_no)
                                                     and c.linkage_type = ''P''))
                                            and e.liab_id = b.liability_no
                                            and a.cust_no = b.customer_no
                                            and a.cust_ac_no = c.cust_ac_no
                                            and a.branch_code = c.branch_code
                                            and trunc(eff_start_date) <= trunc(sysdate)
                                            and trunc(eff_end_date) >= trunc(sysdate)
                                            group by a.cust_ac_no';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_daily_block2a_2
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DAILY BLOCK 2A2',
                   'RAC DAILY BLOCK 2A2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rev_rac_v_block2a_2';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rev_rac_v_block2a_2';
       v_sql := 'create table tmp_rev_rac_v_block2a_2 as
        SELECT a.cust_ac_no,
       D.amt_od_limit,
                                  a.ACY_AVL_BAL,
                                  a.date_last_cr,
                                  1 AS ctr_days_overline_curr
                             FROM stglive.src_STTM_CUST_ACCOUNT a,
                                  stglive.src_MITB_CLASS_MAPPING b,
                                  stglive.bank_team c,
                                  tmp_rev_rac_v_block2a_1 D
                            WHERE     a.CUST_NO = b.CUSTOMER
                                  AND b.COMP_MIS_4 = c.accountofficer_code
                                  AND a.AUTH_STAT = ''A''
                                   AND D.amt_od_limit > 1
                                  AND a.ACCOUNT_CLASS NOT IN
                                         (''050017'',
                                          ''010011'',
                                          ''070008'',
                                          ''060003'')
                                  AND A.Cust_Ac_No = D.Cust_Ac_No(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rev_rac_v_block2a_2 as
        SELECT a.cust_ac_no,
       D.amt_od_limit,
                                  a.ACY_AVL_BAL,
                                  a.date_last_cr,
                                  1 AS ctr_days_overline_curr
                             FROM stglive.src_STTM_CUST_ACCOUNT a,
                                  stglive.src_MITB_CLASS_MAPPING b,
                                  stglive.bank_team c,
                                  tmp_rev_rac_v_block2a_1 D
                            WHERE     a.CUST_NO = b.CUSTOMER
                                  AND b.COMP_MIS_4 = c.accountofficer_code
                                  AND a.AUTH_STAT = ''A''
                                   AND D.amt_od_limit > 1
                                  AND a.ACCOUNT_CLASS NOT IN
                                         (''050017'',
                                          ''010011'',
                                          ''070008'',
                                          ''060003'')
                                  AND A.Cust_Ac_No = D.Cust_Ac_No(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_daily_block2a
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DAILY BLOCK 2A',
                   'RAC DAILY BLOCK 2A',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rev_rac_v_block2a';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rev_rac_v_block2a';
       v_sql := 'create table tmp_rev_rac_v_block2a as
        select /*+ use_hash(a, b, c, d,e,f) no_index(d IDX$$_1991B0005) no_index(e IDX_ACCT_CODE) no_index(f IDX$$_1991B0006)  */
        e.accountofficer_name,
                          d.group_name,
                          c.clr_product_name as product_name,
                          f.customer_name,
                          b.amt_od_limit as amt_od_limit,
                          b.acy_avl_bal as bal_available,
                          b.date_last_cr as dat_last_cr,
                          b.ctr_days_overline_curr as ctr_days_overline_curr,
                          trim (a.settlement_account) as settlement_account,
                          a.cust_id as cust_id,
                          a.ref_no,
                          a.product_code,
                          a.currency,
                          a.booking_date,
                          a.loan_amount_tcy,
                          a.principal_outstanding_bal_tcy,
                          a.rate,
                          a.tenor,
                          a.maturity_date,
                          a.value_date,
                          a.account_officer_code,
                          a.team_code,
                          a.loan_amount_lcy,
                          a.principal_outstanding_bal_lcy,
                          a.last_credit_date,
                          a.total_exposure,
                          a.exposure_type,
                          a.facility_type
                     from rev_tt_consolidated_credit_rep a,
                          tmp_rev_rac_v_block2a_2 b,
                          (select clr_product_code, clr_product_name
                             from stglive.dim_clr_product
                           union
                           select ''MHSS'', ''MHSS'' from dual) c,
                          (select cod_cust_id, group_name
                             from stglive.dim_usr_group_related
                            where dim_usr_group_related.cod_cust_id !=''OTHERS'') d,
                          stglive.bank_team e,
                          stglive.clrcustomer f
                    where facility_type = ''OVERDRAFT''
                          and limit > 1
                          and trim (a.settlement_account) =  trim (b.cust_ac_no)
                          and a.product_code = c.clr_product_code
                          and to_number (a.cust_id) = f.customer_id(+)
                          and a.account_officer_code = e.accountofficer_code(+)
                          and a.cust_id = d.cod_cust_id(+)';
            execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rev_rac_v_block2a as
        select /*+ use_hash(a, b, c, d,e,f) no_index(d IDX$$_1991B0005) no_index(e IDX_ACCT_CODE) no_index(f IDX$$_1991B0006)  */
        e.accountofficer_name,
                          d.group_name,
                          c.clr_product_name as product_name,
                          f.customer_name,
                          b.amt_od_limit as amt_od_limit,
                          b.acy_avl_bal as bal_available,
                          b.date_last_cr as dat_last_cr,
                          b.ctr_days_overline_curr as ctr_days_overline_curr,
                          trim (a.settlement_account) as settlement_account,
                          a.cust_id as cust_id,
                          a.ref_no,
                          a.product_code,
                          a.currency,
                          a.booking_date,
                          a.loan_amount_tcy,
                          a.principal_outstanding_bal_tcy,
                          a.rate,
                          a.tenor,
                          a.maturity_date,
                          a.value_date,
                          a.account_officer_code,
                          a.team_code,
                          a.loan_amount_lcy,
                          a.principal_outstanding_bal_lcy,
                          a.last_credit_date,
                          a.total_exposure,
                          a.exposure_type,
                          a.facility_type
                     from rev_tt_consolidated_credit_rep a,
                          tmp_rev_rac_v_block2a_2 b,
                          (select clr_product_code, clr_product_name
                             from stglive.dim_clr_product
                           union
                           select ''MHSS'', ''MHSS'' from dual) c,
                          (select cod_cust_id, group_name
                             from stglive.dim_usr_group_related
                            where dim_usr_group_related.cod_cust_id !=''OTHERS'') d,
                          stglive.bank_team e,
                          stglive.clrcustomer f
                    where facility_type = ''OVERDRAFT''
                          and limit > 1
                          and trim (a.settlement_account) =  trim (b.cust_ac_no)
                          and a.product_code = c.clr_product_code
                          and to_number (a.cust_id) = f.customer_id(+)
                          and a.account_officer_code = e.accountofficer_code(+)
                          and a.cust_id = d.cod_cust_id(+)';
            execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_gen_od_setuacct
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DAILY OD ACCT',
                   'RAC DAILY OD ACCT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rev_od_settlemnt_acct';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rev_od_settlemnt_acct';
       v_sql := 'create table tmp_rev_od_settlemnt_acct as
        SELECT TRIM(SETTLEMENT_ACCOUNT) SETTLEMENT_ACCOUNT
                    FROM rev_tt_consolidated_credit_rep
                   WHERE (FACILITY_TYPE = ''OVERDRAFT''
                          OR PRODUCT_CODE IN(''060003'', ''070008''))';
            execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rev_od_settlemnt_acct as
        SELECT TRIM(SETTLEMENT_ACCOUNT) SETTLEMENT_ACCOUNT
                    FROM rev_tt_consolidated_credit_rep
                   WHERE (FACILITY_TYPE = ''OVERDRAFT''
                          OR PRODUCT_CODE IN(''060003'', ''070008''))';
            execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
       
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_daily_block2b
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DAILY BLOCK 2B',
                   'RAC DAILY BLOCK 2B',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rev_rac_v_block2b';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rev_rac_v_block2b';
       v_sql := 'create table tmp_rev_rac_v_block2b as
        select /*+ use_hash(z1, z2, z3, z4) no_index(z3 PK01_STTM_ACCOUNT_CLASS) no_index(z4 PK01_STTM_CONTRACT_STATUSES)  */
            ''du'' as cod_module,
                                  z4.description
                                     as txt_acct_status,
                                  z1.record_stat
                                     as cod_acct_status,
                                  z1.ccy as nam_ccy_short,
                                  z3.description
                                     as nam_product,
                                  z1.account_class
                                     as cod_prod,
                                  z1.cust_ac_no
                                     as cod_acct_no,
                                  z1.ac_desc
                                     cod_acct_title,
                                  z1.cust_no as cod_cust,
                                  z1.ccy as cod_ccy,
                                  z1.acc_status
                                     as cod_acct_stat,
                                  z1.acy_avl_bal
                                     as other_bal_available
                             from stglive.src_sttm_cust_account z1,
                                  rev_tt_consolidated_credit_rep z2,
                                  stglive.src_sttm_account_class z3,
                                  stglive.src_sttm_contract_statuses z4
                            where     z2.facility_type =''OVERDRAFT''
                                  and (z1.record_stat <>''C'' or(z1.record_stat =''C'' and z1.acy_avl_bal >0))
                                  and z1.acc_status =
                                         z4.status_code(+)
                                  and z1.cust_no =
                                         z2.cust_id
                                  and z1.account_class =
                                         z3.account_class
                                  and z1.auth_stat = ''A''
                                  and z1.account_class not in
                                         (''050017'',
                                          ''050023'',
                                          ''050018'',
                                          ''050001'',
                                          ''050016'',
                                          ''050024'',
                                          ''050021'',
                                          ''050020'',
                                          ''050019'',
                                          ''050002'',
                                          ''050005'',
                                          ''050003'',
                                          ''050004'',
                                          ''050022'',
                                          ''050009'',
                                          ''050010'',
                                          ''050006'',
                                          ''050007'',
                                          ''050015'',
                                          ''050008'',
                                          ''050013'',
                                          ''050014'',
                                          ''050011'',
                                          ''050012'',
                                          ''060003'',
                                          ''070008'') 
                                  and z1.cust_ac_no not in
                                         (select trim(settlement_account)
                                            from tmp_rev_od_settlemnt_acct)';
            execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rev_rac_v_block2b as
        select /*+ use_hash(z1, z2, z3, z4) no_index(z3 PK01_STTM_ACCOUNT_CLASS) no_index(z4 PK01_STTM_CONTRACT_STATUSES)  */
            ''du'' as cod_module,
                                  z4.description
                                     as txt_acct_status,
                                  z1.record_stat
                                     as cod_acct_status,
                                  z1.ccy as nam_ccy_short,
                                  z3.description
                                     as nam_product,
                                  z1.account_class
                                     as cod_prod,
                                  z1.cust_ac_no
                                     as cod_acct_no,
                                  z1.ac_desc
                                     cod_acct_title,
                                  z1.cust_no as cod_cust,
                                  z1.ccy as cod_ccy,
                                  z1.acc_status
                                     as cod_acct_stat,
                                  z1.acy_avl_bal
                                     as other_bal_available
                             from stglive.src_sttm_cust_account z1,
                                  rev_tt_consolidated_credit_rep z2,
                                  stglive.src_sttm_account_class z3,
                                  stglive.src_sttm_contract_statuses z4
                            where     z2.facility_type =''OVERDRAFT''
                                  and (z1.record_stat <>''C'' or(z1.record_stat =''C'' and z1.acy_avl_bal >0))
                                  and z1.acc_status =
                                         z4.status_code(+)
                                  and z1.cust_no =
                                         z2.cust_id
                                  and z1.account_class =
                                         z3.account_class
                                  and z1.auth_stat = ''A''
                                  and z1.account_class not in
                                         (''050017'',
                                          ''050023'',
                                          ''050018'',
                                          ''050001'',
                                          ''050016'',
                                          ''050024'',
                                          ''050021'',
                                          ''050020'',
                                          ''050019'',
                                          ''050002'',
                                          ''050005'',
                                          ''050003'',
                                          ''050004'',
                                          ''050022'',
                                          ''050009'',
                                          ''050010'',
                                          ''050006'',
                                          ''050007'',
                                          ''050015'',
                                          ''050008'',
                                          ''050013'',
                                          ''050014'',
                                          ''050011'',
                                          ''050012'',
                                          ''060003'',
                                          ''070008'') 
                                  and z1.cust_ac_no not in
                                         (select trim(settlement_account)
                                            from tmp_rev_od_settlemnt_acct)';
            execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_daily_v_block1
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DAILY V BLOCK',
                   'RAC DAILY V BLOCK',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rev_rac_v_block1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rev_rac_v_block1';
  v_sql := 'create table tmp_rev_rac_v_block1 as
    select accountofficer_name, group_name, product_name, customer_name, amt_od_limit,
    bal_available,dat_last_cr, ctr_days_overline_curr, settlement_account, cust_id, ref_no,
    product_code, currency, booking_date, loan_amount_tcy,principal_outstanding_bal_tcy,
    rate, tenor, maturity_date, value_date, account_officer_code, team_code, loan_amount_lcy, 
    principal_outstanding_bal_lcy, last_credit_date, total_exposure, exposure_type, facility_type,
    cod_module, txt_acct_status,cod_acct_status, nam_ccy_short, nam_product, cod_prod, cod_acct_no,
    cod_acct_title, cod_cust, cod_ccy, cod_acct_stat, other_bal_available from(
    select "ACCOUNTOFFICER_NAME",
          "GROUP_NAME",
          "PRODUCT_NAME",
          "CUSTOMER_NAME",
          "AMT_OD_LIMIT",
          "BAL_AVAILABLE",
          "DAT_LAST_CR",
          "CTR_DAYS_OVERLINE_CURR",
          "SETTLEMENT_ACCOUNT",
          "CUST_ID",
          "REF_NO",
          "PRODUCT_CODE",
          "CURRENCY",
          "BOOKING_DATE",
          "LOAN_AMOUNT_TCY",
          "PRINCIPAL_OUTSTANDING_BAL_TCY",
          "RATE",
          "TENOR",
          "MATURITY_DATE",
          "VALUE_DATE",
          "ACCOUNT_OFFICER_CODE",
          "TEAM_CODE",
          "LOAN_AMOUNT_LCY",
          "PRINCIPAL_OUTSTANDING_BAL_LCY",
          "LAST_CREDIT_DATE",
          "TOTAL_EXPOSURE",
          "EXPOSURE_TYPE",
          "FACILITY_TYPE",
          "COD_MODULE",
          "TXT_ACCT_STATUS",
          "COD_ACCT_STATUS",
          "NAM_CCY_SHORT",
          "NAM_PRODUCT",
          "COD_PROD",
          "COD_ACCT_NO",
          "COD_ACCT_TITLE",
          "COD_CUST",
          "COD_CCY",
          "COD_ACCT_STAT",
          "OTHER_BAL_AVAILABLE" from
        (select * from tmp_rev_rac_v_block1a a,  tmp_rev_rac_v_block1b b
    WHERE a.cust_id = b.cod_cust(+))
    union all
    select "ACCOUNTOFFICER_NAME",
          "GROUP_NAME",
          "PRODUCT_NAME",
          "CUSTOMER_NAME",
          "AMT_OD_LIMIT",
          "BAL_AVAILABLE",
          "DAT_LAST_CR",
          "CTR_DAYS_OVERLINE_CURR",
          "SETTLEMENT_ACCOUNT",
          "CUST_ID",
          "REF_NO",
          "PRODUCT_CODE",
          "CURRENCY",
          "BOOKING_DATE",
          "LOAN_AMOUNT_TCY",
          "PRINCIPAL_OUTSTANDING_BAL_TCY",
          "RATE",
          "TENOR",
          "MATURITY_DATE",
          "VALUE_DATE",
          "ACCOUNT_OFFICER_CODE",
          "TEAM_CODE",
          "LOAN_AMOUNT_LCY",
          "PRINCIPAL_OUTSTANDING_BAL_LCY",
          "LAST_CREDIT_DATE",
          "TOTAL_EXPOSURE",
          "EXPOSURE_TYPE",
          "FACILITY_TYPE",
          "COD_MODULE",
          "TXT_ACCT_STATUS",
          "COD_ACCT_STATUS",
          "NAM_CCY_SHORT",
          "NAM_PRODUCT",
          "COD_PROD",
          "COD_ACCT_NO",
          "COD_ACCT_TITLE",
          "COD_CUST",
          "COD_CCY",
          "COD_ACCT_STAT",
          "OTHER_BAL_AVAILABLE" from
     (select * from tmp_rev_rac_v_block2a a,  (select distinct * from tmp_rev_rac_v_block2b )b
   where a.cust_id = b.cod_cust(+)))';
   execute immediate v_sql;
   v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rev_rac_v_block1 as
    select accountofficer_name, group_name, product_name, customer_name, amt_od_limit,
    bal_available,dat_last_cr, ctr_days_overline_curr, settlement_account, cust_id, ref_no,
    product_code, currency, booking_date, loan_amount_tcy,principal_outstanding_bal_tcy,
    rate, tenor, maturity_date, value_date, account_officer_code, team_code, loan_amount_lcy, 
    principal_outstanding_bal_lcy, last_credit_date, total_exposure, exposure_type, facility_type,
    cod_module, txt_acct_status,cod_acct_status, nam_ccy_short, nam_product, cod_prod, cod_acct_no,
    cod_acct_title, cod_cust, cod_ccy, cod_acct_stat, other_bal_available from(
    select "ACCOUNTOFFICER_NAME",
          "GROUP_NAME",
          "PRODUCT_NAME",
          "CUSTOMER_NAME",
          "AMT_OD_LIMIT",
          "BAL_AVAILABLE",
          "DAT_LAST_CR",
          "CTR_DAYS_OVERLINE_CURR",
          "SETTLEMENT_ACCOUNT",
          "CUST_ID",
          "REF_NO",
          "PRODUCT_CODE",
          "CURRENCY",
          "BOOKING_DATE",
          "LOAN_AMOUNT_TCY",
          "PRINCIPAL_OUTSTANDING_BAL_TCY",
          "RATE",
          "TENOR",
          "MATURITY_DATE",
          "VALUE_DATE",
          "ACCOUNT_OFFICER_CODE",
          "TEAM_CODE",
          "LOAN_AMOUNT_LCY",
          "PRINCIPAL_OUTSTANDING_BAL_LCY",
          "LAST_CREDIT_DATE",
          "TOTAL_EXPOSURE",
          "EXPOSURE_TYPE",
          "FACILITY_TYPE",
          "COD_MODULE",
          "TXT_ACCT_STATUS",
          "COD_ACCT_STATUS",
          "NAM_CCY_SHORT",
          "NAM_PRODUCT",
          "COD_PROD",
          "COD_ACCT_NO",
          "COD_ACCT_TITLE",
          "COD_CUST",
          "COD_CCY",
          "COD_ACCT_STAT",
          "OTHER_BAL_AVAILABLE" from
        (select * from tmp_rev_rac_v_block1a a,  tmp_rev_rac_v_block1b b
    WHERE a.cust_id = b.cod_cust(+))
    union all
    select "ACCOUNTOFFICER_NAME",
          "GROUP_NAME",
          "PRODUCT_NAME",
          "CUSTOMER_NAME",
          "AMT_OD_LIMIT",
          "BAL_AVAILABLE",
          "DAT_LAST_CR",
          "CTR_DAYS_OVERLINE_CURR",
          "SETTLEMENT_ACCOUNT",
          "CUST_ID",
          "REF_NO",
          "PRODUCT_CODE",
          "CURRENCY",
          "BOOKING_DATE",
          "LOAN_AMOUNT_TCY",
          "PRINCIPAL_OUTSTANDING_BAL_TCY",
          "RATE",
          "TENOR",
          "MATURITY_DATE",
          "VALUE_DATE",
          "ACCOUNT_OFFICER_CODE",
          "TEAM_CODE",
          "LOAN_AMOUNT_LCY",
          "PRINCIPAL_OUTSTANDING_BAL_LCY",
          "LAST_CREDIT_DATE",
          "TOTAL_EXPOSURE",
          "EXPOSURE_TYPE",
          "FACILITY_TYPE",
          "COD_MODULE",
          "TXT_ACCT_STATUS",
          "COD_ACCT_STATUS",
          "NAM_CCY_SHORT",
          "NAM_PRODUCT",
          "COD_PROD",
          "COD_ACCT_NO",
          "COD_ACCT_TITLE",
          "COD_CUST",
          "COD_CCY",
          "COD_ACCT_STAT",
          "OTHER_BAL_AVAILABLE" from
     (select * from tmp_rev_rac_v_block2a a,  (select distinct * from tmp_rev_rac_v_block2b )b
   where a.cust_id = b.cod_cust(+)))';
   execute immediate v_sql;
   v_rows_processed := SQL%ROWCOUNT;
   end if;
     
   UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_loan_report_prep1
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC LOAN REPORT 1',
                   'RAC LOAN REPORT 1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_rac_loan_report_prep1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
      if(tab_cnt)>=1 Then
      execute immediate 'drop table rev_rac_loan_report_prep1';
       v_sql := 'create table rev_rac_loan_report_prep1 as
        select * from tmp_rev_rac_v_block1';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_rac_loan_report_prep1 as
        select * from tmp_rev_rac_v_block1';
            execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
       
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_loan_report_prep2
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC LOAN REPORT 2',
                   'RAC LOAN REPORT 2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_rac_loan_report_prep2';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_rac_loan_report_prep2';
       v_sql := 'create table rev_rac_loan_report_prep2 as
        SELECT a.*,
                (CASE
                    WHEN BAL_AVAILABLE < 0 AND AMT_OD_LIMIT = 0
                    THEN
                       BAL_AVAILABLE
                    WHEN     BAL_AVAILABLE < 0
                         AND AMT_OD_LIMIT > 0
                         AND ABS (BAL_AVAILABLE) > ABS (AMT_OD_LIMIT)
                    THEN
                       ABS (AMT_OD_LIMIT) - ABS (BAL_AVAILABLE)
                    ELSE
                       0
                 END)
                   due_unpaid_v,
                DECODE (
                   (CASE
                       WHEN BAL_AVAILABLE < 0 AND AMT_OD_LIMIT = 0
                       THEN
                          BAL_AVAILABLE
                       WHEN     BAL_AVAILABLE < 0
                            AND AMT_OD_LIMIT > 0
                            AND ABS (BAL_AVAILABLE) > ABS (AMT_OD_LIMIT)
                       THEN
                          ABS (AMT_OD_LIMIT) - ABS (BAL_AVAILABLE)
                       ELSE
                          0
                    END)                                      
                        ,
                   0, 0,
                   CTR_DAYS_OVERLINE_CURR)
                   DPDS_V
           FROM rev_rac_loan_report_prep1 a';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_rac_loan_report_prep2 as
        SELECT a.*,
                (CASE
                    WHEN BAL_AVAILABLE < 0 AND AMT_OD_LIMIT = 0
                    THEN
                       BAL_AVAILABLE
                    WHEN     BAL_AVAILABLE < 0
                         AND AMT_OD_LIMIT > 0
                         AND ABS (BAL_AVAILABLE) > ABS (AMT_OD_LIMIT)
                    THEN
                       ABS (AMT_OD_LIMIT) - ABS (BAL_AVAILABLE)
                    ELSE
                       0
                 END)
                   due_unpaid_v,
                DECODE (
                   (CASE
                       WHEN BAL_AVAILABLE < 0 AND AMT_OD_LIMIT = 0
                       THEN
                          BAL_AVAILABLE
                       WHEN     BAL_AVAILABLE < 0
                            AND AMT_OD_LIMIT > 0
                            AND ABS (BAL_AVAILABLE) > ABS (AMT_OD_LIMIT)
                       THEN
                          ABS (AMT_OD_LIMIT) - ABS (BAL_AVAILABLE)
                       ELSE
                          0
                    END)                                      
                        ,
                   0, 0,
                   CTR_DAYS_OVERLINE_CURR)
                   DPDS_V
           FROM rev_rac_loan_report_prep1 a';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
       
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_loan_report_prep3
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC LOAN REPORT 3',
                   'RAC LOAN REPORT 3',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_rac_loan_report_prep3';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_rac_loan_report_prep3';
       v_sql := 'create table rev_rac_loan_report_prep3 as
        SELECT a.*,
                (CASE
                    WHEN DPDS_V = 0
                    THEN
                       ''CURRENT''
                    WHEN DPDS_V > 0 AND DPDS_V < 30
                    THEN
                       TO_CHAR (DPDS_V) || ''Days''
                    WHEN DPDS_V >= 30 AND DPDS_V < 60
                    THEN
                       ''30 DPD''
                    WHEN DPDS_V >= 60 AND DPDS_V < 90
                    THEN
                       ''60 DPD''
                    WHEN DPDS_V >= 90 AND DPDS_V < 120
                    THEN
                       ''90 DPD''
                    WHEN DPDS_V >= 120 AND DPDS_V < 150
                    THEN
                       ''120 DPD''
                    WHEN DPDS_V >= 150 AND DPDS_V < 180
                    THEN
                       ''150 DPD''
                    WHEN DPDS_V >= 180 AND DPDS_V < 360
                    THEN
                       ''180 DPD''
                    ELSE
                       ''360 DPD''
                 END)
                   BUCKET
           FROM rev_rac_loan_report_prep2 a';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_rac_loan_report_prep3 as
        SELECT a.*,
                (CASE
                    WHEN DPDS_V = 0
                    THEN
                       ''CURRENT''
                    WHEN DPDS_V > 0 AND DPDS_V < 30
                    THEN
                       TO_CHAR (DPDS_V) || ''Days''
                    WHEN DPDS_V >= 30 AND DPDS_V < 60
                    THEN
                       ''30 DPD''
                    WHEN DPDS_V >= 60 AND DPDS_V < 90
                    THEN
                       ''60 DPD''
                    WHEN DPDS_V >= 90 AND DPDS_V < 120
                    THEN
                       ''90 DPD''
                    WHEN DPDS_V >= 120 AND DPDS_V < 150
                    THEN
                       ''120 DPD''
                    WHEN DPDS_V >= 150 AND DPDS_V < 180
                    THEN
                       ''150 DPD''
                    WHEN DPDS_V >= 180 AND DPDS_V < 360
                    THEN
                       ''180 DPD''
                    ELSE
                       ''360 DPD''
                 END)
                   BUCKET
           FROM rev_rac_loan_report_prep2 a';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
       
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
procedure prc_rac_eligibility_1
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC ELIGIBILITY RUN1',
                   'RAC ELIGIBILITY RUN1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_rac_elig_tmp1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_rac_elig_tmp1';
       v_sql := 'create table rev_rac_elig_tmp1 as
        SELECT cust_id cust_no,
                  MAX (acct_1) cust_ac_no,
                  MAX (bal_available) sett_ac_balance_amt,
                  SUM (LOAN_AMOUNT_LCY) loan_amount_lcy,
                  SUM (PRINCIPAL_OUTSTANDING_BAL_LCY) principal_outstanding_bal_lcy,
                  MAX (BUCKET) bucket,
                  SUM (EMI_IN) emi,
                  MAX (DELQ_AMOUNT_IN) delq_amount
             FROM (SELECT cust_id,
                          (SELECT DISTINCT cust_ac_no
                             FROM stglive.src_sttm_cust_account a
                            WHERE     account_class IN (''010001'',
                                                        ''010002'',
                                                        ''010003'',
                                                        ''010004'',
                                                        ''010020'',
                                                        ''010024'')
                                  AND a.cust_ac_no = COD_ACCT_NO)
                             AS acct_1,
                          bal_available,
                          product_code,
                          LOAN_AMOUNT_LCY,
                          PRINCIPAL_OUTSTANDING_BAL_LCY,
                          BUCKET,
                          CASE
                             WHEN    (RATE / 100) IS NULL
                                  OR (tenor / 30) IS NULL
                                  OR loan_amount_lcy IS NULL
                             THEN
                                0
                             ELSE
                                CASE
                                   WHEN ((POWER ((1 + ( (RATE / 100) / 12)),
                                                   (TENOR / 30)))
                                         - 1) = 0
                                   THEN
                                    loan_amount_lcy/nullif(tenor/30,0) --2.2
                                   ELSE
                                      (  LOAN_AMOUNT_LCY
                                       * ( (RATE / 100) / 12)
                                       * POWER ( (1 + ( (RATE / 100) / 12)),
                                                (TENOR / 30))
                                       / (  (POWER (
                                                (1 + ( (RATE / 100) / 12)),
                                                (TENOR / 30)))
                                          - 1))
                                END
                          END
                             AS EMI_IN,
                          CASE
                             WHEN    BUCKET = ''30 DPD''
                                  OR BUCKET = ''60 DPD''
                                  OR BUCKET = ''90 DPD''
                                  OR BUCKET = ''120 DPD''
                                  OR BUCKET = ''150 DPD''
                                  OR BUCKET = ''180 DPD''
                                  OR BUCKET = ''360 DPD''
                             THEN
                                DUE_UNPAID_V
                             ELSE
                                0
                          END
                             AS DELQ_AMOUNT_IN
                     FROM (SELECT DISTINCT cust_id,
                                           SETTLEMENT_ACCOUNT COD_ACCT_NO,
                                           REF_NO,
                                           bal_available,
                                           LOAN_AMOUNT_LCY,
                                           PRINCIPAL_OUTSTANDING_BAL_LCY,
                                           BUCKET,
                                           TENOR,
                                           RATE,
                                           DUE_UNPAID_V,
                                           product_code
                             FROM rev_rac_loan_report_prep3))
         GROUP BY cust_id';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_rac_elig_tmp1 as
        SELECT cust_id cust_no,
                  MAX (acct_1) cust_ac_no,
                  MAX (bal_available) sett_ac_balance_amt,
                  SUM (LOAN_AMOUNT_LCY) loan_amount_lcy,
                  SUM (PRINCIPAL_OUTSTANDING_BAL_LCY) principal_outstanding_bal_lcy,
                  MAX (BUCKET) bucket,
                  SUM (EMI_IN) emi,
                  MAX (DELQ_AMOUNT_IN) delq_amount
             FROM (SELECT cust_id,
                          (SELECT DISTINCT cust_ac_no
                             FROM stglive.src_sttm_cust_account a
                            WHERE     account_class IN (''010001'',
                                                        ''010002'',
                                                        ''010003'',
                                                        ''010004'',
                                                        ''010020'',
                                                        ''010024'')
                                  AND a.cust_ac_no = COD_ACCT_NO)
                             AS acct_1,
                          bal_available,
                          product_code,
                          LOAN_AMOUNT_LCY,
                          PRINCIPAL_OUTSTANDING_BAL_LCY,
                          BUCKET,
                          CASE
                             WHEN    (RATE / 100) IS NULL
                                  OR (tenor / 30) IS NULL
                                  OR loan_amount_lcy IS NULL
                             THEN
                                0
                             ELSE
                                CASE
                                   WHEN (  (POWER ( (1 + ( (RATE / 100) / 12)),
                                                   (TENOR / 30)))
                                         - 1) = 0
                                   THEN
                                    loan_amount_lcy/nullif(tenor/30,0) --2.2
                                   ELSE
                                      (  LOAN_AMOUNT_LCY
                                       * ( (RATE / 100) / 12)
                                       * POWER ( (1 + ( (RATE / 100) / 12)),
                                                (TENOR / 30))
                                       / (  (POWER (
                                                (1 + ( (RATE / 100) / 12)),
                                                (TENOR / 30)))
                                          - 1))
                                END
                          END
                             AS EMI_IN,
                          CASE
                             WHEN    BUCKET = ''30 DPD''
                                  OR BUCKET = ''60 DPD''
                                  OR BUCKET = ''90 DPD''
                                  OR BUCKET = ''120 DPD''
                                  OR BUCKET = ''150 DPD''
                                  OR BUCKET = ''180 DPD''
                                  OR BUCKET = ''360 DPD''
                             THEN
                                DUE_UNPAID_V
                             ELSE
                                0
                          END
                             AS DELQ_AMOUNT_IN
                     FROM (SELECT DISTINCT cust_id,
                                           SETTLEMENT_ACCOUNT COD_ACCT_NO,
                                           REF_NO,
                                           bal_available,
                                           LOAN_AMOUNT_LCY,
                                           PRINCIPAL_OUTSTANDING_BAL_LCY,
                                           BUCKET,
                                           TENOR,
                                           RATE,
                                           DUE_UNPAID_V,
                                           product_code
                             FROM rev_rac_loan_report_prep3))
         GROUP BY cust_id';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
       
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_populate_src_sales_port
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC SALES PORTAL DATA',
                   'RAC SALES PORTAL DATA',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_src_sale_portal_8_data';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_src_sale_portal_8_data';
       v_sql := 'create table rev_src_sale_portal_8_data as
 SELECT a.*,CASE WHEN trim(b.customer_id) IS NULL THEN ''YES'' ELSE ''NO'' END
                eligibility,
                nonaccess_total_rentals,
                delq_amt
           FROM (SELECT cod_cust,
                          MAX (cod_acct_no) cod_acct_no,
                          nam_cust_full,
                          txt_custadr_add1,
                          txt_custadr_add2,
                          txt_custadr_add3,
                          nam_custadr_city,
                          nam_custadr_state,
                          nam_custadr_cntry,
                          txt_custadr_zip,
                          txt_permadr_add1,
                          txt_permadr_add2,
                          txt_permadr_add3,
                          nam_permadr_city,
                          nam_permadr_cntry,
                          nam_permadr_state,
                          txt_permadr_zip,
                          phone_no,
                          phone_no_off,
                          email,
                          sex,
                          branch_code,
                          branch_name,
                          zone,
                          sub_zone,
                          cod_prod,
                          cod_acct_stat,
                          account_type,
                          status,
                          SUM (curr_bal) curr_bal,
                          SUM (NVL (chq_bnced, 0)) chq_bnced,
                          SUM (amt_cr) amt_cr,
                          SUM (avg_cr) avg_cr,
                          SUM (amt_dr) amt_dr,
                          SUM (avg_dr) avg_dr,
                          MAX (b.sal_flag) sal_flag,
                          SUM (c.avg_bal) avg_bal_avail,
                          AVG (total_sal) total_sal,
                          MAX (company_name) company_name,
                          MAX (CASE
                                  WHEN COD_ACCT_STAT = ''O''
                                       AND cod_prod IN 
                                           (''010002'',
                                            ''010004'',
                                            ''010020'',
                                            ''010024'',
                                            ''010003'',
                                            ''020007'',
                                            ''010020'',
                                            ''010021'',
                                            ''010002'',
                                            ''010025'',
                                            ''020006'',
                                            ''010039'', ----added by Yennie 17012022 it is part of the update from 2021
                                            ''010004'',
                                            ''020009'',
                                            ''020001'',
                                            ''020003'',
                                            ''010023'',
                                            ''020004'',
                                            ''020008'',
                                            ''020011'',
                                            ''020015'',
                                            ''020017'',
                                            ''020016'',
                                            ''020033'',
                                            ''020034'')
                                  THEN
                                     COD_ACCT_NO
                               END)
                             COD_ACCT_NO_SETTL,
                          MAX(CASE
                                  WHEN NVL(total_sal, 0) > 0
                                       AND cod_prod IN
                                           (''010002'',
                                            ''010004'',
                                            ''010020'',
                                            ''010024'',
                                            ''010003'',
                                            ''020007'',
                                            ''010020'',
                                            ''010021'',
                                            ''010002'',
                                            ''010025'',
                                            ''020006'',
                                            ''010039'', ----added by Yennie 17012022 it is part of the update from 2021
                                            ''010004'',
                                            ''020009'',
                                            ''020001'',
                                            ''020003'',
                                            ''010023'',
                                            ''020004'',
                                            ''020008'',
                                            ''020011'',
                                            ''020015'',
                                            ''020017'',
                                            ''020016'',
                                            ''020033'',
                                            ''020034'')
                                  THEN
                                     COD_ACCT_NO
                               END)
                             COD_ACCT_NO_SAL,
                          MONTHH
                     FROM stglive.matview2 a,
                          tmp_rev_rac_drcr_sal b,
                          --stglive.rac_drcr_sal b,
                          stglive.rpt_sp_acc_twelvemonth_bal c
                    WHERE b.cust_ac_no = a.cod_acct_no(+)
                      and b.cust_ac_no = c.cust_ac_no(+)
                     GROUP BY cod_cust,
                          nam_cust_full,
                          txt_custadr_add1,
                          txt_custadr_add2,
                          txt_custadr_add3,
                          nam_custadr_city,
                          nam_custadr_state,
                          nam_custadr_cntry,
                          txt_custadr_zip,
                          txt_permadr_add1,
                          txt_permadr_add2,
                          txt_permadr_add3,
                          nam_permadr_city,
                          nam_permadr_cntry,
                          nam_permadr_state,
                          txt_permadr_zip,
                          phone_no,
                          phone_no_off,
                          email,
                          sex,
                          branch_code,
                          branch_name,
                          zone,
                          sub_zone,
                          cod_prod,
                          cod_acct_stat,
                          account_type,
                          status,
                          MONTHH) a,
                (  SELECT customer_id,
                          MAX (total_rentals) nonaccess_total_rentals,
                          MAX (delq_amt) delq_amt
                     FROM (SELECT loan_ct loan_ct,
                                  total_rentals,
                                  loan_ct_non_delq loan_ct_non_delq,
                                    NVL (BAL_30DPD, 0)
                                  + NVL (BAL_60DPD, 0)
                                  + NVL (BAL_PL_90DPD, 0)
                                     delq_amt,
                                  LPAD (customer_id, 9, 0) customer_id
                             FROM stglive.rpt_sales_bureau_data_fin
                            WHERE     loan_ct > loan_ct_non_delq
                                  AND   NVL (BAL_30DPD, 0)
                                      + NVL (BAL_60DPD, 0)
                                      + NVL (BAL_PL_90DPD, 0) > 0)
                 GROUP BY customer_id) b
                WHERE a.cod_cust = b.customer_id(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_src_sale_portal_8_data as
          select a.*,CASE WHEN trim(b.customer_id) IS NULL THEN ''YES'' ELSE ''NO'' END
                   eligibility,
                nonaccess_total_rentals,
                delq_amt
           FROM (select cod_cust,
                          MAX (cod_acct_no) cod_acct_no,
                          nam_cust_full,
                          txt_custadr_add1,
                          txt_custadr_add2,
                          txt_custadr_add3,
                          nam_custadr_city,
                          nam_custadr_state,
                          nam_custadr_cntry,
                          txt_custadr_zip,
                          txt_permadr_add1,
                          txt_permadr_add2,
                          txt_permadr_add3,
                          nam_permadr_city,
                          nam_permadr_cntry,
                          nam_permadr_state,
                          txt_permadr_zip,
                          phone_no,
                          phone_no_off,
                          email,
                          sex,
                          branch_code,
                          branch_name,
                          zone,
                          sub_zone,
                          cod_prod,
                          cod_acct_stat,
                          account_type,
                          status,
                          SUM (curr_bal) curr_bal,
                          SUM (NVL (chq_bnced, 0)) chq_bnced,
                          SUM (amt_cr) amt_cr,
                          SUM (avg_cr) avg_cr,
                          SUM (amt_dr) amt_dr,
                          SUM (avg_dr) avg_dr,
                          MAX (b.sal_flag) sal_flag,
                          SUM (c.avg_bal) avg_bal_avail,
                          AVG (total_sal) total_sal,
                          MAX (company_name) company_name,
                          MAX (CASE
                                  WHEN     COD_ACCT_STAT = ''O''
                                       AND cod_prod IN 
                                           (''010002'',
                                            ''010004'',
                                            ''010020'',
                                            ''010024'',
                                            ''010003'',
                                            ''020007'',
                                            ''010020'',
                                            ''010021'',
                                            ''010002'',
                                            ''010025'',
                                            ''020006'',
                                            ''010039'',----added by Yennie 17012022 it is part of the update from 2021
                                            ''010004'',
                                            ''020009'',
                                            ''020001'',
                                            ''020003'',
                                            ''010023'',
                                            ''020004'',
                                            ''020008'',
                                            ''020011'',
                                            ''020015'',
                                            ''020017'',
                                            ''020016'',
                                            ''020033'',
                                            ''020034'')
                                  THEN
                                     COD_ACCT_NO
                               END)
                             COD_ACCT_NO_SETTL,
                          max(case when nvl(total_sal, 0) > 0
                                       AND cod_prod IN
                                           (''010002'',
                                            ''010004'',
                                            ''010020'',
                                            ''010024'',
                                            ''010003'',
                                            ''020007'',
                                            ''010020'',
                                            ''010021'',
                                            ''010002'',
                                            ''010025'',
                                            ''020006'',
                                            ''010039'', ----added by Yennie 17012022 it is part of the update from 2021
                                            ''010004'',
                                            ''020009'',
                                            ''020001'',
                                            ''020003'',
                                            ''010023'',
                                            ''020004'',
                                            ''020008'',
                                            ''020011'',
                                            ''020015'',
                                            ''020017'',
                                            ''020016'',
                                            ''020033'',
                                            ''020034'')
                                  THEN
                                     COD_ACCT_NO
                               END)
                             COD_ACCT_NO_SAL,
                          MONTHH
                     FROM stglive.matview2 a,
                          tmp_rev_rac_drcr_sal b,
                          --stglive.rac_drcr_sal b,
                          stglive.rpt_sp_acc_twelvemonth_bal c
                    WHERE b.cust_ac_no = a.cod_acct_no(+)
                      and b.cust_ac_no = c.cust_ac_no(+)
                     GROUP BY cod_cust,
                          nam_cust_full,
                          txt_custadr_add1,
                          txt_custadr_add2,
                          txt_custadr_add3,
                          nam_custadr_city,
                          nam_custadr_state,
                          nam_custadr_cntry,
                          txt_custadr_zip,
                          txt_permadr_add1,
                          txt_permadr_add2,
                          txt_permadr_add3,
                          nam_permadr_city,
                          nam_permadr_cntry,
                          nam_permadr_state,
                          txt_permadr_zip,
                          phone_no,
                          phone_no_off,
                          email,
                          sex,
                          branch_code,
                          branch_name,
                          zone,
                          sub_zone,
                          cod_prod,
                          cod_acct_stat,
                          account_type,
                          status,
                          MONTHH) a,
                (SELECT customer_id,
                          MAX(total_rentals) nonaccess_total_rentals,
                          MAX(delq_amt) delq_amt
                     FROM(SELECT loan_ct loan_ct,
                                  total_rentals,
                                  loan_ct_non_delq loan_ct_non_delq,
                                    NVL (BAL_30DPD, 0)
                                  + NVL (BAL_60DPD, 0)
                                  + NVL (BAL_PL_90DPD, 0)
                                     delq_amt,
                                  LPAD(customer_id, 9, 0) customer_id
                             FROM stglive.rpt_sales_bureau_data_fin
                            WHERE loan_ct > loan_ct_non_delq
                                  AND   NVL (BAL_30DPD, 0)
                                      + NVL (BAL_60DPD, 0)
                                      + NVL (BAL_PL_90DPD, 0) > 0)
                 GROUP BY customer_id) b
                WHERE a.cod_cust = b.customer_id(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
       
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_card_report_stat
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC REPORT STAT SUMMARY',
                   'RAC REPORT STAT SUMMARY',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_rpt_card_report_stat_summ';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_rpt_card_report_stat_summ';
       v_sql := 'create table rev_rpt_card_report_stat_summ as
       select cust_no,
                  sum (out_bal) OUTSTANDING_BAL,
                  sum (min_amt_due) MINIMUM_AMTDUE,
                  case when upper(to_char(days_due)) = ''OK'' then ''0''
                       when upper(to_char(days_due)) = ''VIOLATED'' then ''300''  
                       when days_due  = ''180 days'' then ''180''
                       when days_due  = ''X days'' then  ''20''
                       when days_due  = ''Current'' then ''20'' 
                       when days_due  = ''90 days'' then ''90''
                       when days_due  = ''60 days'' then ''60''  
                       else days_due end as DAYS_OVERDUE ,
                  max (status) status,
                  max (actv_state) ACTIVATION_STATE,
                  max (card_state) CARD_STATE,
                  max (date_captured) DATE_CAPTURED
             from (  select max (cust_no) cust_no,
                            max (abs(outstanding_bal)) out_bal,
                            max (abs(minimum_amtdue)) min_amt_due,
                            max (days_overdue) days_due,
                            max (status) status,
                            max (activation_state) actv_state,
                            max (card_state) card_state,
                            max (date_captured) date_captured
                       from minimumdue.tblminimumdue@loc_fcubslive a,
                            stglive.src_sttm_cust_account b
                      where  extacct_no = cust_ac_no
                            and trunc(date_captured) =
                                   (select max (trunc(date_captured))
                                      from minimumdue.tblminimumdue@loc_fcubslive)
                   group by cust_no)
         group by cust_no,days_due';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_rpt_card_report_stat_summ as
       select cust_no,
                  sum (out_bal) OUTSTANDING_BAL,
                  sum (min_amt_due) MINIMUM_AMTDUE,
                  case when upper(to_char(days_due)) = ''OK'' then ''0''
                       when upper(to_char(days_due)) = ''VIOLATED'' then ''300''  
                       when days_due  = ''180 days'' then ''180''
                       when days_due  = ''X days'' then  ''20''
                       when days_due  = ''Current'' then ''20'' 
                       when days_due  = ''90 days'' then ''90''
                       when days_due  = ''60 days'' then ''60''  
                       else days_due end as DAYS_OVERDUE ,
                  max (status) status,
                  max (actv_state) ACTIVATION_STATE,
                  max (card_state) CARD_STATE,
                  max (date_captured) DATE_CAPTURED
             from (  select max (cust_no) cust_no,
                            max (abs(outstanding_bal)) out_bal,
                            max (abs(minimum_amtdue)) min_amt_due,
                            max (days_overdue) days_due,
                            max (status) status,
                            max (activation_state) actv_state,
                            max (card_state) card_state,
                            max (date_captured) date_captured
                       from minimumdue.tblminimumdue@loc_fcubslive a,
                            stglive.src_sttm_cust_account b
                      where  extacct_no = cust_ac_no
                            and trunc(date_captured) =
                                   (select max (trunc(date_captured))
                                      from minimumdue.tblminimumdue@loc_fcubslive)
                   group by cust_no)
        group by cust_no,days_due';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_rac_eligibility_temp
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC ELIGIBILITY TMP',
                   'RAC ELIGIBILITY TMP',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_rac_eligibility_tmp1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_rac_eligibility_tmp1';
       v_sql := 'create table rev_rac_eligibility_tmp1 as
        SELECT a.*,
                (CASE
                    WHEN     NVL (total_sal, 0) = 0
                         AND LOAN_BASED_ELG_1 = ''YES''
                         AND CARD_BASED_ELG_2 = ''YES''
                         AND BUREAU_BASED_ELG_7 = ''YES''
                    THEN
                       ''YES''
                    WHEN NVL (total_sal, 0) = 0
                    THEN
                       ''NO''
                    WHEN     NVL (total_sal, 0) > 0
                         AND LOAN_BASED_ELG_1 = ''YES''
                         AND CARD_BASED_ELG_2 = ''YES''
                         AND SAL_CR_LAST_MONTH_ELG_4 = ''YES''
                         AND BUREAU_BASED_ELG_7 = ''YES''
                    THEN
                       ''YES''
                    WHEN COD_PROD NOT IN (''010002'',
                                          ''010004'',
                                          ''010020'',
                                          ''010024'')
                    THEN
                       ''NO''
                    WHEN bucket NOT IN (''30 DPD'')
                    THEN
                       ''NO''
                    WHEN NVL (total_sal, 0) < 0
                    THEN
                       ''NO''
                    WHEN NVL (total_sal * 0.5, 0) <= 10000
                    THEN
                       ''NO''
                    ELSE
                       ''NO''
                 END)
                   OVERALL_ELIGIBILITY,
                ROUND (
                   (CASE
                       WHEN INCR_ALLOWED < CDL_MAX_AMT_SAL_ELG
                       THEN
                          INCR_ALLOWED
                       ELSE
                          CDL_MAX_AMT_SAL_ELG
                    END),
                   2)
                   CDL_MAX_LOAN_AMT_ELG
           FROM (SELECT a.*,
                        NVL (DELQ_AMOUNT * -1, 0) DELQ_AMOUNT,
                        NVL (OUTSTANDING_BAL, 0) OUTSTANDING_BAL,
                        NVL (MINIMUM_AMTDUE, 0) card_od,
                        TO_NUMBER (NVL (replace (DAYS_OVERDUE, ''#N/A'',0), 0)) card_status_dpd,
                        NVL (emi, 0) emi,
                        ROUND (total_sal * 0.3333, 2) DEBT_BURDEN_ALLOWED,
                          NVL (emi, 0)
                        + NVL (NONACCESS_TOTAL_RENTALS, 0)
                        + NVL (MINIMUM_AMTDUE, 0)
                           total_debts,
                          ROUND (NVL (total_sal, 0) * 0.3333, 2)
                        - NVL (emi, 0)
                        - NVL (NONACCESS_TOTAL_RENTALS, 0)
                        - NVL (MINIMUM_AMTDUE, 0)
                           INCR_ALLOWED,
                        (CASE
                            WHEN bucket IN (''30 DPD'',
                                            ''60 DPD'',
                                            ''90 DPD'',
                                            ''120 DPD'',
                                            ''150 DPD'',
                                            ''180 DPD'',
                                            ''360 DPD'')
                            THEN
                               ''NO''
                            ELSE
                               ''YES''
                         END)
                           LOAN_BASED_ELG_1,
                        (CASE
                            WHEN NVL (replace (DAYS_OVERDUE, ''#N/A'',0), 0) <= 60 THEN ''YES''
                            ELSE ''NO''
                         END)
                           CARD_BASED_ELG_2,
                        ''YES'' CHQ_BOUNCING_BASED_ELG_3,
                        NVL2 (TOTAL_SAL, ''YES'', ''NO'') SAL_CR_LAST_MONTH_ELG_4,
                        ELIGIBILITY BUREAU_BASED_ELG_7,
                        BUCKET,
                        (CASE
                            WHEN NVL (
                                      ROUND (NVL (total_sal, 0) * 0.3333, 2)
                                    - NVL (emi, 0)
                                    - NVL (NONACCESS_TOTAL_RENTALS, 0)
                                    - NVL (MINIMUM_AMTDUE, 0),
                                    0) > 0
                            THEN
                               ''YES''
                            ELSE
                               ''NO''
                         END)
                           DEBT_TO_REPAYMENT_ELG_8,
                        NVL2 (TOTAL_SAL, 0, AVG_BAL_AVAIL * 0.8)
                           max_card_limit,
                        (CASE
                            WHEN TOTAL_SAL < 60000
                            THEN
                               0
                            WHEN TOTAL_SAL BETWEEN 60000 AND 99999
                            THEN
                               20000
                            WHEN TOTAL_SAL BETWEEN 100000 AND 149999
                            THEN
                               35000
                            ELSE
                               TOTAL_SAL * 0.33
                         END)
                           CDL_MAX_AMT_SAL_ELG,
                        (CASE
                            WHEN TOTAL_SAL < 60000 THEN 0
                            WHEN TOTAL_SAL BETWEEN 60000 AND 99999 THEN 3
                            WHEN TOTAL_SAL BETWEEN 100000 AND 149999 THEN 6
                            ELSE 12
                         END)
                           CDL_MAX_TENOR,
                        (CASE
                            WHEN TOTAL_SAL < 60000
                            THEN
                               99
                            WHEN TOTAL_SAL BETWEEN 60000 AND 99999
                            THEN
                               0.3
                            WHEN TOTAL_SAL BETWEEN 100000 AND 149999
                            THEN
                               0.28
                            ELSE
                               0.25
                         END)
                           CDL_MIN_INTEREST,
                        ROUND (
                           (CASE
                               WHEN TOTAL_SAL < 30000
                               THEN
                                  0
                               WHEN TOTAL_SAL BETWEEN 30000 AND 99999
                               THEN
                                  TOTAL_SAL * 0.5
                               WHEN TOTAL_SAL BETWEEN 100000 AND 149999
                               THEN
                                  TOTAL_SAL * 0.6
                               ELSE
                                  TOTAL_SAL * 0.7
                            END),
                           2)
                           PDL_MAX_AMT_SAL_ELG,
                        1 PDL_MAX_TENOR,
                        0.28 PDL_MIN_INTEREST,
                        0.02 PDL_FEE,
                        SETT_AC_BALANCE_AMT,
                        LOAN_AMOUNT_LCY,
                        PRINCIPAL_OUTSTANDING_BAL_LCY
                   FROM rev_src_sale_portal_8_data a,
                        rev_rpt_card_report_stat_summ b,
                        rev_RAC_ELIG_TMP1 c
                  WHERE  TO_CHAR (a.cod_cust) = TO_CHAR (b.cust_no(+))
                AND TO_CHAR (a.cod_cust) = TO_CHAR (c.cust_no(+)))a';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_rac_eligibility_tmp1 as
        SELECT a.*,
                (CASE
                    WHEN     NVL (total_sal, 0) = 0
                         AND LOAN_BASED_ELG_1 = ''YES''
                         AND CARD_BASED_ELG_2 = ''YES''
                         AND BUREAU_BASED_ELG_7 = ''YES''
                    THEN
                       ''YES''
                    WHEN NVL (total_sal, 0) = 0
                    THEN
                       ''NO''
                    WHEN     NVL (total_sal, 0) > 0
                         AND LOAN_BASED_ELG_1 = ''YES''
                         AND CARD_BASED_ELG_2 = ''YES''
                         AND SAL_CR_LAST_MONTH_ELG_4 = ''YES''
                         AND BUREAU_BASED_ELG_7 = ''YES''
                    THEN
                       ''YES''
                    WHEN COD_PROD NOT IN (''010002'',
                                          ''010004'',
                                          ''010020'',
                                          ''010024'')
                    THEN
                       ''NO''
                    WHEN bucket NOT IN (''30 DPD'')
                    THEN
                       ''NO''
                    WHEN NVL (total_sal, 0) < 0
                    THEN
                       ''NO''
                    WHEN NVL (total_sal * 0.5, 0) <= 10000
                    THEN
                       ''NO''
                    ELSE
                       ''NO''
                 END)
                   OVERALL_ELIGIBILITY,
                ROUND (
                   (CASE
                       WHEN INCR_ALLOWED < CDL_MAX_AMT_SAL_ELG
                       THEN
                          INCR_ALLOWED
                       ELSE
                          CDL_MAX_AMT_SAL_ELG
                    END),
                   2)
                   CDL_MAX_LOAN_AMT_ELG
           FROM (SELECT a.*,
                        NVL (DELQ_AMOUNT * -1, 0) DELQ_AMOUNT,
                        NVL (OUTSTANDING_BAL, 0) OUTSTANDING_BAL,
                        NVL (MINIMUM_AMTDUE, 0) card_od,
                        TO_NUMBER (NVL (replace (DAYS_OVERDUE, ''#N/A'',0), 0)) card_status_dpd,
                        NVL (emi, 0) emi,
                        ROUND (total_sal * 0.3333, 2) DEBT_BURDEN_ALLOWED,
                          NVL (emi, 0)
                        + NVL (NONACCESS_TOTAL_RENTALS, 0)
                        + NVL (MINIMUM_AMTDUE, 0)
                           total_debts,
                          ROUND (NVL (total_sal, 0) * 0.3333, 2)
                        - NVL (emi, 0)
                        - NVL (NONACCESS_TOTAL_RENTALS, 0)
                        - NVL (MINIMUM_AMTDUE, 0)
                           INCR_ALLOWED,
                        (CASE
                            WHEN bucket IN (''30 DPD'',
                                            ''60 DPD'',
                                            ''90 DPD'',
                                            ''120 DPD'',
                                            ''150 DPD'',
                                            ''180 DPD'',
                                            ''360 DPD'')
                            THEN
                               ''NO''
                            ELSE
                               ''YES''
                         END)
                           LOAN_BASED_ELG_1,
                        (CASE
                            WHEN NVL (replace (DAYS_OVERDUE, ''#N/A'',0), 0) <= 60 THEN ''YES''
                            ELSE ''NO''
                         END)
                           CARD_BASED_ELG_2,
                        ''YES'' CHQ_BOUNCING_BASED_ELG_3,
                        NVL2 (TOTAL_SAL, ''YES'', ''NO'') SAL_CR_LAST_MONTH_ELG_4,
                        ELIGIBILITY BUREAU_BASED_ELG_7,
                        BUCKET,
                        (CASE
                            WHEN NVL (
                                      ROUND (NVL (total_sal, 0) * 0.3333, 2)
                                    - NVL (emi, 0)
                                    - NVL (NONACCESS_TOTAL_RENTALS, 0)
                                    - NVL (MINIMUM_AMTDUE, 0),
                                    0) > 0
                            THEN
                               ''YES''
                            ELSE
                               ''NO''
                         END)
                           DEBT_TO_REPAYMENT_ELG_8,
                        NVL2 (TOTAL_SAL, 0, AVG_BAL_AVAIL * 0.8)
                           max_card_limit,
                        (CASE
                            WHEN TOTAL_SAL < 60000
                            THEN
                               0
                            WHEN TOTAL_SAL BETWEEN 60000 AND 99999
                            THEN
                               20000
                            WHEN TOTAL_SAL BETWEEN 100000 AND 149999
                            THEN
                               35000
                            ELSE
                               TOTAL_SAL * 0.33
                         END)
                           CDL_MAX_AMT_SAL_ELG,
                        (CASE
                            WHEN TOTAL_SAL < 60000 THEN 0
                            WHEN TOTAL_SAL BETWEEN 60000 AND 99999 THEN 3
                            WHEN TOTAL_SAL BETWEEN 100000 AND 149999 THEN 6
                            ELSE 12
                         END)
                           CDL_MAX_TENOR,
                        (CASE
                            WHEN TOTAL_SAL < 60000
                            THEN
                               99
                            WHEN TOTAL_SAL BETWEEN 60000 AND 99999
                            THEN
                               0.3
                            WHEN TOTAL_SAL BETWEEN 100000 AND 149999
                            THEN
                               0.28
                            ELSE
                               0.25
                         END)
                           CDL_MIN_INTEREST,
                        ROUND (
                           (CASE
                               WHEN TOTAL_SAL < 30000
                               THEN
                                  0
                               WHEN TOTAL_SAL BETWEEN 30000 AND 99999
                               THEN
                                  TOTAL_SAL * 0.5
                               WHEN TOTAL_SAL BETWEEN 100000 AND 149999
                               THEN
                                  TOTAL_SAL * 0.6
                               ELSE
                                  TOTAL_SAL * 0.7
                            END),
                           2)
                           PDL_MAX_AMT_SAL_ELG,
                        1 PDL_MAX_TENOR,
                        0.28 PDL_MIN_INTEREST,
                        0.02 PDL_FEE,
                        SETT_AC_BALANCE_AMT,
                        LOAN_AMOUNT_LCY,
                        PRINCIPAL_OUTSTANDING_BAL_LCY
                   FROM rev_src_sale_portal_8_data a,
                        rev_rpt_card_report_stat_summ b,
                        rev_RAC_ELIG_TMP1 c
                  WHERE  TO_CHAR (a.cod_cust) = TO_CHAR (b.cust_no(+))
                AND TO_CHAR (a.cod_cust) = TO_CHAR (c.cust_no(+)))a';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_rac_elig_main_1
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC ELIGIBLE MAIN 1',
                   'RAC ELIGIBLE MAIN 1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
  --  select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_rac_eligible';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_rac_eligible';
       v_sql := 'create table rev_rac_eligible as
       select a.cod_cust cust_no,
                nam_cust_full,
                date_of_birth dat_of_birth,
                txt_custadr_add1,
                txt_custadr_add2,
                txt_custadr_add3,
                nam_custadr_city,
                nam_custadr_state,
                nam_custadr_cntry,
                txt_custadr_zip,
                txt_permadr_add1,
                txt_permadr_add2,
                txt_permadr_add3,
                nam_permadr_city,
                nam_permadr_cntry,
                nam_permadr_state,
                txt_permadr_zip,
                phone_no,
                phone_no_off,
                email,
                a.sex,
                accountofficer_code,
                accountofficer_name,
                a.branch_code,
                branch_name,
                cod_prod,
                a.account_type,
                company_name,
                status,
                avg_bal_avail curr_bal,
                sal_flag,
                (case when nvl (total_sal, 0) = 0 then ''N'' else ''Y'' end)
                   sal_cr_twelve_mnt_flag,
                total_sal2 avg_salary_cr, --CHANGED TO AVERAGE SALARY BASED ON RECOMMENDATION FROM VICTOR E 2/2/2018
                (case when nvl (total_sal, 0) = 0 then 0 else 1 end)
                   count_salary_cr,
                (total_sal2) last_salary_cr, --CHANGED TO AVERAGE SALARY BASED ON RECOMMENDATION FROM VICTOR E 2/2/2018
                monthh mnt_salary_cr,
                avg_cr AVG_AMT_TXN_CR,
                avg_dr AVG_AMT_TXN_DR,
                avg_bal_avail,
                nvl(chq_bnced,0) NOS_CHQ_BOUNCE,
                sett_ac_balance_amt,
                bucket dpd_sett_ac,
                loan_amount_lcy,
                principal_outstanding_bal_lcy,
                emi,
                cod_acct_no_sal,
                cod_acct_no_settl,
                outstanding_bal card_outstandings,
                card_od,
                card_status_dpd,
                total_debts,
                debt_burden_allowed,
                incr_allowed,
                delq_amount delq_amount_acc,
                abs(delq_amount) delq_amount_non_acc,
                loan_based_elg_1,
                card_based_elg_2,
                chq_bouncing_based_elg_3,
                sal_cr_last_month_elg_4,
                nvl2(nvl(cod_acct_no_settl, cod_acct_no_sal), ''YES'', ''NO'')
                   settl_acct_based_elg_5,
                '' '' rac_s3_based_elg_6,
                bureau_based_elg_7,
                debt_to_repayment_elg_8,
                case
                   when overall_eligibility in (''YES'')
                        and cod_prod in (''010002'',
                                         ''010004'',
                                         ''010020'',
                                         ''010024'',
                                         ''010003'',
                                         ''020007'',
                                         ''010020'',
                                         ''010021'',
                                         ''010002'',
                                         ''010025'',
                                         ''020006'',
                                         ''010039'', ----added by Yennie 17012022 it is part of the update from 2021
                                         ''010004'',
                                         ''020009'',
                                         ''020001'',
                                         ''020003'',
                                         ''010023'',
                                         ''020004'',
                                         ''020008'',
                                         ''020011'',
                                         ''020015'',
                                         ''020017'',
                                         ''020016'',
                                         ''020033'',
                                         ''020034'')
                   then
                      ''YES''
                    when cod_prod = ''010003'' then ''YES'' 
                    else
                      ''NO'' 
                end
                   overall_eligibility,
                max_card_limit,
                cdl_max_amt_sal_elg,
                cdl_max_tenor,
                cdl_min_interest,
                cdl_max_loan_amt_elg,
                pdl_max_amt_sal_elg,
                pdl_max_tenor,
                pdl_min_interest,
                pdl_fee,
                (total_sal2) * 0.5 percent_salary,
                ac_open_date,
                case when cod_prod = ''010003'' then 1 else e.risk_rating end risk_rating,
                trunc(sysdate) process_date
           from rev_rac_eligibility_tmp1 a,
                stglive.src_sttm_cust_personal b,
                stglive.src_sttm_cust_account c,
                (select unit_ref_no, accountofficer_code, accountofficer_name
                   from stglive.src_mitb_class_mapping, stglive.bank_team
                  where comp_mis_4 = accountofficer_code) d,
                (select distinct cust_no cust_no, risk_rating
                   from stglive.rac_risk_rating) e,
                (  select cod_cust, avg (total_sal) total_sal2
                     from rev_rac_eligibility_tmp1
                 group by cod_cust) x
          where     a.cod_cust = b.customer_no(+)
                and a.cod_acct_no_settl = c.cust_ac_no(+)
                and a.cod_acct_no_settl = d.unit_ref_no(+)
                and a.cod_cust = e.cust_no(+)
                and a.cod_cust = x.cod_cust(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_rac_eligible as
       select a.cod_cust cust_no,
                nam_cust_full,
                date_of_birth dat_of_birth,
                txt_custadr_add1,
                txt_custadr_add2,
                txt_custadr_add3,
                nam_custadr_city,
                nam_custadr_state,
                nam_custadr_cntry,
                txt_custadr_zip,
                txt_permadr_add1,
                txt_permadr_add2,
                txt_permadr_add3,
                nam_permadr_city,
                nam_permadr_cntry,
                nam_permadr_state,
                txt_permadr_zip,
                phone_no,
                phone_no_off,
                email,
                a.sex,
                accountofficer_code,
                accountofficer_name,
                a.branch_code,
                branch_name,
                cod_prod,
                a.account_type,
                company_name,
                status,
                avg_bal_avail curr_bal,
                sal_flag,
                (case when nvl (total_sal, 0) = 0 then ''N'' else ''Y'' end)
                   sal_cr_twelve_mnt_flag,
                total_sal2 avg_salary_cr, --CHANGED TO AVERAGE SALARY BASED ON RECOMMENDATION FROM VICTOR E 2/2/2018
                (case when nvl (total_sal, 0) = 0 then 0 else 1 end)
                   count_salary_cr,
                (total_sal2) last_salary_cr, --CHANGED TO AVERAGE SALARY BASED ON RECOMMENDATION FROM VICTOR E 2/2/2018
                monthh mnt_salary_cr,
                avg_cr AVG_AMT_TXN_CR,
                avg_dr AVG_AMT_TXN_DR,
                avg_bal_avail,
                nvl (chq_bnced,0) NOS_CHQ_BOUNCE,
                sett_ac_balance_amt,
                bucket dpd_sett_ac,
                loan_amount_lcy,
                principal_outstanding_bal_lcy,
                emi,
                cod_acct_no_sal,
                cod_acct_no_settl,
                outstanding_bal card_outstandings,
                card_od,
                card_status_dpd,
                total_debts,
                debt_burden_allowed,
                incr_allowed,
                delq_amount delq_amount_acc,
                abs (delq_amount) delq_amount_non_acc,
                loan_based_elg_1,
                card_based_elg_2,
                chq_bouncing_based_elg_3,
                sal_cr_last_month_elg_4,
                nvl2 (nvl (cod_acct_no_settl, cod_acct_no_sal), ''YES'', ''NO'')
                   settl_acct_based_elg_5,
                '' '' rac_s3_based_elg_6,
                bureau_based_elg_7,
                debt_to_repayment_elg_8,
                case
                   when     overall_eligibility in (''YES'')
                        and cod_prod in (''010002'',
                                         ''010004'',
                                         ''010020'',
                                         ''010024'',
                                         ''010003'',
                                         ''020007'',
                                         ''010020'',
                                         ''010021'',
                                         ''010002'',
                                         ''010025'',
                                         ''020006'',
                                         ''010039'', ----added by Yennie 17012022 it is part of the update from 2021
                                         ''010004'',
                                         ''020009'',
                                         ''020001'',
                                         ''020003'',
                                         ''010023'',
                                         ''020004'',
                                         ''020008'',
                                         ''020011'',
                                         ''020015'',
                                         ''020017'',
                                         ''020016'',
                                         ''020033'',
                                         ''020034'')
                   then
                      ''YES''
                    when cod_prod = ''010003'' then ''YES'' 
                    else
                      ''NO'' 
                end
                   overall_eligibility,
                max_card_limit,
                cdl_max_amt_sal_elg,
                cdl_max_tenor,
                cdl_min_interest,
                cdl_max_loan_amt_elg,
                pdl_max_amt_sal_elg,
                pdl_max_tenor,
                pdl_min_interest,
                pdl_fee,
                (total_sal2) * 0.5 percent_salary,
                ac_open_date,
                case when cod_prod = ''010003'' then 1 else e.risk_rating end risk_rating,
                trunc(sysdate) process_date
           from rev_rac_eligibility_tmp1 a,
                stglive.src_sttm_cust_personal b,
                stglive.src_sttm_cust_account c,
                (select unit_ref_no, accountofficer_code, accountofficer_name
                   from stglive.src_mitb_class_mapping, stglive.bank_team
                  where comp_mis_4 = accountofficer_code) d,
                (select distinct cust_no cust_no, risk_rating
                   from stglive.rac_risk_rating) e,
                (  select cod_cust, avg (total_sal) total_sal2
                     from rev_rac_eligibility_tmp1
                 group by cod_cust) x
          where     a.cod_cust = b.customer_no(+)
                and a.cod_acct_no_settl = c.cust_ac_no(+)
                and a.cod_acct_no_settl = d.unit_ref_no(+)
                and a.cod_cust = e.cust_no(+)
                and a.cod_cust = x.cod_cust(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     

    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_rac_temp_sal
as
      v_max_ref          date;
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC GET SALARY TMP',
                   'RAC GET SALARY TMP',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_tmp_salary';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_tmp_salary';
       v_sql := 'create table rev_tmp_salary as
       SELECT DISTINCT cust_no, a.*
           FROM (SELECT DISTINCT * FROM stglive.rev_sal_payments) a,
                stglive.src_sttm_cust_account b
          WHERE     trn_dt BETWEEN TRUNC (SYSDATE - 366)
                               AND TRUNC (SYSDATE - 1)
                AND a.cust_ac_no = b.cust_ac_no';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_tmp_salary as
       SELECT DISTINCT cust_no, a.*
           FROM (SELECT DISTINCT * FROM stglive.rev_sal_payments) a,
                stglive.src_sttm_cust_account b
          WHERE     trn_dt BETWEEN TRUNC (SYSDATE - 366)
                               AND TRUNC (SYSDATE - 1)
                AND a.cust_ac_no = b.cust_ac_no';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
  
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_rac_eligible_final
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC ELIGIBLE FINAL',
                   'RAC ELIGIBLE FINAL',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_rac_eligibility';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_rac_eligibility';
       v_sql := 'create table rev_rac_eligibility as
       SELECT distinct a.CUST_NO, NAM_CUST_FULL, DAT_OF_BIRTH, TXT_CUSTADR_ADD1, TXT_CUSTADR_ADD2, TXT_CUSTADR_ADD3, NAM_CUSTADR_CITY,
       NAM_CUSTADR_STATE, NAM_CUSTADR_CNTRY, TXT_CUSTADR_ZIP, TXT_PERMADR_ADD1, TXT_PERMADR_ADD2, TXT_PERMADR_ADD3,
       NAM_PERMADR_CITY, NAM_PERMADR_CNTRY, NAM_PERMADR_STATE, TXT_PERMADR_ZIP, PHONE_NO, PHONE_NO_OFF, EMAIL, SEX,
       ACCOUNTOFFICER_CODE, ACCOUNTOFFICER_NAME, BRANCH_CODE, BRANCH_NAME, COD_PROD, ACCOUNT_TYPE, COMPANY_NAME,
       STATUS, CURR_BAL, SAL_FLAG, SAL_CR_TWELVE_MNT_FLAG, AVG_SALARY_CR, COUNT_SALARY_CR, LAST_SALARY_CR, MNT_SALARY_CR,
       AVG_AMT_TXN_CR, AVG_AMT_TXN_DR, AVG_BAL_AVAIL, NOS_CHQ_BOUNCE, SETT_AC_BALANCE_AMT, DPD_SETT_AC, LOAN_AMOUNT_LCY,
       PRINCIPAL_OUTSTANDING_BAL_LCY, EMI, COD_ACCT_NO_SAL, COD_ACCT_NO_SETTL, CARD_OUTSTANDINGS, CARD_OD, CARD_STATUS_DPD,
       TOTAL_DEBTS, DEBT_BURDEN_ALLOWED, INCR_ALLOWED, DELQ_AMOUNT_ACC, DELQ_AMOUNT_NON_ACC, LOAN_BASED_ELG_1,
       CARD_BASED_ELG_2, CHQ_BOUNCING_BASED_ELG_3, SAL_CR_LAST_MONTH_ELG_4, SETTL_ACCT_BASED_ELG_5, RAC_S3_BASED_ELG_6,
       BUREAU_BASED_ELG_7, DEBT_TO_REPAYMENT_ELG_8,
       case when trim(signal)=''KASS'' then ''NO'' else a.overall_eligibility end overall_eligibility, MAX_CARD_LIMIT, CDL_MAX_AMT_SAL_ELG,
       CDL_MAX_TENOR, CDL_MIN_INTEREST, CDL_MAX_LOAN_AMT_ELG, PDL_MAX_AMT_SAL_ELG, PDL_MAX_TENOR, PDL_MIN_INTEREST,
       PDL_FEE, PERCENT_SALARY, AC_OPEN_DATE, RISK_RATING, PROCESS_DATE,
         NVL (avg_12_mnth_salary, 0) avg_12_mnth_sal, NVL (least_mnth_sal, 0) lowest_12_mnth_sal
           FROM rev_rac_eligible a,
                (SELECT cust_no,
                          ROUND (AVG (LCY_AMOUNT), 2) avg_12_mnth_salary,
                          MIN (LCY_AMOUNT) least_mnth_sal
                     FROM rev_tmp_salary
                 GROUP BY cust_no) b,
                 tmp_rac_acct_mast_elig c
          WHERE a.cust_no = b.cust_no(+)
          and a.cust_no = c.CUSTOMER_ID(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_rac_eligibility as
       SELECT distinct a.CUST_NO, NAM_CUST_FULL, DAT_OF_BIRTH, TXT_CUSTADR_ADD1, TXT_CUSTADR_ADD2, TXT_CUSTADR_ADD3, NAM_CUSTADR_CITY,
       NAM_CUSTADR_STATE, NAM_CUSTADR_CNTRY, TXT_CUSTADR_ZIP, TXT_PERMADR_ADD1, TXT_PERMADR_ADD2, TXT_PERMADR_ADD3,
       NAM_PERMADR_CITY, NAM_PERMADR_CNTRY, NAM_PERMADR_STATE, TXT_PERMADR_ZIP, PHONE_NO, PHONE_NO_OFF, EMAIL, SEX,
       ACCOUNTOFFICER_CODE, ACCOUNTOFFICER_NAME, BRANCH_CODE, BRANCH_NAME, COD_PROD, ACCOUNT_TYPE, COMPANY_NAME,
       STATUS, CURR_BAL, SAL_FLAG, SAL_CR_TWELVE_MNT_FLAG, AVG_SALARY_CR, COUNT_SALARY_CR, LAST_SALARY_CR, MNT_SALARY_CR,
       AVG_AMT_TXN_CR, AVG_AMT_TXN_DR, AVG_BAL_AVAIL, NOS_CHQ_BOUNCE, SETT_AC_BALANCE_AMT, DPD_SETT_AC, LOAN_AMOUNT_LCY,
       PRINCIPAL_OUTSTANDING_BAL_LCY, EMI, COD_ACCT_NO_SAL, COD_ACCT_NO_SETTL, CARD_OUTSTANDINGS, CARD_OD, CARD_STATUS_DPD,
       TOTAL_DEBTS, DEBT_BURDEN_ALLOWED, INCR_ALLOWED, DELQ_AMOUNT_ACC, DELQ_AMOUNT_NON_ACC, LOAN_BASED_ELG_1,
       CARD_BASED_ELG_2, CHQ_BOUNCING_BASED_ELG_3, SAL_CR_LAST_MONTH_ELG_4, SETTL_ACCT_BASED_ELG_5, RAC_S3_BASED_ELG_6,
       BUREAU_BASED_ELG_7, DEBT_TO_REPAYMENT_ELG_8,
       case when trim(signal)=''KASS'' then ''NO'' else a.overall_eligibility end overall_eligibility, MAX_CARD_LIMIT, CDL_MAX_AMT_SAL_ELG,
       CDL_MAX_TENOR, CDL_MIN_INTEREST, CDL_MAX_LOAN_AMT_ELG, PDL_MAX_AMT_SAL_ELG, PDL_MAX_TENOR, PDL_MIN_INTEREST,
       PDL_FEE, PERCENT_SALARY, AC_OPEN_DATE, RISK_RATING, PROCESS_DATE,
         NVL (avg_12_mnth_salary, 0) avg_12_mnth_sal, NVL (least_mnth_sal, 0) lowest_12_mnth_sal
           FROM rev_rac_eligible a,
                (SELECT cust_no,
                          ROUND (AVG (LCY_AMOUNT), 2) avg_12_mnth_salary,
                          MIN (LCY_AMOUNT) least_mnth_sal
                     FROM rev_tmp_salary
                 GROUP BY cust_no) b,
                 tmp_rac_acct_mast_elig c
          WHERE a.cust_no = b.cust_no(+)
          and a.cust_no = c.CUSTOMER_ID(+)';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
    --BELOW ADDED BY YENNIE TO ADDRESS NEW RULES -- 09OCT2021 
     update rev_rac_eligibility
set RAC_S3_BASED_ELG_6 = 'N'
where cod_Acct_no_sal in (select * from tmp_rac_sal_acct_2m);
commit;

update rev_rac_eligibility
set RAC_S3_BASED_ELG_6 = 'P'
where cod_Acct_no_sal in (select * from tmp_rac_sal_acct_4m);
commit;
     
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_move_to_live
 as
      
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_emi_sum             NUMBER;
      v_message          VARCHAR2 (500);
      v_data_count       NUMBER := 0;
      p_process_date     DATE;
      v_staff_count      NUMBER;
      
      
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'MOVE TO LIVE',
                   'MOVE TO LIVE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
 
   ----------------------------------------------------------------------------
      /*TO CHECK THAT THE RAC ELIGIBILITY IS NOT EMPTY BEFORE PUSHING TO LIVE*/
      ----------------------------------------------------------------------------
      SELECT COUNT (*) INTO v_data_count FROM rev_RAC_ELIGIBILITY;

      SELECT MAX (process_date)
        INTO p_process_date
        FROM salesportal.RPT_SALES_PORTAL_ELG@SALESPORTAL_LIVE;
        
        SELECT sum(emi) into v_emi_sum FROM rev_RAC_ELIGIBILITY;

      SELECT COUNT (CASE WHEN cod_prod = '010003' THEN 1 ELSE NULL END)
        INTO v_staff_count
        FROM rev_RAC_ELIGIBILITY;

      IF v_data_count <= 200000
      THEN
         NULL;

         DCP.prc_rac_refresh_mail ('DAILY_RUN',
                                   'SUCESSFUL WITH NO DATA',
                                   v_data_count);
      ELSIF v_data_count > 200000 AND v_staff_count < 3250 
      THEN
         NULL;

         DCP.prc_rac_refresh_mail ('DAILY_RUN',
                                   'SUCESSFUL WITH NO STAFF DATA',
                                   v_data_count);
      ELSIF     v_data_count > 200000
            AND v_staff_count > 3250
            AND p_process_date = TRUNC (SYSDATE)
      THEN
         NULL;

         DCP.prc_rac_refresh_mail ('DAILY_RUN',
                                   'REFRESH ALREADY DONE TODAY',
                                   v_data_count);
      ELSIF     v_data_count > 200000
            AND v_staff_count > 3250 and v_emi_sum > 50000000
            AND p_process_date <> TRUNC (SYSDATE)
      THEN
         /*PUSH TO LIVE*/
         INSERT INTO salesportal.RPT_SALES_PORTAL_ELG@SALESPORTAL_LIVE (
                        COD_CUST,
                        NAM_CUST_FULL,
                        DAT_OF_BIRTH,
                        TXT_CUSTADR_ADD1,
                        TXT_CUSTADR_ADD2,
                        TXT_CUSTADR_ADD3,
                        NAM_CUSTADR_CITY,
                        NAM_CUSTADR_STATE,
                        NAM_CUSTADR_CNTRY,
                        TXT_CUSTADR_ZIP,
                        TXT_PERMADR_ADD1,
                        TXT_PERMADR_ADD2,
                        TXT_PERMADR_ADD3,
                        NAM_PERMADR_CITY,
                        NAM_PERMADR_CNTRY,
                        NAM_PERMADR_STATE,
                        TXT_PERMADR_ZIP,
                        PHONE_NO,
                        PHONE_NO_OFF,
                        EMAIL,
                        SEX,
                        ACCOUNTOFFICER_CODE,
                        ACCOUNTOFFICER_NAME,
                        BRANCH_CODE,
                        BRANCH_NAME,
                        COD_PROD,
                        ACCOUNT_TYPE,
                        COMPANY_NAME,
                        STATUS,
                        CURR_BAL,
                        SAL_FLAG,
                        SAL_CR_TWELVE_MNT_FLAG,
                        AVG_SALARY_CR,
                        COUNT_SALARY_CR,
                        LAST_SALARY_CR,
                        MNT_SALARY_CR,
                        AVG_AMT_TXN_CR,
                        AVG_AMT_TXN_DR,
                        AVG_BAL_AVAIL,
                        NOS_CHQ_BOUNCE,
                        SETT_AC_BALANCE_AMT,
                        DPD_SETT_AC,
                        LOAN_AMOUNT_LCY,
                        PRINCIPAL_OUTSTANDING_BAL_LCY,
                        EMI,
                        COD_ACCT_NO_SAL,
                        COD_ACCT_NO_SETTL,
                        CARD_OUTSTANDINGS,
                        CARD_OD,
                        CARD_STATUS_DPD,
                        TOTAL_DEBTS,
                        DEBT_BURDEN_ALLOWED,
                        INCR_ALLOWED,
                        DELQ_AMOUNT_ACC,
                        DELQ_AMOUNT_NON_ACC,
                        LOAN_BASED_ELG_1,
                        CARD_BASED_ELG_2,
                        CHQ_BOUNCING_BASED_ELG_3,
                        SAL_CR_LAST_MONTH_ELG_4,
                        SETTL_ACCT_BASED_ELG_5,
                        RAC_S3_BASED_ELG_6,
                        BUREAU_BASED_ELG_7,
                        DEBT_TO_REPAYMENT_ELG_8,
                        OVERALL_ELIGIBILITY,
                        MAX_CARD_LIMIT,
                        CDL_MAX_AMT_SAL_ELG,
                        CDL_MAX_TENOR,
                        CDL_MIN_INTEREST,
                        CDL_MAX_LOAN_AMT_ELG,
                        PDL_MAX_AMT_SAL_ELG,
                        PDL_MAX_TENOR,
                        PDL_MIN_INTEREST,
                        PDL_FEE,
                        TXT_PERMADR_CITY,
                        TXT_PERMADR_CNTRY,
                        TXT_PERMADR_STATE,
                        PERCENT_SALARY,
                        AC_OPEN_DATE,
                        risk_rating,
                        process_date,
                        AVG_12_MNTH_SAL,
                        LOWEST_12_MNTH_SAL)
            (SELECT cust_no,
                    NAM_CUST_FULL,
                    DAT_OF_BIRTH,
                    TXT_CUSTADR_ADD1,
                    TXT_CUSTADR_ADD2,
                    TXT_CUSTADR_ADD3,
                    NAM_CUSTADR_CITY,
                    NAM_CUSTADR_STATE,
                    NAM_CUSTADR_CNTRY,
                    TXT_CUSTADR_ZIP,
                    TXT_PERMADR_ADD1,
                    TXT_PERMADR_ADD2,
                    TXT_PERMADR_ADD3,
                    NAM_PERMADR_CITY,
                    NAM_PERMADR_CNTRY,
                    NAM_PERMADR_STATE,
                    TXT_PERMADR_ZIP,
                    SUBSTR (PHONE_NO, 1, 45),
                    SUBSTR (PHONE_NO_OFF, 1, 45),
                    EMAIL,
                    SEX,
                    ACCOUNTOFFICER_CODE,
                    ACCOUNTOFFICER_NAME,
                    BRANCH_CODE,
                    BRANCH_NAME,
                    COD_PROD,
                    ACCOUNT_TYPE,
                    COMPANY_NAME,
                    STATUS,
                    ROUND (CURR_BAL, 2),
                    SAL_FLAG,
                    (SAL_CR_TWELVE_MNT_FLAG),
                    ROUND (AVG_SALARY_CR, 2),
                    COUNT_SALARY_CR,
                    LAST_SALARY_CR,
                    MNT_SALARY_CR,
                    AVG_AMT_TXN_CR,
                    AVG_AMT_TXN_DR,
                    AVG_BAL_AVAIL,
                    NOS_CHQ_BOUNCE,
                    SETT_AC_BALANCE_AMT,
                    DPD_SETT_AC,
                    LOAN_AMOUNT_LCY,
                    ROUND (PRINCIPAL_OUTSTANDING_BAL_LCY, 2),
                    ROUND (EMI, 2),
                    COD_ACCT_NO_SAL,
                    COD_ACCT_NO_SETTL,
                    ROUND (CARD_OUTSTANDINGS, 2),
                    ROUND (CARD_OD, 2),
                    CARD_STATUS_DPD,
                    ROUND (TOTAL_DEBTS, 2),
                    ROUND (DEBT_BURDEN_ALLOWED, 2),
                    ROUND (INCR_ALLOWED, 2),
                    DELQ_AMOUNT_ACC,
                    ROUND (DELQ_AMOUNT_NON_ACC, 2),
                    LOAN_BASED_ELG_1,
                    CARD_BASED_ELG_2,
                    CHQ_BOUNCING_BASED_ELG_3,
                    SAL_CR_LAST_MONTH_ELG_4,
                    SETTL_ACCT_BASED_ELG_5,
                    RAC_S3_BASED_ELG_6,
                    BUREAU_BASED_ELG_7,
                    DEBT_TO_REPAYMENT_ELG_8,
                    OVERALL_ELIGIBILITY,
                    MAX_CARD_LIMIT,
                    CDL_MAX_AMT_SAL_ELG,
                    CDL_MAX_TENOR,
                    CDL_MIN_INTEREST,
                    CDL_MAX_LOAN_AMT_ELG,
                    PDL_MAX_AMT_SAL_ELG,
                    PDL_MAX_TENOR,
                    PDL_MIN_INTEREST,
                    PDL_FEE,
                    NAM_CUSTADR_CITY,
                    NAM_CUSTADR_CNTRY,
                    NAM_CUSTADR_STATE,
                    ROUND (PERCENT_SALARY, 2),
                    AC_OPEN_DATE,
                    risk_rating,
                    process_date,
                    ROUND (AVG_12_MNTH_SAL, 2),
                    ROUND (LOWEST_12_MNTH_SAL, 2)
               FROM rev_RAC_ELIGIBILITY);

         COMMIT;

         /*TO UPDATE FLAG STATUS FOR BOOKED LOANS IN RAC*/
         UPDATE rac_eligibility_transaction@salesportal_live
            SET FLAG = 'P'
          WHERE     offerid IN (SELECT ref_no
                                  FROM obiee_spool_n
                                 WHERE reference_date =
                                          (SELECT MAX (reference_date)
                                             FROM obiee_spool_n)
                                UNION
                                (SELECT offerid
                                   FROM RAC_ELIGIBILITY_TRANSACTION@salesportal_live
                                  WHERE     offerid IN (SELECT account_number
                                                          FROM cltb_account_master@salesportal_live
                                                         WHERE     product_code --= 'AMPC'
                                                                               IN ('AMPC',
                                                                                   'PDLP') ---modified by Chiamaka Chisom Ezendiokwere on 27mar2019 to include product code PDLP
                                                               AND ACCOUNT_STATUS =
                                                                      'L')
                                        AND flag <> 'P'))
                AND module not in ('LATO','LAIN','LATOPLUS','NYSC','CBDL','IBL0','IBL1','IBL2','LATOPREMIUM','LATOSUPERMART')---- added by YENI 09112019 to fix other loan variants exploiting AMPC RAC completion speed
                AND offerid IS NOT NULL;

         COMMIT;

         -- Move to Historical Table--
         INSERT INTO RPT_SALES_PORTAL_ELG_HIST
            SELECT *
              FROM salesportal.RPT_SALES_PORTAL_ELG@SALESPORTAL_LIVE
             WHERE process_date <> TRUNC (SYSDATE);

         COMMIT;

         ---Delete Old Record--
         DELETE salesportal.RPT_SALES_PORTAL_ELG@SALESPORTAL_LIVE
          WHERE process_date <> TRUNC (SYSDATE);

         COMMIT;
      END IF;

      COMMIT;
      
      
      /** TAKEN OUT BY YENNIE 3DEC2021 BECAUSE PAYLATER IS NOW TO USE DEV FINANCE RAC DATA
      --------------------ACCESS PAY LATER LIVE TABLE 
      insert into salesportal.RPT_SALES_PORTAL_ELG_PAY@SALESPORTAL_LIVE
select * from salesportal.RPT_SALES_PORTAL_ELG@SALESPORTAL_LIVE
where last_salary_cr >= 40000
and cod_prod in ('020029','020028','020027','020009','010062')
and process_date = trunc(sysdate)
and COD_ACCT_NO_SAL in 
(select cust_ac_no from rev_sal_payments 
where trn_dt >= ADD_MONTHS (TRUNC (SYSDATE, 'MM'), -3)
having count(cust_ac_no) > 2
group by cust_ac_no);
commit;

      -- Move to Historical Table ACCESS PAY LATER--
         INSERT INTO RPT_SALES_PORTAL_ELG_HIST_PAY
            SELECT *
              FROM salesportal.RPT_SALES_PORTAL_ELG_PAY@SALESPORTAL_LIVE
             WHERE process_date <> TRUNC (SYSDATE);

         COMMIT;

         ---Delete Old Record ACCESS PAY LATER--
         DELETE salesportal.RPT_SALES_PORTAL_ELG_PAY@SALESPORTAL_LIVE
          WHERE process_date <> TRUNC (SYSDATE);

         COMMIT;
         **/
   -------------------------------------------------------------------
   
   --------------------/*ACCESS VEHICLE FINANCE LIVE TABLE */
      insert into salesportal.RPT_SALES_PORTAL_ELG_VEHIcle@SALESPORTAL_LIVE
select * from salesportal.RPT_SALES_PORTAL_ELG@SALESPORTAL_LIVE
where ac_open_date < trunc(sysdate-31);
commit;

      -- Move to Historical Table VEHICLE FINANCE--
         INSERT INTO RPT_SALES_PORTAL_ELG_HIST_VF
            SELECT *
              FROM salesportal.RPT_SALES_PORTAL_ELG_VEHIcle@SALESPORTAL_LIVE
             WHERE process_date <> TRUNC (SYSDATE);

         COMMIT;

         ---Delete Old Record VEHICLE FINANCE--
         DELETE salesportal.RPT_SALES_PORTAL_ELG_VEHIcle@SALESPORTAL_LIVE
          WHERE process_date <> TRUNC (SYSDATE);

         COMMIT;



    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
      DCP.prc_rac_refresh_mail ('REV DAILY_RUN', 'SUCCESSFUL', v_data_count);
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);
         
         DCP.prc_rac_refresh_mail ('REV DAILY_RUN',
                                   'FAILED (' || v_message || ')',
                                   v_data_count);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 
 procedure prc_eligible_acct_mast
as
      
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC ELIGIBLE ACCT MAST',
                   'RAC ELIGIBLE ACCT MAST',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    --select max(reference_date) into v_max_ref from d_consolidated_credit_report_n;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='tmp_rac_acct_mast_elig';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      
       if(tab_cnt)>=1 Then
       execute immediate 'drop table tmp_rac_acct_mast_elig';
       v_sql := 'create table tmp_rac_acct_mast_elig as
       SELECT customer_id,''KASS'' signal
          FROM fcubslive.cltb_account_master@salesportal_live
          WHERE     product_code in (''AMPC'',''PDLP'')
          AND account_status = ''A''
          AND book_date <= SYSDATE - 30';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table tmp_rac_acct_mast_elig as
       SELECT customer_id,''KASS'' signal
          FROM fcubslive.cltb_account_master@salesportal_live
          WHERE     product_code in (''AMPC'',''PDLP'')
          AND account_status = ''A''
          AND book_date <= SYSDATE - 30';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_sixdays_sal_cumm
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
      max_date           date;
      min_date           date;
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC SIXDAYS SALARY ACCUM',
                   'RAC SIXDAYS SALARY ACCUM',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    select max(full_date),min(full_date) into max_date,min_date
              from stglive.dim_date
             where full_date between trunc (sysdate - 6)
                                 and trunc (sysdate - 1)
                    order by full_date asc;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sixdays_salary_accum';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_sixdays_salary_accum';
       v_sql := 'create table rev_sixdays_salary_accum as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
        where a.cust_ac_no=b.ac_no
        and b.drcr_ind=''C'' and ib=''N''
        and ( b.user_id in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''PAYCOL_AUTH'',''PAYCOL_INPUT''))
        or b.AUTH_ID in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''PAYCOL_AUTH'',''PAYCOL_INPUT'')) )
        and b.trn_code in (''SAL'',''SSU'',''PDL'')
        and b.trn_dt between '''||min_date||''' and '''||max_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_sixdays_salary_accum as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
        where a.cust_ac_no=b.ac_no
        and b.drcr_ind=''C'' and ib=''N''
        and ( b.user_id in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''PAYCOL_AUTH'',''PAYCOL_INPUT''))
        or b.AUTH_ID in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''PAYCOL_AUTH'',''PAYCOL_INPUT'')) )
        and b.trn_code in (''SAL'',''SSU'',''PDL'')
        and b.trn_dt between '''||min_date||''' and '''||max_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_2days_sal_patch
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 2DAYS SALARY ACCUM',
                   'RAC 2DAYS SALARY ACCUM',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_2days_salary_accum';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_2days_salary_accum';
       v_sql := 'create table rev_2days_salary_accum as
       SELECT cust_ac_no,
             ac_desc,
             account_class,
             trn_dt,
             trn_code,
             webserve.fn_get_desc_hist@loc_fcubslive (module,
                                                 Trn_Ref_No,
                                                 ac_entry_sr_no,
                                                 event_sr_no,
                                                 trn_code,
                                                 RELATED_ACCOUNT,
                                                 ac_no,
                                                 ac_branch,
                                                 AC_CCY,
                                                 AMOUNT_TAG,
                                                 EVENT,
                                                 INSTRUMENT_CODE,
                                                 RELATED_CUSTOMER,
                                                 VALUE_DT,
                                                 TRN_DT,
                                                 RELATED_REFERENCE)
                narra,
             lcy_amount
        FROM stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
       WHERE     a.cust_ac_no = b.ac_no
             AND b.drcr_ind = ''C''
             AND (b.user_id IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''PAYCOL_AUTH'',
                                                      ''PAYCOL_INPUT''))
                  OR b.AUTH_ID IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''PAYCOL_AUTH'',
                                                      ''PAYCOL_INPUT'')))
             AND b.trn_code IN (''SAL'', ''SSU'',''PDL'')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_2days_salary_accum as
       SELECT cust_ac_no,
             ac_desc,
             account_class,
             trn_dt,
             trn_code,
             webserve.fn_get_desc_hist@loc_fcubslive (module,
                                                 Trn_Ref_No,
                                                 ac_entry_sr_no,
                                                 event_sr_no,
                                                 trn_code,
                                                 RELATED_ACCOUNT,
                                                 ac_no,
                                                 ac_branch,
                                                 AC_CCY,
                                                 AMOUNT_TAG,
                                                 EVENT,
                                                 INSTRUMENT_CODE,
                                                 RELATED_CUSTOMER,
                                                 VALUE_DT,
                                                 TRN_DT,
                                                 RELATED_REFERENCE)
                narra,
             lcy_amount
        FROM stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
       WHERE     a.cust_ac_no = b.ac_no
             AND b.drcr_ind = ''C''
             AND (b.user_id IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''PAYCOL_AUTH'',
                                                      ''PAYCOL_INPUT''))
                  OR b.AUTH_ID IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''PAYCOL_AUTH'',
                                                      ''PAYCOL_INPUT'')))
             AND b.trn_code IN (''SAL'', ''SSU'',''PDL'')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_combine_salary1
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2(500);
      vv_sql             varchar2(20000);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC SALARY 1 COMBINE',
                   'RAC SALARY 1 COMBINE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sal_payments_tmp1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_sal_payments_tmp1';
       v_sql := 'create table rev_sal_payments_tmp1 as
       select * from rev_sixdays_salary_accum where ACCOUNT_CLASS not in (''050032'',
                               ''070008'',
                               ''070005'',
                               ''030002'',
                               ''090001'',
                               ''050021'',
                               ''060003'',
                               ''060006'',
                               ''010011'',
                               ''010001'',
                               ''010003'',
                               ''010008'',
                               ''010007'',
                               ''010022'',
                               ''030001'',
                               ''050033'',
                               ''050031'',
                               ''010012'',
                               ''050035'',
                               ''050026'',
                               ''090002'',
                               ''020005'',
                               ''050023'',
                               ''050017'',
                               ''020008'',
                               ''020007'',
                               ''020017'',
                               ''020025'')
          OR UPPER (narra) not LIKE ''%SALES%''
union all
select * from rev_2days_salary_accum where ACCOUNT_CLASS not in (''050032'',
                               ''070008'',
                               ''070005'',
                               ''030002'',
                               ''090001'',
                               ''050021'',
                               ''060003'',
                               ''060006'',
                               ''010011'',
                               ''010001'',
                               ''010003'',
                               ''010008'',
                               ''010007'',
                               ''010022'',
                               ''030001'',
                               ''050033'',
                               ''050031'',
                               ''010012'',
                               ''050035'',
                               ''050026'',
                               ''090002'',
                               ''020005'',
                               ''050023'',
                               ''050017'',
                               ''020008'',
                               ''020007'',
                               ''020017'',
                               ''020025'')
          OR UPPER (narra) not LIKE ''%SALES%''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_sal_payments_tmp1 as
       select * from rev_sixdays_salary_accum where ACCOUNT_CLASS not in (''050032'',
                               ''070008'',
                               ''070005'',
                               ''030002'',
                               ''090001'',
                               ''050021'',
                               ''060003'',
                               ''060006'',
                               ''010011'',
                               ''010001'',
                               ''010003'',
                               ''010008'',
                               ''010007'',
                               ''010022'',
                               ''030001'',
                               ''050033'',
                               ''050031'',
                               ''010012'',
                               ''050035'',
                               ''050026'',
                               ''090002'',
                               ''020005'',
                               ''050023'',
                               ''050017'',
                               ''020008'',
                               ''020007'',
                               ''020017'',
                               ''020025'')
          OR UPPER (narra) LIKE ''%SALES%''
union all
select * from rev_2days_salary_accum where ACCOUNT_CLASS not in (''050032'',
                               ''070008'',
                               ''070005'',
                               ''030002'',
                               ''090001'',
                               ''050021'',
                               ''060003'',
                               ''060006'',
                               ''010011'',
                               ''010001'',
                               ''010003'',
                               ''010008'',
                               ''010007'',
                               ''010022'',
                               ''030001'',
                               ''050033'',
                               ''050031'',
                               ''010012'',
                               ''050035'',
                               ''050026'',
                               ''090002'',
                               ''020005'',
                               ''050023'',
                               ''050017'',
                               ''020008'',
                               ''020007'',
                               ''020017'',
                               ''020025'')
          OR UPPER (narra) LIKE ''%SALES%''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     vv_sql:='SELECT DISTINCT *
        FROM rev_sal_payments_tmp1
        WHERE (   UPPER (narra) LIKE ''%SAL%''
                  OR UPPER (narra) LIKE ''%ALOWANCE''
                  OR UPPER (narra) LIKE ''%SALARY%''
                  OR UPPER (narra) LIKE ''%ALLOWANCE''
                  OR UPPER (narra) LIKE ''%PAYROLL%'')
             AND trn_dt BETWEEN TRUNC (SYSDATE - 6) AND TRUNC (SYSDATE - 1)';
     
     
     execute immediate 'insert into rev_sal_payments_tmp(CUST_AC_NO, AC_DESC, ACCOUNT_CLASS, TRN_DT, TRN_CODE,
     NARRA, LCY_AMOUNT)' || vv_sql;

        commit;
    
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_salary_payment
as
      v_sql              varchar2(32000);
      v_seq              number;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC SALARY PAYMENT',
                   'RAC SALARY PAYMENT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    delete from rev_sal_payments
         where trn_dt between trunc(sysdate - 6) and trunc(sysdate - 1);
     
    commit;
    
    v_sql:='select distinct *
        FROM rev_staffsal_payments
       WHERE trn_dt between trunc(sysdate - 6) and trunc(sysdate - 1)';
              
    execute immediate 'insert into rev_sal_payments(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
    narra, lcy_amount)' ||v_sql;
    
    v_sql:='select distinct *
        FROM rev_sal_payments_domop_f
       WHERE trn_dt between trunc(sysdate - 6) and trunc(sysdate - 1)';
              
    execute immediate 'insert into rev_sal_payments(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
    narra, lcy_amount)' ||v_sql;
    
    v_sql:='select distinct *
        FROM rev_sal_payments_third_party_f
       WHERE trn_dt between trunc(sysdate - 6) and trunc(sysdate - 1)';
              
    execute immediate 'insert into rev_sal_payments(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
    narra, lcy_amount)' ||v_sql;
    
     v_sql:='select distinct *
        FROM rev_sal_payments_tmp
       WHERE trn_dt between trunc(sysdate - 6) and trunc(sysdate - 1)';
              
    execute immediate 'insert into rev_sal_payments(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
    narra, lcy_amount)' ||v_sql;
    
    commit;
    
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_salary_payment_bkp
as
      v_sql              varchar2(32000);
      v_seq              number;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_rowcount         NUMBER;
      v_message          VARCHAR2 (500);
     

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC SALARY PAYMENT BKP',
                   'RAC SALARY PAYMENT BKP',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    delete from rev_sal_payments_bkp
         where trn_dt between trunc(sysdate - 6) and trunc(sysdate - 1);
    
    commit;
    
    v_sql:='select *
        FROM rev_sal_payments_tmp where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1)';
              
    execute immediate 'insert into rev_sal_payments_bkp(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
    narra, lcy_amount)' ||v_sql;
    
    v_sql:='select *
        FROM rev_sal_payments_third_party where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1)';
              
    execute immediate 'insert into rev_sal_payments_bkp(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
    narra, lcy_amount)' ||v_sql;
    
    v_sql:='select *
        FROM rev_sal_payments_stfsal where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1)';
              
    execute immediate 'insert into rev_sal_payments_bkp(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
    narra, lcy_amount)' ||v_sql;
    
    v_sql:='select *
        FROM rev_sal_payments_stfsal where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1)';
              
    execute immediate 'insert into rev_sal_payments_bkp(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
    narra, lcy_amount)' ||v_sql;
    
    v_sql:='select *
        FROM rev_sal_payments_domop_f where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1)';
              
    execute immediate 'insert into rev_sal_payments_bkp(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
    narra, lcy_amount)' ||v_sql;
   
    commit;
    
        select sum(cnt) into v_rows_processed from
          (select count(*) cnt
        FROM rev_sal_payments_tmp where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1)
          union
          select count(*) cnt from 
          (select *
        FROM rev_sal_payments_third_party where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1))
          union
          select count(*) cnt from 
          (select *
        FROM rev_sal_payments_stfsal where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1))
          union
          select count(*) cnt from
          (select *
        FROM rev_sal_payments_stfsal where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1))
         union
         select count(*) from
         (select *
        FROM rev_sal_payments_domop_f where
          trn_dt between trunc(sysdate-6) and trunc(sysdate-1))) ;
          commit;
    
  
   UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
      
        DCP.prc_rac_refresh_mail('RAC SALARY PAYMENT BKP', 'COMPLETED', v_rows_processed);   --included to monitor the refresh status                                                                    
     COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);
      
        DCP.prc_rac_refresh_mail('RAC SALARY PAYMENT BKP', 'FAILED (' || v_message || ')', v_rows_processed);   --included to monitor the refresh status                                                                    
     COMMIT;

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
  procedure prc_sixday_staff_pay
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
      max_date           date;
      min_date           date;
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 6DAYS STAFFSALARY ACCUM',
                   'RAC 6DAYS STAFFSALARY ACCUM',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    select max(full_date),min(full_date) into max_date,min_date
              from stglive.dim_date
             where full_date between trunc (sysdate - 6)
                                 and trunc (sysdate - 1)
                    order by full_date asc;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sixdays_staff_pay';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_sixdays_staff_pay';
       v_sql := 'create table rev_sixdays_staff_pay as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
        where a.cust_ac_no=b.ac_no
        and b.drcr_ind=''C'' and ib=''N''
        and (b.user_id in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''HR_INPUT'',''HR_AUTH''))
        or b.AUTH_ID in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''HR_INPUT'',''HR_AUTH'')))
        and account_class in (''010003'',''020001'', ''020003'')
        and b.trn_dt between '''||min_date||''' and '''||max_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_sixdays_staff_pay as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
        where a.cust_ac_no=b.ac_no
        and b.drcr_ind=''C'' and ib=''N''
        and (b.user_id in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''HR_INPUT'',''HR_AUTH''))
        or b.AUTH_ID in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''HR_INPUT'',''HR_AUTH'')))
        and account_class in (''010003'',''020001'', ''020003'')
        and b.trn_dt between '''||min_date||''' and '''||max_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_2day_staff_pay
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 2DAYS STAFFSALARY',
                   'RAC 2DAYS STAFFSALARY',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_2days_staff_salary';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_2days_staff_salary';
       v_sql := 'create table rev_2days_staff_salary as
       SELECT cust_ac_no,
             ac_desc,
             account_class,
             trn_dt,
             trn_code,
             webserve.fn_get_desc_hist@loc_fcubslive (module,
                                                 Trn_Ref_No,
                                                 ac_entry_sr_no,
                                                 event_sr_no,
                                                 trn_code,
                                                 RELATED_ACCOUNT,
                                                 ac_no,
                                                 ac_branch,
                                                 AC_CCY,
                                                 AMOUNT_TAG,
                                                 EVENT,
                                                 INSTRUMENT_CODE,
                                                 RELATED_CUSTOMER,
                                                 VALUE_DT,
                                                 TRN_DT,
                                                 RELATED_REFERENCE)
                narra,
             lcy_amount
        FROM stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
       WHERE     a.cust_ac_no = b.ac_no
             AND b.drcr_ind = ''C''
             AND (b.user_id IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''HR_INPUT'', ''HR_AUTH''))
                  OR b.AUTH_ID IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''HR_INPUT'', ''HR_AUTH'')))';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_2days_staff_salary as
       SELECT cust_ac_no,
             ac_desc,
             account_class,
             trn_dt,
             trn_code,
             webserve.fn_get_desc_hist@loc_fcubslive (module,
                                                 Trn_Ref_No,
                                                 ac_entry_sr_no,
                                                 event_sr_no,
                                                 trn_code,
                                                 RELATED_ACCOUNT,
                                                 ac_no,
                                                 ac_branch,
                                                 AC_CCY,
                                                 AMOUNT_TAG,
                                                 EVENT,
                                                 INSTRUMENT_CODE,
                                                 RELATED_CUSTOMER,
                                                 VALUE_DT,
                                                 TRN_DT,
                                                 RELATED_REFERENCE)
                narra,
             lcy_amount
        FROM stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
       WHERE     a.cust_ac_no = b.ac_no
             AND b.drcr_ind = ''C''
             AND (b.user_id IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''HR_INPUT'', ''HR_AUTH''))
                  OR b.AUTH_ID IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''HR_INPUT'', ''HR_AUTH'')))';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

     UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_combine_staffsalad
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC STAFFSALARY 1 COMBINE',
                   'RAC STAFFSALARY 1 COMBINE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sal_staff_tmp';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
     execute immediate 'drop table rev_sal_staff_tmp';
     v_sql := 'create table rev_sal_staff_tmp as
       select * from rev_sixdays_staff_pay where 
          UPPER(narra) NOT LIKE ''%APPRAISAL%''
     union all
       select * from rev_2days_staff_salary
          where UPPER(narra) NOT LIKE ''%APPRAISAL%''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_sal_staff_tmp as
       select * from rev_sixdays_staff_pay where 
          UPPER(narra) NOT LIKE ''%APPRAISAL%''
     union all
      select * from rev_2days_staff_salary
          where UPPER(narra) NOT LIKE ''%APPRAISAL%''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
   DELETE rev_sal_staff_tmp
    WHERE UPPER (narra) LIKE '%APPRAISAL%';

   COMMIT;
   
    
    insert into rev_sal_payments_stfsal
    select * from rev_sal_staff_tmp WHERE UPPER (narra) LIKE '%SAL%';
    commit;
     
    
    --rev_sal_payments_tmp
    
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_staffsal_payment_final
as
      v_sql              varchar2(32000);
      v_seq              number;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC STAFFSALARY PAYMENT',
                   'RAC STAFFSALARY PAYMENT',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    execute immediate 'truncate table rev_staffsal_payments';
  
    
    INSERT INTO rev_staffsal_payments
      SELECT *
        FROM rev_sal_staff_tmp
       WHERE UPPER(narra) LIKE '%SAL%';
    
    v_rows_processed := SQL%ROWCOUNT;
    commit;
--    v_sql:='select distinct *
--        FROM rev_sal_payments_tmp
--       WHERE (UPPER (narra) LIKE ''%SAL%''
--                  OR UPPER (narra) LIKE ''%ALOWANCE''
--                  OR UPPER (narra) LIKE ''%SALARY%''
--                  OR UPPER (narra) LIKE ''%ALLOWANCE''
--                  OR UPPER (narra) LIKE ''%PAYROLL%'')
--             and trn_dt between trunc(sysdate - 6) and trunc(sysdate - 1)';
--              
--    execute immediate 'insert into rev_sal_payments(cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
--    narra, lcy_amount)' ||v_sql;
    
      
    INSERT INTO rev_staffsal_payments_bkp
      SELECT *
        FROM rev_staffsal_payments
       WHERE trn_dt BETWEEN TRUNC (SYSDATE - 6) AND TRUNC (SYSDATE - 1);
    
    v_rows_processed := SQL%ROWCOUNT;
    commit;
  
   UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
-- procedure prc_2day_3rdparty_pay
--as
--      v_sql              varchar2(32000);
--      v_seq              number;
--      tab_cnt            integer;
--      v_date             date:=trunc(sysdate);
--      v_rows_processed   NUMBER;
--      v_message          VARCHAR2 (500);
--
--begin      
--       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
--            
--       INSERT INTO optimized_rac_log(process_sequence,
--                                     process_type,
--                                     process_name,
--                                     reference_date,
--                                     status,
--                                     MESSAGE,
--                                     row_count,
--                                     start_date,
--                                     end_date,
--                                     duration)
--           VALUES (v_seq,
--                   'RAC 2DAYS 3rdPARTYSALARY',
--                   'RAC 2DAYS 3rdPARTYSALARY',
--                   v_date,
--                   'STARTED',
--                   NULL,
--                   0,
--                   SYSDATE,
--                   NULL,
--                   NULL);
--
--          COMMIT;
--    
--    select pro_date into v_date from rac_date_control;
--
--    
--    begin
--        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_2days_3rdparty_sal';
--        EXCEPTION
--        WHEN NO_DATA_FOUND THEN
--            tab_cnt:=0;
--      end;
--      --rev_rac_eligible
--       if(tab_cnt)>=1 Then
--       execute immediate 'drop table rev_2days_3rdparty_sal';
--       v_sql := 'create table rev_2days_3rdparty_sal as
--       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
--        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
--        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
--        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
--        where a.cust_ac_no=b.ac_no
--        and b.drcr_ind=''C''
--        and  (user_id in (''PRIMUSLITE'',''PRIMUS'',''GORIUSER'',''WINDRAYUSER'')
--        or  trn_code in (''REM'', ''NAP'',''NFT'', ''PMR'',''PDL'',''FOF''))
--        union all
--        select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
--        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
--        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
--        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
--        where a.cust_ac_no=b.ac_no
--        and a.cust_ac_no in (select * from stglive.TMP_RAC_SALARY_ACC_ADEKUNLEUNI)
--        and b.drcr_ind=''C''
--        and  trn_code in (''NIP'')';
--     execute immediate v_sql;
--     v_rows_processed := SQL%ROWCOUNT;
--     else
--    v_sql := 'create table rev_2days_3rdparty_sal as
--       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
--        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
--        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
--        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
--        where a.cust_ac_no=b.ac_no
--        and b.drcr_ind=''C''
--        and  (user_id in (''PRIMUSLITE'',''PRIMUS'',''GORIUSER'',''WINDRAYUSER'')
--        or  trn_code in (''REM'', ''NAP'',''NFT'', ''PMR'',''PDL'',''FOF''))
--         union all
--        select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
--        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
--        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
--        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
--        where a.cust_ac_no=b.ac_no
--        and a.cust_ac_no in (select * from stglive.TMP_RAC_SALARY_ACC_ADEKUNLEUNI)
--        and b.drcr_ind=''C''
--        and  trn_code in (''NIP'')';
--     execute immediate v_sql;
--    v_rows_processed := SQL%ROWCOUNT;
--    end if;
--
--    UPDATE optimized_rac_log
--         SET status = 'COMPLETED',
--             MESSAGE = 'SUCCESS',
--             row_count = v_rows_processed,
--             end_date = SYSDATE,
--             duration = (SYSDATE - start_date) * 24 * 3600
--       WHERE process_sequence = v_seq;
--
--      COMMIT;
--   EXCEPTION
--      WHEN OTHERS
--      THEN
--         v_message := SUBSTR (SQLERRM, 1, 200);
--
--         UPDATE optimized_rac_log
--            SET status = 'FAILED',
--                MESSAGE = v_message,
--                row_count = 0,
--                end_date = SYSDATE,
--                duration = (SYSDATE - start_date) * 24 * 3600
--          WHERE process_sequence = v_seq;
--
--         COMMIT;
-- end;
-- procedure prc_sixday_3rdparty_pay
--as
--      v_sql              varchar2(32000);
--      v_seq              number;
--      tab_cnt            integer;
--      v_date             date:=trunc(sysdate);
--      v_rows_processed   NUMBER;
--      v_message          VARCHAR2 (500);
--      max_date           date;
--      min_date           date;
--begin      
--       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
--            
--       INSERT INTO optimized_rac_log(process_sequence,
--                                     process_type,
--                                     process_name,
--                                     reference_date,
--                                     status,
--                                     MESSAGE,
--                                     row_count,
--                                     start_date,
--                                     end_date,
--                                     duration)
--           VALUES (v_seq,
--                   'RAC 6DAYS 3rdSALARY',
--                   'RAC 6DAYS 3rdSALARY',
--                   v_date,
--                   'STARTED',
--                   NULL,
--                   0,
--                   SYSDATE,
--                   NULL,
--                   NULL);
--
--          COMMIT;
--    
--    select pro_date into v_date from rac_date_control;
--    
--    select max(full_date),min(full_date) into max_date,min_date
--              from stglive.dim_date
--             where full_date between trunc (sysdate - 6)
--                                 and trunc (sysdate - 1)
--                    order by full_date asc;
--    
--    begin
--        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sixdays_3rdparty_pay';
--        EXCEPTION
--        WHEN NO_DATA_FOUND THEN
--            tab_cnt:=0;
--      end;
--      --rev_rac_eligible
--       if(tab_cnt)>=1 Then
--       execute immediate 'drop table rev_sixdays_3rdparty_pay';
--       v_sql := 'create table rev_sixdays_3rdparty_pay as
--       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
--        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
--        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
--        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
--        where a.cust_ac_no=b.ac_no
--        and b.drcr_ind=''C'' and ib=''N''
--        and  (user_id in (''PRIMUSLITE'',''PRIMUS'',''GORIUSER'',''WINDRAYUSER'')
--        or  trn_code in (''REM'', ''NAP'',''NFT'', ''PMR'',''PDL'',''FOF''))
--        and b.trn_dt between '''||min_date||''' and '''||max_date||'''
--        union all
--        select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
--        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
--        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
--        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
--        where a.cust_ac_no=b.ac_no
--        and a.cust_ac_no in (select * from stglive.TMP_RAC_SALARY_ACC_ADEKUNLEUNI)
--        and b.drcr_ind=''C'' and ib=''N''
--        and  trn_code in (''NIP'')
--        and b.trn_dt between '''||min_date||''' and '''||max_date||'''';
--     execute immediate v_sql;
--     v_rows_processed := SQL%ROWCOUNT;
--     else
--    v_sql := 'create table rev_sixdays_3rdparty_pay as
--       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
--        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
--        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
--        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
--        where a.cust_ac_no=b.ac_no
--        and b.drcr_ind=''C'' and ib=''N''
--        and  (user_id in (''PRIMUSLITE'',''PRIMUS'',''GORIUSER'',''WINDRAYUSER'')
--        or  trn_code in (''REM'', ''NAP'',''NFT'', ''PMR'',''PDL'',''FOF''))
--        and b.trn_dt between '''||min_date||''' and '''||max_date||'''
--        union all
--        select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
--        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
--        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
--        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
--        where a.cust_ac_no=b.ac_no
--        and a.cust_ac_no in (select * from stglive.TMP_RAC_SALARY_ACC_ADEKUNLEUNI)
--        and b.drcr_ind=''C'' and ib=''N''
--        and  trn_code in (''NIP'')
--        and b.trn_dt between '''||min_date||''' and '''||max_date||'''';
--     execute immediate v_sql;
--     v_rows_processed := SQL%ROWCOUNT;
--     end if;
--
--    UPDATE optimized_rac_log
--         SET status = 'COMPLETED',
--             MESSAGE = 'SUCCESS',
--             row_count = v_rows_processed,
--             end_date = SYSDATE,
--             duration = (SYSDATE - start_date) * 24 * 3600
--       WHERE process_sequence = v_seq;
--
--      COMMIT;
--   EXCEPTION
--      WHEN OTHERS
--      THEN
--         v_message := SUBSTR (SQLERRM, 1, 200);
--
--         UPDATE optimized_rac_log
--            SET status = 'FAILED',
--                MESSAGE = v_message,
--                row_count = 0,
--                end_date = SYSDATE,
--                duration = (SYSDATE - start_date) * 24 * 3600
--          WHERE process_sequence = v_seq;
--
--         COMMIT;
-- end;
procedure prc_2day_3rdparty_pay
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 2DAYS 3rdPARTYSALARY',
                   'RAC 2DAYS 3rdPARTYSALARY',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_2days_3rdparty_sal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_2days_3rdparty_sal';
       v_sql := 'create table rev_2days_3rdparty_sal as
       select * from rev_2days_3rdparty_ext1
        union all
       select * from rev_2days_3rdparty_ext2';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_2days_3rdparty_sal as
       select * from rev_2days_3rdparty_ext1
        union all
       select * from rev_2days_3rdparty_ext2';
     execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
    end if;

    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_2days_3rdparty_ext1
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 2DAYS 3rdPARTY EXT1',
                   'RAC 2DAYS 3rdPARTY EXT1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_2days_3rdparty_ext7';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
    end;
    --rev_rac_eligible
    if(tab_cnt)>=1 Then
     execute immediate 'drop table rev_2days_3rdparty_ext7';
     v_sql := 'create table rev_2days_3rdparty_ext7 as
     select ac_no,trn_dt, trn_code,
       webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
       event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,lcy_amount
       from stglive.src_actb_daily_log
       where drcr_ind=''C''
       and  (user_id in (''PRIMUSLITE'',''PRIMUS'',''GORIUSER'',''WINDRAYUSER'')
       or  trn_code in (''REM'', ''NAP'',''NFT'', ''PMR'',''PDL'',''FOF''))';
    execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_2days_3rdparty_ext7 as
     select ac_no,trn_dt, trn_code,
       webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
       event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,lcy_amount
       from stglive.src_actb_daily_log
       where drcr_ind=''C''
       and  (user_id in (''PRIMUSLITE'',''PRIMUS'',''GORIUSER'',''WINDRAYUSER'')
       or  trn_code in (''REM'', ''NAP'',''NFT'', ''PMR'',''PDL'',''FOF''))';
     execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_2days_3rdparty_ext1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
    end;
    --rev_rac_eligible
    if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_2days_3rdparty_ext1';
     v_sql := 'create table rev_2days_3rdparty_ext1 as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code, narra,
        lcy_amount from rev_2days_3rdparty_ext7 b, stglive.src_sttm_cust_account a
       where b.ac_no = a.cust_ac_no';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_2days_3rdparty_ext1 as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code, narra,
        lcy_amount from rev_2days_3rdparty_ext7 b, stglive.src_sttm_cust_account a
       where b.ac_no = a.cust_ac_no';
    execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
    end if;

    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_2days_3rdparty_ext2
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 2DAYS 3rdPARTY EXT2',
                   'RAC 2DAYS 3rdPARTY EXT2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_2days_3rdparty_ext20';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
    execute immediate 'drop table rev_2days_3rdparty_ext20';
     v_sql := 'create table rev_2days_3rdparty_ext20 as
      select ac_no,trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_actb_daily_log
     where ac_no in (select acct from stglive.TMP_RAC_SALARY_ACC_ADEKUNLEUNI)
     and drcr_ind=''C''
     and  trn_code in (''NIP'')';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_2days_3rdparty_ext20 as
      select ac_no,trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_actb_daily_log
     where ac_no in (select acct from stglive.TMP_RAC_SALARY_ACC_ADEKUNLEUNI)
     and drcr_ind=''C''
     and  trn_code in (''NIP'')';
     execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
    end if;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_2days_3rdparty_ext2';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_2days_3rdparty_ext2';
     v_sql := 'create table rev_2days_3rdparty_ext2 as
      select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,narra,
        lcy_amount from rev_2days_3rdparty_ext20 a, stglive.src_sttm_cust_account b
     where a.ac_no=b.cust_ac_no';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_2days_3rdparty_ext2 as
      select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,narra,
        lcy_amount from rev_2days_3rdparty_ext20 a, stglive.src_sttm_cust_account b
     where a.ac_no=b.cust_ac_no';
     execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
    end if;

    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_6days_3rdparty_ext1
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
      max_date           date;
      min_date           date;
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 6DAYS 3rdSALARY EXT1',
                   'RAC 6DAYS 3rdSALARY EXT1',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    select max(full_date),min(full_date) into max_date,min_date
              from stglive.dim_date
             where full_date between trunc (sysdate - 6)
                                 and trunc (sysdate - 1)
                    order by full_date asc;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sixdays_3party_ext7';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
     execute immediate 'drop table rev_sixdays_3party_ext7';
     v_sql := 'create table rev_sixdays_3party_ext7 as
       select ac_no,trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_actb_history
        where drcr_ind=''C'' and ib=''N''
        and  (user_id in (''PRIMUSLITE'',''PRIMUS'',''GORIUSER'',''WINDRAYUSER'')
        or  trn_code in (''REM'', ''NAP'',''NFT'', ''PMR'',''PDL'',''FOF''))
     and trn_dt between '''||min_date||''' and '''||max_date||'''';        
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    else
    v_sql := 'create table rev_sixdays_3party_ext7 as
       select ac_no,trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_actb_history
        where drcr_ind=''C'' and ib=''N''
        and  (user_id in (''PRIMUSLITE'',''PRIMUS'',''GORIUSER'',''WINDRAYUSER'')
        or  trn_code in (''REM'', ''NAP'',''NFT'', ''PMR'',''PDL'',''FOF''))
     and trn_dt between '''||min_date||''' and '''||max_date||'''';        
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sixdays_3party_ext1';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
     execute immediate 'drop table rev_sixdays_3party_ext1';
     v_sql := 'create table rev_sixdays_3party_ext1 as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,narra,
        lcy_amount from rev_sixdays_3party_ext7 a, stglive.src_sttm_cust_account b
        where a.ac_no = b.cust_ac_no';          
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
    else
    v_sql := 'create table rev_sixdays_3party_ext1 as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,narra,
        lcy_amount from rev_sixdays_3party_ext7 a, stglive.src_sttm_cust_account b
        where a.ac_no = b.cust_ac_no';          
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_6days_3rdparty_ext2
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
      max_date           date;
      min_date           date;
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 6DAYS 3rdSALARY EXT2',
                   'RAC 6DAYS 3rdSALARY EXT2',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    select max(full_date),min(full_date) into max_date,min_date
              from stglive.dim_date
             where full_date between trunc (sysdate - 6)
                                 and trunc (sysdate - 1)
                    order by full_date asc;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sixdays_3party_ext20';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_sixdays_3party_ext20';
       v_sql := 'create table rev_sixdays_3party_ext20 as
       select ac_no, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_actb_history
        where ac_no in (select acct from stglive.TMP_RAC_SALARY_ACC_ADEKUNLEUNI)
        and drcr_ind=''C'' and ib=''N''
        and trn_code in (''NIP'')
        and trn_dt between '''||min_date||''' and '''||max_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table rev_sixdays_3party_ext20 as
       select ac_no, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_actb_history
        where ac_no in (select acct from stglive.TMP_RAC_SALARY_ACC_ADEKUNLEUNI)
        and drcr_ind=''C'' and ib=''N''
        and trn_code in (''NIP'')
        and trn_dt between '''||min_date||''' and '''||max_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
     begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sixdays_3party_ext2';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_sixdays_3party_ext2';
       v_sql := 'create table rev_sixdays_3party_ext2 as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,narra,
        lcy_amount from rev_sixdays_3party_ext20 a, stglive.src_sttm_cust_account b
        where a.ac_no=b.cust_ac_no';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
     v_sql := 'create table rev_sixdays_3party_ext2 as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,narra,
        lcy_amount from rev_sixdays_3party_ext20 a, stglive.src_sttm_cust_account b
        where a.ac_no=b.cust_ac_no';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_sixday_3rdparty_pay
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
      max_date           date;
      min_date           date;
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 6DAYS 3rdSALARY',
                   'RAC 6DAYS 3rdSALARY',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
       
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sixdays_3rdparty_pay';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_sixdays_3rdparty_pay';
       v_sql := 'create table rev_sixdays_3rdparty_pay as
       select * from rev_sixdays_3party_ext1
        union all
       select * from rev_sixdays_3party_ext2';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_sixdays_3rdparty_pay as
       select * from rev_sixdays_3party_ext1
        union all
       select * from rev_sixdays_3party_ext2';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_3rdparty_combine_sal
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
      vv_sql             varchar2(23000);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 3RDSALARY COMBINE',
                   'RAC 3RDSALARY COMBINE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_3rd_payment_tmp';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
     execute immediate 'drop table rev_3rd_payment_tmp';
     v_sql := 'create table rev_3rd_payment_tmp as
       select * from rev_2days_3rdparty_sal where 
          UPPER(narra) NOT LIKE ''%SALES%''
     union all
       select * from rev_sixdays_3rdparty_pay
          where UPPER(narra) NOT LIKE ''%SALES%''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_3rd_payment_tmp as
       select * from rev_2days_3rdparty_sal where 
          UPPER(narra) NOT LIKE ''%SALES%''
     union all
       select * from rev_sixdays_3rdparty_pay
          where UPPER(narra) NOT LIKE ''%SALES%''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
    delete from rev_sal_payments_third_party
    where UPPER (narra) LIKE '%SALES%'
    and trn_dt between trunc(sysdate)-6 and trunc(sysdate)-1;
    commit;
     
    vv_sql:='select CUST_AC_NO, AC_DESC, ACCOUNT_CLASS, TRN_DT, TRN_CODE, NARRA, LCY_AMOUNT from rev_sixdays_3rdparty_pay';
    
    execute immediate 'insert into rev_sal_payments_third_party(CUST_AC_NO, AC_DESC, ACCOUNT_CLASS, TRN_DT, TRN_CODE, NARRA, LCY_AMOUNT)' || vv_sql;
    
    commit;
     
     INSERT INTO rev_sal_payments_third_party_f
      SELECT *
        FROM rev_sal_payments_third_party
       WHERE     (   UPPER (narra) LIKE '%SAL%'
                  OR UPPER (narra) LIKE '%SALARY%'
                  OR UPPER (narra) LIKE '%ALLOWANCE%'
                  OR UPPER (narra) LIKE '%PAYROLL%'
                  OR UPPER (narra) LIKE '%AAUA FIRSTPAY%'
                  OR UPPER (narra) LIKE '%KINGS%'
                  )
             AND trn_dt BETWEEN TRUNC (SYSDATE - 6) AND TRUNC (SYSDATE - 1);
      commit;
      
      INSERT INTO rev_sal_payments_third_party_f
      SELECT *
        FROM rev_sal_payments_third_party
       WHERE     (   UPPER (narra) LIKE '%NFT/ECO%'
                  OR UPPER (narra) LIKE '%77_FMN_%'
                  OR UPPER (narra) LIKE '%PP_CHAPELHILL%'
                  --or upper(narra) like '%2018 WAGES%'----commented by Chiamaka Chisom Ezendiokwere to include all wages on 25th Feb 2019
                  OR UPPER (narra) LIKE '%WAGES%'
                  OR UPPER (narra) LIKE '%KINGS%'
                  OR UPPER (narra) LIKE '%TNIB TOTAL EP NIGERIA LTD%'
                  OR UPPER (narra) LIKE '%NNPC/TEPNG JOINT VEN%'
                                                 )
             AND trn_dt BETWEEN TRUNC (SYSDATE - 6) AND TRUNC (SYSDATE - 1)
             AND CUST_AC_NO IN (SELECT acct FROM stglive.TMP_RAC_SALARY_ACC);
             
             commit;
      
    DELETE rev_sal_payments_third_party_f
    WHERE    account_class IN ('050032',
                               '070008',
                               '070005',
                               '030002',
                               '090001',
                               '050021',
                               '060003',
                               '060006',
                               '010011',
                               '010001',
                               '010003',
                               '010008',
                               '010007',
                               '010022',
                               '030001',
                               '050033',
                               '050031',
                               '010012',
                               '050035',
                               '050026',
                               '090002',
                               '020005',
                               '050023',
                               '050017',
                               '020008',
                               '020007',
                               '020017',
                               '020025')
          OR lcy_amount <= 250;
        commit;

          
    --rev_sal_payments_tmp
    --sal_payments_third_party
    
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_domops_6days_sal
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
      max_date           date;
      min_date           date;
begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 6DAYS DOMOPS',
                   'RAC 6DAYS DOMOPS',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;
    
    select max(full_date),min(full_date) into max_date,min_date
              from stglive.dim_date
             where full_date between trunc (sysdate - 6)
                                 and trunc (sysdate - 1)
                    order by full_date asc;
    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_sixdays_domops_pay';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_sixdays_domops_pay';
       v_sql := 'create table rev_sixdays_domops_pay as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
        where a.cust_ac_no=b.ac_no
        and b.drcr_ind=''C'' and ib=''N''
        and ( b.user_id in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''DOMOPS_AUTH'',''DOMOPS_INPUT''))
        or b.AUTH_ID in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''DOMOPS_AUTH'',''DOMOPS_INPUT'')))
        and b.trn_dt between '''||min_date||''' and '''||max_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_sixdays_domops_pay as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_history b
        where a.cust_ac_no=b.ac_no
        and b.drcr_ind=''C'' and ib=''N''
        and ( b.user_id in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''DOMOPS_AUTH'',''DOMOPS_INPUT''))
        or b.AUTH_ID in (select distinct user_id from smtb_user_role@loc_fcubslive
        WHERE ROLE_id in (''DOMOPS_AUTH'',''DOMOPS_INPUT'')))
        and b.trn_dt between '''||min_date||''' and '''||max_date||'''';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;

    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_domops_2days_sal
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC 2DAYS DOMOPS',
                   'RAC 2DAYS DOMOPS',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_2days_domops_sal';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
       execute immediate 'drop table rev_2days_domops_sal';
       v_sql := 'create table rev_2days_domops_sal as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
        where a.cust_ac_no=b.ac_no
        and b.drcr_ind=''C''
        AND (b.user_id IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''DOMOPS_AUTH'',
                                                      ''DOMOPS_INPUT''))
                  OR b.AUTH_ID IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''DOMOPS_AUTH'',
                                                      ''DOMOPS_INPUT'')))';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_2days_domops_sal as
       select cust_ac_no, ac_desc, account_class, trn_dt, trn_code,
        webserve.fn_get_desc_hist@loc_fcubslive(module,trn_ref_no,ac_entry_sr_no,event_sr_no,trn_code,related_account,ac_no,ac_branch,ac_ccy,amount_tag,
        event,instrument_code,related_customer,value_dt,trn_dt,related_reference) narra,
        lcy_amount from stglive.src_sttm_cust_account a, stglive.src_actb_daily_log b
        where a.cust_ac_no=b.ac_no
        and b.drcr_ind=''C''
        AND (b.user_id IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''DOMOPS_AUTH'',
                                                      ''DOMOPS_INPUT''))
                  OR b.AUTH_ID IN (SELECT DISTINCT user_id
                                     FROM smtb_user_role@loc_fcubslive
                                    WHERE ROLE_id IN (''DOMOPS_AUTH'',
                                                      ''DOMOPS_INPUT'')))';
    execute immediate v_sql;
    v_rows_processed := SQL%ROWCOUNT;
    end if;

    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
 procedure prc_domops_combine
as
      v_sql              varchar2(32000);
      v_seq              number;
      tab_cnt            integer;
      v_date             date:=trunc(sysdate);
      v_rows_processed   NUMBER;
      v_message          VARCHAR2 (500);
      vv_sql             varchar2(23000);

begin      
       select SEQ_RAC_REFRESH.NEXTVAL into v_seq from dual;
            
       INSERT INTO optimized_rac_log(process_sequence,
                                     process_type,
                                     process_name,
                                     reference_date,
                                     status,
                                     MESSAGE,
                                     row_count,
                                     start_date,
                                     end_date,
                                     duration)
           VALUES (v_seq,
                   'RAC DOMOMPS COMBINE',
                   'RAC DOMOMPS COMBINE',
                   v_date,
                   'STARTED',
                   NULL,
                   0,
                   SYSDATE,
                   NULL,
                   NULL);

          COMMIT;
    
    select pro_date into v_date from rac_date_control;

    
    begin
        select count(*) into tab_cnt from sys.all_tables where owner = 'STGLIVE' and lower(table_name)='rev_domops_payment_tmp';
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            tab_cnt:=0;
      end;
      --rev_rac_eligible
       if(tab_cnt)>=1 Then
     execute immediate 'drop table rev_domops_payment_tmp';
     v_sql := 'create table rev_domops_payment_tmp as
       select * from rev_sixdays_domops_pay
       union all
       select * from rev_2days_domops_sal';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     else
    v_sql := 'create table rev_domops_payment_tmp as
       select * from rev_sixdays_domops_pay 
       union all
       select * from rev_2days_domops_sal';
     execute immediate v_sql;
     v_rows_processed := SQL%ROWCOUNT;
     end if;
     
        
    vv_sql:='select CUST_AC_NO, AC_DESC, ACCOUNT_CLASS, TRN_DT, TRN_CODE, NARRA, LCY_AMOUNT from rev_domops_payment_tmp';
    
    execute immediate 'insert into rev_sal_payments_domop(CUST_AC_NO, AC_DESC, ACCOUNT_CLASS, TRN_DT, TRN_CODE, NARRA, LCY_AMOUNT)' || vv_sql;
    
    commit;
    
    delete from rev_sal_payments_domop
    where UPPER (narra) LIKE '%SALES%'
    and trn_dt between trunc(sysdate)-6 and trunc(sysdate)-1;
    commit;
     
     INSERT INTO rev_sal_payments_domop_f
      SELECT *
        FROM rev_sal_payments_domop
       WHERE     (   UPPER (narra) LIKE '%SAL%'
                  OR UPPER (narra) LIKE '%SALARY%'
                  OR UPPER (narra) LIKE '%ALLOWANCE%'
                  OR UPPER (narra) LIKE '%PAYROLL%'
                  )
             AND trn_dt BETWEEN TRUNC (SYSDATE - 6) AND TRUNC (SYSDATE - 1);
      commit;
      
         
    DELETE rev_sal_payments_domop_f
    WHERE    account_class IN ('050032',
                               '070008',
                               '070005',
                               '030002',
                               '090001',
                               '050021',
                               '060003',
                               '060006',
                               '010011',
                               '010001',
                               '010003',
                               '010008',
                               '010007',
                               '010022',
                               '030001',
                               '050033',
                               '050031',
                               '010012',
                               '050035',
                               '050026',
                               '090002',
                               '020005',
                               '050023',
                               '050017',
                               '020008',
                               '020007',
                               '020017',
                               '020025')
          OR lcy_amount <= 250;
        commit;

          
    --rev_sal_payments_tmp
    --sal_payments_third_party
    
    UPDATE optimized_rac_log
         SET status = 'COMPLETED',
             MESSAGE = 'SUCCESS',
             row_count = v_rows_processed,
             end_date = SYSDATE,
             duration = (SYSDATE - start_date) * 24 * 3600
       WHERE process_sequence = v_seq;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_message := SUBSTR (SQLERRM, 1, 200);

         UPDATE optimized_rac_log
            SET status = 'FAILED',
                MESSAGE = v_message,
                row_count = 0,
                end_date = SYSDATE,
                duration = (SYSDATE - start_date) * 24 * 3600
          WHERE process_sequence = v_seq;

         COMMIT;
 end;
end;
/
